{
  "openapi": "3.0.3",
  "info": {
    "title": "Comprehensive OpenAPI Test Specification",
    "description": "A comprehensive OpenAPI specification that includes all major features and components for testing validation",
    "version": "1.2.3",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "API Support",
      "url": "https://example.com/support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKey": []
    },
    {
      "oauth2": ["read:users", "write:users"]
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Operations about users",
      "externalDocs": {
        "description": "Find out more about users",
        "url": "https://example.com/docs/users"
      }
    },
    {
      "name": "products",
      "description": "Product management"
    },
    {
      "name": "orders",
      "description": "Order processing"
    },
    {
      "name": "files",
      "description": "File management"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "description": "Retrieve a list of all users with optional filtering",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of users to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of users to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by user status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "pending"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of users",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Rate-Limit": {
                "description": "Requests per hour allowed",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                },
                "examples": {
                  "example1": {
                    "summary": "Sample user list",
                    "value": {
                      "users": [
                        {
                          "id": 1,
                          "name": "John Doe",
                          "email": "john@example.com",
                          "status": "active"
                        }
                      ],
                      "total": 1
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a new user",
        "description": "Create a new user account",
        "operationId": "createUser",
        "requestBody": {
          "description": "User data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              },
              "examples": {
                "example1": {
                  "summary": "Create user example",
                  "value": {
                    "name": "Jane Doe",
                    "email": "jane@example.com",
                    "password": "securePassword123"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "User identifier",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "minimum": 1
          }
        }
      ],
      "get": {
        "tags": ["users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "operationId": "getUserById",
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update user",
        "description": "Update an existing user",
        "operationId": "updateUser",
        "requestBody": {
          "description": "Updated user data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user",
        "description": "Delete a user account",
        "operationId": "deleteUser",
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["products"],
        "summary": "Get products",
        "description": "Retrieve a list of products",
        "operationId": "getProducts",
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/OffsetParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "total": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/upload": {
      "post": {
        "tags": ["files"],
        "summary": "Upload file",
        "description": "Upload a file",
        "operationId": "uploadFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "metadata": {
                    "type": "string"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": ["id", "name", "email"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the user",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "User's full name",
            "minLength": 1,
            "maxLength": 100,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john@example.com"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was last updated",
            "readOnly": true
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "additionalProperties": false,
        "example": {
          "id": 123,
          "name": "John Doe",
          "email": "john@example.com",
          "status": "active",
          "createdAt": "2023-01-01T00:00:00Z"
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string",
            "nullable": true,
            "maxLength": 500
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "website": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "UserStatus": {
        "type": "string",
        "enum": ["active", "inactive", "pending", "suspended"],
        "description": "User account status"
      },
      "CreateUserRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "writeOnly": true
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          }
        },
        "additionalProperties": false
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          }
        },
        "additionalProperties": false
      },
      "UserList": {
        "type": "object",
        "required": ["users", "total"],
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "Product": {
        "type": "object",
        "required": ["id", "name", "price"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "enum": ["USD", "EUR", "GBP"],
            "default": "USD"
          },
          "category": {
            "type": "string"
          },
          "inStock": {
            "type": "boolean",
            "default": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional error details"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "path": {
            "type": "string",
            "description": "Request path that caused the error"
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "fieldErrors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "rejectedValue": {
                      "oneOf": [
                        { "type": "string" },
                        { "type": "number" },
                        { "type": "boolean" }
                      ],
                      "nullable": true
                    }
                  },
                  "required": ["field", "message"]
                }
              }
            }
          }
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests",
        "headers": {
          "Retry-After": {
            "description": "Number of seconds to wait before retrying",
            "schema": {
              "type": "integer"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters": {
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "description": "Number of items to return",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      },
      "OffsetParam": {
        "name": "offset",
        "in": "query",
        "description": "Number of items to skip",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "headers": {
      "X-Rate-Limit": {
        "description": "Requests per hour allowed",
        "schema": {
          "type": "integer"
        }
      },
      "X-Total-Count": {
        "description": "Total number of items",
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT bearer token authentication"
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key authentication"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 authentication",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
              "read:users": "Read user information",
              "write:users": "Modify user information",
              "admin": "Administrative access"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
              "read:users": "Read user information",
              "write:users": "Modify user information"
            }
          }
        }
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic HTTP authentication"
      }
    },
    "links": {
      "GetUserByUserId": {
        "operationId": "getUserById",
        "parameters": {
          "userId": "$response.body#/id"
        },
        "description": "The `id` value returned in the response can be used as the `userId` parameter in `GET /users/{userId}`"
      }
    },
    "callbacks": {
      "webhookCallback": {
        "{$request.body#/callbackUrl}": {
          "post": {
            "requestBody": {
              "description": "Callback payload",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "event": {
                        "type": "string"
                      },
                      "data": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Callback received successfully"
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find more info here",
    "url": "https://example.com/docs"
  }
}
