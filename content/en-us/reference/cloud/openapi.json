{
  "openapi": "3.0.4",
  "info": {
    "title": "Roblox API",
    "description": "The Roblox API. See https://create.roblox.com/docs/cloud/open-cloud for more details.",
    "version": "1.0.0",
    "x-roblox-extensions-version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://apis.roblox.com"
    }
  ],
  "paths": {
    "/cloud/v2/creator-store-products": {
      "post": {
        "tags": ["Creator Store"],
        "summary": "Create Creator Store Product",
        "description": "Add a Creator Store product. Only use this method if your product has never\nbeen distributed on the Creator Store; otherwise, use the `PATCH` method to\nupdate the product.",
        "operationId": "Cloud_CreateCreatorStoreProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatorStoreProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatorStoreProduct"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "creator-store-product:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Monetization",
          "methodProperties": {
            "scopes": ["creator-store-product:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/CreatorStoreProduct",
            "name": "CreatorStoreProduct"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 30
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/creator-store#/CreatorStoreProduct/Cloud_CreateCreatorStoreProduct"
        }
      }
    },
    "/cloud/v2/creator-store-products/{creator_store_product_id}": {
      "get": {
        "tags": ["Creator Store"],
        "summary": "Get Creator Store Product",
        "description": "Get a Creator Store product.",
        "operationId": "Cloud_GetCreatorStoreProduct",
        "parameters": [
          {
            "name": "creator_store_product_id",
            "in": "path",
            "description": "The creator-store-product ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatorStoreProduct"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "creator-store-product:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Monetization",
          "methodProperties": {
            "scopes": ["creator-store-product:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/CreatorStoreProduct",
            "name": "CreatorStoreProduct"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 30
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/creator-store#/CreatorStoreProduct/Cloud_GetCreatorStoreProduct"
        }
      },
      "patch": {
        "tags": ["Creator Store"],
        "summary": "Update Creator Store Product",
        "description": "Update a Creator Store product.",
        "operationId": "Cloud_UpdateCreatorStoreProduct",
        "parameters": [
          {
            "name": "creator_store_product_id",
            "in": "path",
            "description": "The creator-store-product ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The list of fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          },
          {
            "name": "allowMissing",
            "in": "query",
            "description": "If set to true, and the creator store product is not found, a creator store\nproduct is created. In this situation, `update_mask` is ignored.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatorStoreProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatorStoreProduct"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "creator-store-product:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Monetization",
          "methodProperties": {
            "scopes": ["creator-store-product:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/CreatorStoreProduct",
            "name": "CreatorStoreProduct"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 30
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/creator-store#/CreatorStoreProduct/Cloud_UpdateCreatorStoreProduct"
        }
      }
    },
    "/cloud/v2/groups/{group_id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get Group",
        "description": "Gets the specified group.",
        "operationId": "Cloud_GetGroup",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/Group",
            "name": "Group"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 30
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/Group/Cloud_GetGroup"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/join-requests": {
      "get": {
        "tags": ["Groups"],
        "summary": "List Group Join Requests",
        "description": "List join requests under a group.",
        "operationId": "Cloud_ListGroupJoinRequests",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of group join requests to return. The service might\nreturn fewer than this value. If unspecified, at most 10 group join\nrequests are returned. The maximum value is 20 and higher values are set\nto 20.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 20, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nFiltering conforms to Common Expression Language (CEL). Only the `user`\nfield and `==` operator are supported.\n\n\nExample: `\"user == 'users/156'\"`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGroupJoinRequestsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "group:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["group:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/GroupJoinRequest",
            "name": "GroupJoinRequest"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 300
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 90
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupJoinRequest/Cloud_ListGroupJoinRequests"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/join-requests/{join_request_id}:accept": {
      "post": {
        "tags": ["Groups"],
        "summary": "Accept Group Join Request",
        "description": "Accepts a join request.",
        "operationId": "Cloud_AcceptGroupJoinRequest",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join_request_id",
            "in": "path",
            "description": "The join-request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptGroupJoinRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "group:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["group:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/GroupJoinRequest",
            "name": "GroupJoinRequest"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 90
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupJoinRequest/Cloud_AcceptGroupJoinRequest"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/join-requests/{join_request_id}:decline": {
      "post": {
        "tags": ["Groups"],
        "summary": "Decline Group Join Request",
        "description": "Declines a join request.",
        "operationId": "Cloud_DeclineGroupJoinRequest",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join_request_id",
            "in": "path",
            "description": "The join-request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineGroupJoinRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "group:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["group:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/GroupJoinRequest",
            "name": "GroupJoinRequest"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 90
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupJoinRequest/Cloud_DeclineGroupJoinRequest"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/memberships": {
      "get": {
        "tags": ["Groups"],
        "summary": "List Group Memberships",
        "description": "List group members in a group.",
        "operationId": "Cloud_ListGroupMemberships",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of group memberships to return. The service might return\nfewer than this value. If unspecified, at most 10 group memberships are\nreturned. The maximum value is 100 and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nSee the\n[filtering](/cloud/reference/patterns#list-group-memberships)\ndocumentation for more information.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGroupMembershipsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/GroupMembership",
            "name": "GroupMembership"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 300
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 90
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupMembership/Cloud_ListGroupMemberships"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/memberships/{membership_id}": {
      "patch": {
        "tags": ["Groups"],
        "summary": "Update Group Membership",
        "description": "Updates the group membership for a particular group member. This action\nrequires the requester to be able to manage lower ranked members. Guest or\nOwner ranks cannot be assigned, and a requester cannot change their own\nrank.",
        "operationId": "Cloud_UpdateGroupMembership",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "membership_id",
            "in": "path",
            "description": "The membership ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMembership"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "group:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["group:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/GroupMembership",
            "name": "GroupMembership"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 300
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 90
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupMembership/Cloud_UpdateGroupMembership"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/roles": {
      "get": {
        "tags": ["Groups"],
        "summary": "List Group Roles",
        "description": "List roles in a group.\n\nThe permissions field for roles is viewable based on the requester's access\nand scopes.\n\nPermissions for the guest role are always visible - a scope is not needed.\n\nIf the requester is a member of the group and has the `group:read` scope,\npermissions in their role are visible.\n\nIf the requester is the owner of the group and has the `group:read` scope,\npermissions in all roles are visible.",
        "operationId": "Cloud_ListGroupRoles",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of group roles to return. The service might return fewer\nthan this value. If unspecified, at most 10 group roles are returned. The\nmaximum value is 20 and higher values are set to 20.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 20, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGroupRolesResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Required to view permissions in non-guest roles.",
            "name": "group:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/GroupRole",
            "name": "GroupRole"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 300
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 90
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupRole/Cloud_ListGroupRoles"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/roles/{role_id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get Group Role",
        "description": "Get the group role",
        "operationId": "Cloud_GetGroupRole",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "The role ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRole"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Required to view permissions in non-guest roles.",
            "name": "group:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/GroupRole",
            "name": "GroupRole"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 300
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 90
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupRole/Cloud_GetGroupRole"
        }
      }
    },
    "/cloud/v2/groups/{group_id}/shout": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get Group Shout",
        "description": "Gets the group shout.\n\nIf a guest can view the group shout, this is always retrievable.\n\nIf a guest cannot, a member who has the permissions to view the group\nshout, along with the `group:read` scope, will be able to read the group\nshout.",
        "operationId": "Cloud_GetGroupShout",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "The group ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupShout"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Required to view the group shout if a guest cannot view the group shout.",
            "name": "group:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/GroupShout",
            "name": "GroupShout"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 30
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/GroupShout/Cloud_GetGroupShout"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}": {
      "get": {
        "tags": ["Universes"],
        "summary": "Get Universe",
        "description": "Gets the specified universe.",
        "operationId": "Cloud_GetUniverse",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Universe"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/Universe",
            "name": "Universe"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/Universe/Cloud_GetUniverse"
        }
      },
      "patch": {
        "tags": ["Universes"],
        "summary": "Update Universe",
        "description": "Updates the specified universe.\n\nThis method is guaranteed to return all updated fields.\nThis method may additionally return the full resource.",
        "operationId": "Cloud_UpdateUniverse",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The list of fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Universe"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Universe"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/Universe",
            "name": "Universe"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/Universe/Cloud_UpdateUniverse"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List Data Stores",
        "description": "Returns a list of data stores.",
        "operationId": "Cloud_ListDataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of data stores to return. The service might return fewer\nthan this value. If unspecified, at most 10 data stores are returned. The\nmaximum value is 100 and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nThe `filter` field supports a very small subset of CEL:\n\n* Only the `id` field is supported.\n* Only the `startsWith` function is available; no other operators nor\n  built-ins are supported.\n\nExample filter: `id.startsWith(\"foo\")`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "If true, resources marked for pending deletion will be included in the\nresults.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataStoresResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.control:list"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.control:list"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStore",
            "name": "DataStore"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStore/Cloud_ListDataStores"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List Data Store Entries",
        "description": "Returns a list of entries from a data store.\n\nOnly the `path` and `id` fields are populated; use `GetDataStoreEntry`\nto retrieve other fields.\n\nSpecify the wildcard scope (`-`) to list entries from all scopes.",
        "operationId": "Cloud_ListDataStoreEntries__Using_Universes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of data store entries to return. The service might\nreturn fewer than this value. If unspecified, at most 10 data store entries\nare returned. The maximum value is 256 and higher values are set to 256.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 256, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nThe `filter` field supports a very small subset of CEL:\n\n* Only the `id` field is supported.\n* Only the `startsWith` function is available; no other operators nor\n  built-ins are supported.\n\nExample filter: `id.startsWith(\"foo\")`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "If true, resources marked for pending deletion will be included in the\nresults.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataStoreEntriesResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:list"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:list"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_ListDataStoreEntries__Using_Universes"
        }
      },
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Create Data Store Entry",
        "description": "Creates an entry with the provided ID and value.\n\nReturns a 400 Bad Request if the entry exists.",
        "operationId": "Cloud_CreateDataStoreEntry__Using_Universes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID to use for the data store entry, which will become the final\ncomponent of the data store entry's resource path.\n\nThis value should be a 1-50 character string. We strongly recommend using\nonly lowercase letters, numeric digits, and hyphens.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "description": "a 1-50 character string. We strongly recommend using only lowercase letters, numeric digits, and hyphens.",
                "value": "my-entry"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataStoreEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:create"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:create"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_CreateDataStoreEntry__Using_Universes"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "Get Data Store Entry",
        "description": "Gets the specified entry.\n\nTo get the entry at a specific revision, add `@<revisionId>` to the end of\nthe path.\n\nFor example, to get `my-entry` at the revision ID\n`08DC3D3F43F9FCC1.0000000001.08DC3D3F43F9FCC1.01`, use the path\n`/cloud/v2/universes/1234/data-stores/5678/entries/my-entry@08DC3D3F43F9FCC1.0000000001.08DC3D3F43F9FCC1.01`.\n\nIf your entry ID contains one or more `@` characters, and you want to get\nthe latest version rather than at any specific revision, append the special\nrevision ID `@latest` to the end of the path. Otherwise, the segment of the\nentry ID after the last `@` will be interpreted as a revision ID.\n\nFor example, to get the latest revision of `my-entry`, use the path\n`/cloud/v2/universes/1234/data-stores/5678/entries/my@entry@latest`.\n\nTo get the entry that was current at a specific time, add\n`@latest:<timestamp>` to the end of the path, where `<timestamp>` is\nRFC-3339 formatted. The given timestamp must be after\nthe Unix epoch (1/1/1970) and not more than ten minutes in the future.\n\nFor example, to get the revision of `my-entry` that was current on\n12/2/2024 at 06:00 UTC, use the path\n`/cloud/v2/universes/1234/data-stores/5678/entries/my-entry@latest:2024-12-02T06:00:00Z`.",
        "operationId": "Cloud_GetDataStoreEntry__Using_Universes_DataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_GetDataStoreEntry__Using_Universes_DataStores"
        }
      },
      "delete": {
        "tags": ["Data and memory stores"],
        "summary": "Delete Data Store Entry",
        "description": "Marks the specified entry for deletion.\n\nEntries are not be deleted immediately; instead, the `state` field will\nbe set to `DELETED`. Permanent deletion occurs after 30 days.\n\nOn success, returns 200 OK. If the entry doesn't exist, returns\n404 Not Found.",
        "operationId": "Cloud_DeleteDataStoreEntry__Using_Universes_DataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:delete"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:delete"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_DeleteDataStoreEntry__Using_Universes_DataStores"
        }
      },
      "patch": {
        "tags": ["Data and memory stores"],
        "summary": "Update Data Store Entry",
        "description": "Updates the value, attributes, and users of an entry.\n\nUpdating specific revisions of the entry is **unsupported**. If you specify\na revision ID in the path and `allow_missing` is `true`, the update request\nwill instead create a new entry with the `@<revisionId>` suffix as part of\nthe key.\n\nPartial update is **unsupported**. If attributes or users are not\nprovided when updating the value, they will be cleared. Value must always\nbe provided when updating an entry.",
        "operationId": "Cloud_UpdateDataStoreEntry__Using_Universes_DataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowMissing",
            "in": "query",
            "description": "If set to true, and the data store entry is not found, a data store entry\nis created.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataStoreEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:update"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:update"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_UpdateDataStoreEntry__Using_Universes_DataStores"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}:increment": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Increment Data Store Entry",
        "description": "Increments the value of the specified entry. Both the existing value and\nthe increment amount must be integers.\n\nIf the entry doesn't exist, creates an entry with the specified value.\n\nIncrementing specific revisions of the entry is **unsupported**. If you\nspecify a revision ID in the path, the increment request will create a new\nentry with the `@<revisionId>` suffix as part of the key.\n\nKnown issue: the value may be incremented past the valid range of  values.\nWhen this happens, the returned value will be clamped to the valid range,\nbut the backend may persist the original value. This behavior is maintained\nfor backwards compatibility reasons, but may change in a future version of\nthis API.",
        "operationId": "Cloud_IncrementDataStoreEntry__Using_Universes_DataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncrementDataStoreEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:create"
          },
          {
            "description": "Required",
            "name": "universe-datastores.objects:update"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": [
              "universe-datastores.objects:create",
              "universe-datastores.objects:update"
            ]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_IncrementDataStoreEntry__Using_Universes_DataStores"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}:listRevisions": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List Data Store Entry Revisions",
        "description": "List revisions of the data store entry.\n\nThis method returns partial data store entries.\n\nIn particular, only the `path`, `id`, `createTime`, `revisionCreateTime`,\n`revisionId`, `etag`, and `state` fields are populated. Both the `path` and\n`id` fields will have an `@<version>` suffix.\n\nIn order to get the full entry at a revision, you can use the provided\n`path` field with the `GetDataStoreEntry` method, i.e. `GET\n/cloud/v2/universes/1234/data-stores/5678/entries/my-entry@<version>`.",
        "operationId": "Cloud_ListDataStoreEntryRevisions__Using_Universes_DataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of revisions to return per page.\n\nThe service might return fewer than the maximum number of revisions.\nIf unspecified, at most 10 revisions are returned.\nThe maximum value is 100 values and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call\nmust match the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Supports the following subset of CEL:\n\n* Only the `&&`, `<=`, and `>=` operators are supported.\n* Only the `revision_create_time` field is supported.\n\nFor example:\n\n  `\"revision_create_time >= 2000-01-01T00:00:00Z && revision_create_time <=\n  2001-01-01T00:00:00Z\"`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataStoreEntryRevisionsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.versions:list"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.versions:list"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_ListDataStoreEntryRevisions__Using_Universes_DataStores"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List Data Store Entries",
        "description": "Returns a list of entries from a data store.\n\nOnly the `path` and `id` fields are populated; use `GetDataStoreEntry`\nto retrieve other fields.\n\nSpecify the wildcard scope (`-`) to list entries from all scopes.",
        "operationId": "Cloud_ListDataStoreEntries__Using_Universes_DataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of data store entries to return. The service might\nreturn fewer than this value. If unspecified, at most 10 data store entries\nare returned. The maximum value is 256 and higher values are set to 256.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 256, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nThe `filter` field supports a very small subset of CEL:\n\n* Only the `id` field is supported.\n* Only the `startsWith` function is available; no other operators nor\n  built-ins are supported.\n\nExample filter: `id.startsWith(\"foo\")`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "If true, resources marked for pending deletion will be included in the\nresults.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataStoreEntriesResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:list"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:list"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_ListDataStoreEntries__Using_Universes_DataStores"
        }
      },
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Create Data Store Entry",
        "description": "Creates an entry with the provided ID and value.\n\nReturns a 400 Bad Request if the entry exists.",
        "operationId": "Cloud_CreateDataStoreEntry__Using_Universes_DataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID to use for the data store entry, which will become the final\ncomponent of the data store entry's resource path.\n\nThis value should be a 1-50 character string. We strongly recommend using\nonly lowercase letters, numeric digits, and hyphens.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "description": "a 1-50 character string. We strongly recommend using only lowercase letters, numeric digits, and hyphens.",
                "value": "my-entry"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataStoreEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:create"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:create"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_CreateDataStoreEntry__Using_Universes_DataStores"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "Get Data Store Entry",
        "description": "Gets the specified entry.\n\nTo get the entry at a specific revision, add `@<revisionId>` to the end of\nthe path.\n\nFor example, to get `my-entry` at the revision ID\n`08DC3D3F43F9FCC1.0000000001.08DC3D3F43F9FCC1.01`, use the path\n`/cloud/v2/universes/1234/data-stores/5678/entries/my-entry@08DC3D3F43F9FCC1.0000000001.08DC3D3F43F9FCC1.01`.\n\nIf your entry ID contains one or more `@` characters, and you want to get\nthe latest version rather than at any specific revision, append the special\nrevision ID `@latest` to the end of the path. Otherwise, the segment of the\nentry ID after the last `@` will be interpreted as a revision ID.\n\nFor example, to get the latest revision of `my-entry`, use the path\n`/cloud/v2/universes/1234/data-stores/5678/entries/my@entry@latest`.\n\nTo get the entry that was current at a specific time, add\n`@latest:<timestamp>` to the end of the path, where `<timestamp>` is\nRFC-3339 formatted. The given timestamp must be after\nthe Unix epoch (1/1/1970) and not more than ten minutes in the future.\n\nFor example, to get the revision of `my-entry` that was current on\n12/2/2024 at 06:00 UTC, use the path\n`/cloud/v2/universes/1234/data-stores/5678/entries/my-entry@latest:2024-12-02T06:00:00Z`.",
        "operationId": "Cloud_GetDataStoreEntry__Using_Universes_DataStores_Scopes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_GetDataStoreEntry__Using_Universes_DataStores_Scopes"
        }
      },
      "delete": {
        "tags": ["Data and memory stores"],
        "summary": "Delete Data Store Entry",
        "description": "Marks the specified entry for deletion.\n\nEntries are not be deleted immediately; instead, the `state` field will\nbe set to `DELETED`. Permanent deletion occurs after 30 days.\n\nOn success, returns 200 OK. If the entry doesn't exist, returns\n404 Not Found.",
        "operationId": "Cloud_DeleteDataStoreEntry__Using_Universes_DataStores_Scopes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:delete"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:delete"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_DeleteDataStoreEntry__Using_Universes_DataStores_Scopes"
        }
      },
      "patch": {
        "tags": ["Data and memory stores"],
        "summary": "Update Data Store Entry",
        "description": "Updates the value, attributes, and users of an entry.\n\nUpdating specific revisions of the entry is **unsupported**. If you specify\na revision ID in the path and `allow_missing` is `true`, the update request\nwill instead create a new entry with the `@<revisionId>` suffix as part of\nthe key.\n\nPartial update is **unsupported**. If attributes or users are not\nprovided when updating the value, they will be cleared. Value must always\nbe provided when updating an entry.",
        "operationId": "Cloud_UpdateDataStoreEntry__Using_Universes_DataStores_Scopes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowMissing",
            "in": "query",
            "description": "If set to true, and the data store entry is not found, a data store entry\nis created.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataStoreEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:update"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.objects:update"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_UpdateDataStoreEntry__Using_Universes_DataStores_Scopes"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}:increment": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Increment Data Store Entry",
        "description": "Increments the value of the specified entry. Both the existing value and\nthe increment amount must be integers.\n\nIf the entry doesn't exist, creates an entry with the specified value.\n\nIncrementing specific revisions of the entry is **unsupported**. If you\nspecify a revision ID in the path, the increment request will create a new\nentry with the `@<revisionId>` suffix as part of the key.\n\nKnown issue: the value may be incremented past the valid range of  values.\nWhen this happens, the returned value will be clamped to the valid range,\nbut the backend may persist the original value. This behavior is maintained\nfor backwards compatibility reasons, but may change in a future version of\nthis API.",
        "operationId": "Cloud_IncrementDataStoreEntry__Using_Universes_DataStores_Scopes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncrementDataStoreEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.objects:create"
          },
          {
            "description": "Required",
            "name": "universe-datastores.objects:update"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": [
              "universe-datastores.objects:create",
              "universe-datastores.objects:update"
            ]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_IncrementDataStoreEntry__Using_Universes_DataStores_Scopes"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}:listRevisions": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List Data Store Entry Revisions",
        "description": "List revisions of the data store entry.\n\nThis method returns partial data store entries.\n\nIn particular, only the `path`, `id`, `createTime`, `revisionCreateTime`,\n`revisionId`, `etag`, and `state` fields are populated. Both the `path` and\n`id` fields will have an `@<version>` suffix.\n\nIn order to get the full entry at a revision, you can use the provided\n`path` field with the `GetDataStoreEntry` method, i.e. `GET\n/cloud/v2/universes/1234/data-stores/5678/entries/my-entry@<version>`.",
        "operationId": "Cloud_ListDataStoreEntryRevisions__Using_Universes_DataStores_Scopes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_store_id",
            "in": "path",
            "description": "The data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of revisions to return per page.\n\nThe service might return fewer than the maximum number of revisions.\nIf unspecified, at most 10 revisions are returned.\nThe maximum value is 100 values and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call\nmust match the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Supports the following subset of CEL:\n\n* Only the `&&`, `<=`, and `>=` operators are supported.\n* Only the `revision_create_time` field is supported.\n\nFor example:\n\n  `\"revision_create_time >= 2000-01-01T00:00:00Z && revision_create_time <=\n  2001-01-01T00:00:00Z\"`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataStoreEntryRevisionsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.versions:list"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.versions:list"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStoreEntry",
            "name": "DataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStoreEntry/Cloud_ListDataStoreEntryRevisions__Using_Universes_DataStores_Scopes"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/data-stores:snapshot": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Snapshot Data Stores",
        "description": "Takes a new snapshot of the data stores in an experience.\n\nAfter a snapshot, the next write to every key in the experience will\ncreate a versioned backup of the previous data, regardless of the time of\nthe last write.\n\nIn effect, all data current at the time of the snapshot is guaranteed to be\navailable as a versioned backup for at least 30 days.\n\nSnapshots can be taken once per UTC day, per experience. If the latest\nsnapshot was taken within the same UTC day, this operation is a no-op and\nthe time of the latest snapshot will be returned.\n\nFor more information on using snapshots, see the [Data\nStores](https://create.roblox.com/docs/cloud-services/data-stores#snapshots)\nEngine guide.",
        "operationId": "Cloud_SnapshotDataStores",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotDataStoresRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDataStoresResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#standard-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 60
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-datastores.control:snapshot"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe-datastores.control:snapshot"]
          },
          "resource": {
            "$ref": "#/components/schemas/DataStore",
            "name": "DataStore"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/DataStore/Cloud_SnapshotDataStores"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/luau-execution-session-task-binary-inputs": {
      "post": {
        "tags": ["Luau Execution"],
        "summary": "Create Luau Execution Session Task Binary Input",
        "description": "Create a new `LuauExecutionSessionTaskBinaryInput`.",
        "operationId": "Cloud_CreateLuauExecutionSessionTaskBinaryInput",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LuauExecutionSessionTaskBinaryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LuauExecutionSessionTaskBinaryInput"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.luau-execution-session:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Luau execution",
          "methodProperties": {
            "scopes": ["universe.place.luau-execution-session:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/LuauExecutionSessionTaskBinaryInput",
            "name": "LuauExecutionSessionTaskBinaryInput"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/luau-execution#/LuauExecutionSessionTaskBinaryInput/Cloud_CreateLuauExecutionSessionTaskBinaryInput"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/memory-store/queues/{queue_id}/items": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Create Memory Store Queue Item",
        "description": "Creates a new queue item.\n\nIf `ttl` is set, the item will automatically be removed from the queue\nafter the time interval specified.\n\nIf a numerical `priority` is set, the item will be inserted into the queue\nbased on the priority value. The higher the value, the closer to the front\nof the queue the item will be. If priority values are the same then the\nitem will be inserted after existing values with the same priority.",
        "operationId": "Cloud_CreateMemoryStoreQueueItem",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queue_id",
            "in": "path",
            "description": "The queue ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoryStoreQueueItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreQueueItem"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.queue:add"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.queue:add"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreQueueItem",
            "name": "MemoryStoreQueueItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreQueueItem/Cloud_CreateMemoryStoreQueueItem"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/memory-store/queues/{queue_id}/items:discard": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Discard Memory Store Queue Items",
        "description": "Discards read items from the front of the queue.\n\nTakes a `readId` from a previous `Read` operation.",
        "operationId": "Cloud_DiscardMemoryStoreQueueItems",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queue_id",
            "in": "path",
            "description": "The queue ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscardMemoryStoreQueueItemsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.queue:discard"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.queue:discard"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreQueueItem",
            "name": "MemoryStoreQueueItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreQueueItem/Cloud_DiscardMemoryStoreQueueItems"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/memory-store/queues/{queue_id}/items:read": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "Read Memory Store Queue Items",
        "description": "Returns the specified number of items at the front of the queue.\n\n",
        "operationId": "Cloud_ReadMemoryStoreQueueItems",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queue_id",
            "in": "path",
            "description": "The queue ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The number of items to read from the queue\nIf unspecified, 1 item will be returned.\nThe maximum value is 200; values above 200 will be coerced to 200.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "allOrNothing",
            "in": "query",
            "description": "If `all_or_nothing` is true and the requested number of objects is not\navailable, will return a 404 Error.\n\nOtherwise, will return the path and read_id of the read operation and a\nlist of the MemoryStoreQueue items.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "invisibilityWindow",
            "in": "query",
            "description": "Invisibility window for items read, in seconds.\n\nItems read are invisible in subsequent reads during the invisibility\nwindow duration.\n\nIt must be written in seconds greater than 0 and end with `s`.\n\nDefaults to `30s`.",
            "schema": {
              "example": "3s",
              "type": "string",
              "format": "duration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadMemoryStoreQueueItemsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.queue:dequeue"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.queue:dequeue"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreQueueItem",
            "name": "MemoryStoreQueueItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreQueueItem/Cloud_ReadMemoryStoreQueueItems"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/memory-store/sorted-maps/{sorted_map_id}/items": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List Memory Store Sorted Map Items",
        "description": "Gets and returns items in the map with a given order and filter.",
        "operationId": "Cloud_ListMemoryStoreSortedMapItems",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sorted_map_id",
            "in": "path",
            "description": "The sorted-map ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of memory store sorted map items to return. The service\nmight return fewer than this value. If unspecified, at most 1 memory store\nsorted map items are returned. The maximum value is 100 and higher values\nare set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 1
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "If specified, results are ordered according to the specified fields.\n\nValues must be a comma-separated list of fields, with an optional,\nper-field \" desc\" suffix to sort by descending rather than ascending\nvalues. You can access subfields with a `.` operator.\n\nResults may be ordered by the following fields: id.\n\nExample: \"id desc\"\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nFiltering conforms to Common Expression Language (CEL). Only the `id`\nand `sortKey` fields are supported. In terms of operators, only `<`, `>`\nand `&&` are allowed'\n\nExample: `id > \"key-001\" && id < \"key-100\"`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMemoryStoreSortedMapItemsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.sorted-map:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.sorted-map:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreSortedMapItem",
            "name": "MemoryStoreSortedMapItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreSortedMapItem/Cloud_ListMemoryStoreSortedMapItems"
        }
      },
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Create Memory Store Sorted Map Item",
        "description": "Creates the specified map item if it doesn't exist.",
        "operationId": "Cloud_CreateMemoryStoreSortedMapItem",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sorted_map_id",
            "in": "path",
            "description": "The sorted-map ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID to use for the memory store sorted map item, which will become the\nfinal component of the memory store sorted map item's resource path.\n\nThis value should be a 1-127 character string that supports alphanumeric\nand special characters. This id is case sensitive. The id must be url\nencoded if it contains any url breaking special characters.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "description": "a 1-127 character string that supports alphanumeric and special characters. This id is case sensitive. The id must be url encoded if it contains any url breaking special characters.",
                "value": "Hello!"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoryStoreSortedMapItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreSortedMapItem"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.sorted-map:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.sorted-map:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreSortedMapItem",
            "name": "MemoryStoreSortedMapItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreSortedMapItem/Cloud_CreateMemoryStoreSortedMapItem"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/memory-store/sorted-maps/{sorted_map_id}/items/{item_id}": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "Get Memory Store Sorted Map Item",
        "description": "Gets and returns the value of the given key in the map.",
        "operationId": "Cloud_GetMemoryStoreSortedMapItem",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sorted_map_id",
            "in": "path",
            "description": "The sorted-map ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The item ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreSortedMapItem"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.sorted-map:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.sorted-map:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreSortedMapItem",
            "name": "MemoryStoreSortedMapItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreSortedMapItem/Cloud_GetMemoryStoreSortedMapItem"
        }
      },
      "delete": {
        "tags": ["Data and memory stores"],
        "summary": "Delete Memory Store Sorted Map Item",
        "description": "Deletes the specified item from the map.",
        "operationId": "Cloud_DeleteMemoryStoreSortedMapItem",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sorted_map_id",
            "in": "path",
            "description": "The sorted-map ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The item ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.sorted-map:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.sorted-map:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreSortedMapItem",
            "name": "MemoryStoreSortedMapItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreSortedMapItem/Cloud_DeleteMemoryStoreSortedMapItem"
        }
      },
      "patch": {
        "tags": ["Data and memory stores"],
        "summary": "Update Memory Store Sorted Map Item",
        "description": "Updates the specified map item.",
        "operationId": "Cloud_UpdateMemoryStoreSortedMapItem",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sorted_map_id",
            "in": "path",
            "description": "The sorted-map ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The item ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowMissing",
            "in": "query",
            "description": "If set to true, and the memory store sorted map item is not found, a memory\nstore sorted map item is created.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemoryStoreSortedMapItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreSortedMapItem"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store.sorted-map:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store.sorted-map:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStoreSortedMapItem",
            "name": "MemoryStoreSortedMapItem"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStoreSortedMapItem/Cloud_UpdateMemoryStoreSortedMapItem"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/memory-store:flush": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Flush Memory Store",
        "description": "Asynchronously flush all data structures in the universe.",
        "operationId": "Cloud_FlushMemoryStore",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlushMemoryStoreRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "x-long-running-operation-parameters": {
          "metadata": {
            "$ref": "#/components/schemas/FlushMemoryStoreMetadata"
          },
          "response": {
            "$ref": "#/components/schemas/FlushMemoryStoreResponse"
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "memory-store:flush"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["memory-store:flush"]
          },
          "resource": {
            "$ref": "#/components/schemas/MemoryStore",
            "name": "MemoryStore"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/MemoryStore/Cloud_FlushMemoryStore"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List Ordered Data Store Entries",
        "description": "Returns a list of entries from an ordered data store.",
        "operationId": "Cloud_ListOrderedDataStoreEntries",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordered_data_store_id",
            "in": "path",
            "description": "The ordered-data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of ordered data store entries to return. The service\nmight return fewer than this value. If unspecified, at most 10 ordered data\nstore entries are returned. The maximum value is 100 and higher values are\nset to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "If specified, results are ordered according to the specified fields.\n\nValues must be a comma-separated list of fields, with an optional,\nper-field \" desc\" suffix to sort by descending rather than ascending\nvalues. You can access subfields with a `.` operator.\n\nResults may be ordered by the following fields: value.\n\nExample: \"value desc\"\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nWe support two comparison operators for this operation: `<=` and `>=`.These\ncomparison operators act as a minValue and maxValue for the values\nreturned. If filtering is needed for a value between a minValue and\nmaxValue the user can use the logical operator `&&`. All tokens in the\nfilter expression must be separated by a single space.\n\nExample filters: `entry <= 10`; `entry >= 10 && entry <= 30`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrderedDataStoreEntriesResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Ordered Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#ordered-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.ordered-data-store.scope.entry:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe.ordered-data-store.scope.entry:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/OrderedDataStoreEntry",
            "name": "OrderedDataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/OrderedDataStoreEntry/Cloud_ListOrderedDataStoreEntries"
        }
      },
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Create Ordered Data Store Entry",
        "description": "Creates an entry with the provided ID and value.\n\nReturns a 400 Bad Request if the entry exists.",
        "operationId": "Cloud_CreateOrderedDataStoreEntry",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordered_data_store_id",
            "in": "path",
            "description": "The ordered-data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID to use for the ordered data store entry, which will become the final\ncomponent of the ordered data store entry's resource path.\n\nThis value should be A 1-63 character string. We strongly recommend using\nonly lowercase letters, numeric digits, and hyphens.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "description": "A 1-63 character string. We strongly recommend using only lowercase letters, numeric digits, and hyphens.",
                "value": "my-entry"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderedDataStoreEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderedDataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Ordered Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#ordered-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe.ordered-data-store.scope.entry:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/OrderedDataStoreEntry",
            "name": "OrderedDataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/OrderedDataStoreEntry/Cloud_CreateOrderedDataStoreEntry"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries/{entry_id}": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "Get Ordered Data Store Entry",
        "description": "Gets the specified entry.",
        "operationId": "Cloud_GetOrderedDataStoreEntry",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordered_data_store_id",
            "in": "path",
            "description": "The ordered-data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderedDataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Ordered Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#ordered-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.ordered-data-store.scope.entry:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe.ordered-data-store.scope.entry:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/OrderedDataStoreEntry",
            "name": "OrderedDataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/OrderedDataStoreEntry/Cloud_GetOrderedDataStoreEntry"
        }
      },
      "delete": {
        "tags": ["Data and memory stores"],
        "summary": "Delete Ordered Data Store Entry",
        "description": "Deletes the specified entry.\n\nOn success, returns 200 OK. If the entry doesn't exist, returns\n404 Not Found.",
        "operationId": "Cloud_DeleteOrderedDataStoreEntry",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordered_data_store_id",
            "in": "path",
            "description": "The ordered-data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Ordered Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#ordered-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe.ordered-data-store.scope.entry:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/OrderedDataStoreEntry",
            "name": "OrderedDataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/OrderedDataStoreEntry/Cloud_DeleteOrderedDataStoreEntry"
        }
      },
      "patch": {
        "tags": ["Data and memory stores"],
        "summary": "Update Ordered Data Store Entry",
        "description": "Updates the value of an entry.",
        "operationId": "Cloud_UpdateOrderedDataStoreEntry",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordered_data_store_id",
            "in": "path",
            "description": "The ordered-data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowMissing",
            "in": "query",
            "description": "If set to true, and the ordered data store entry is not found, a ordered\ndata store entry is created.",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderedDataStoreEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderedDataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Ordered Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#ordered-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe.ordered-data-store.scope.entry:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/OrderedDataStoreEntry",
            "name": "OrderedDataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/OrderedDataStoreEntry/Cloud_UpdateOrderedDataStoreEntry"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries/{entry_id}:increment": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Increment Ordered Data Store Entry",
        "description": "Increments the value of the specified entry. Both the existing value and\nthe increment amount must be integers.\n\nIf the entry doesn't exist, creates an entry with the specified value.\n\nKnown issue: the value may be incremented past the valid range of  values.\nWhen this happens, the returned value will be clamped to the valid range,\nbut the backend may persist the original value. This behavior is maintained\nfor backwards compatibility reasons, but may change in a future version of\nthis API.",
        "operationId": "Cloud_IncrementOrderedDataStoreEntry",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordered_data_store_id",
            "in": "path",
            "description": "The ordered-data-store ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope_id",
            "in": "path",
            "description": "The scope ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncrementOrderedDataStoreEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderedDataStoreEntry"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "Ordered Data Stores requests are subject to additional throttling limits described in the [Open Cloud guide for Data Stores](https://create.roblox.com/docs/cloud/guides/data-stores#ordered-data-stores-throttling-limits).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Data and memory stores",
          "methodProperties": {
            "scopes": ["universe.ordered-data-store.scope.entry:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/OrderedDataStoreEntry",
            "name": "OrderedDataStoreEntry"
          }
        },
        "x-roblox-stability": "STABLE",
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/OrderedDataStoreEntry/Cloud_IncrementOrderedDataStoreEntry"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}": {
      "get": {
        "tags": ["Places", "Universes"],
        "summary": "Get Place",
        "description": "Gets the specified place.",
        "operationId": "Cloud_GetPlace",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Place"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/Place",
            "name": "Place"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/Place/Cloud_GetPlace"
        }
      },
      "patch": {
        "tags": ["Places", "Universes"],
        "summary": "Update Place",
        "description": "Updates the specified place.",
        "operationId": "Cloud_UpdatePlace",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The list of fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Place"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Place"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe.place:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/Place",
            "name": "Place"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/Place/Cloud_UpdatePlace"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/instances/{instance_id}": {
      "get": {
        "tags": ["Places", "Universes"],
        "summary": "Get Instance",
        "description": "Gets an instance and its property data.\n\nThe maximum supported response data size is 500,000 bytes. If this limit is\nexceeded, the returned `Operation` will be completed with an error result\nthat has an error code of `422`.\n",
        "operationId": "Cloud_GetInstance",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The instance ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "x-long-running-operation-parameters": {
          "metadata": {
            "$ref": "#/components/schemas/GetInstanceMetadata"
          },
          "response": {
            "$ref": "#/components/schemas/Instance"
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.instance:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe.place.instance:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/Instance",
            "name": "Instance"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 45
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/Instance/Cloud_GetInstance"
        }
      },
      "patch": {
        "tags": ["Places", "Universes"],
        "summary": "Update Instance",
        "description": "Updates an instance's property data.\n\nWhen updating a `Script` instance's source property, the maximum supported\nproperty size is 200,000 bytes after UTF-8 encoding.",
        "operationId": "Cloud_UpdateInstance",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The instance ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The list of fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Instance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "x-long-running-operation-parameters": {
          "metadata": {
            "$ref": "#/components/schemas/UpdateInstanceMetadata"
          },
          "response": {
            "$ref": "#/components/schemas/Instance"
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.instance:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe.place.instance:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/Instance",
            "name": "Instance"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 45
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/Instance/Cloud_UpdateInstance"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/instances/{instance_id}:listChildren": {
      "get": {
        "tags": ["Places", "Universes"],
        "summary": "List Instance Children",
        "description": "Lists an instance's children.\n\nThe maximum supported response data size is 500,000 bytes. If this limit is\nexceeded, the returned `Operation` will be completed with an error result\nthat has an error code of `422`.\n\n",
        "operationId": "Cloud_ListInstanceChildren",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The instance ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of child instance to return. The service may return\nfewer than this value. If unspecified, at most 200 children will be\nreturned. The maximum value is 200; values above 200 will be coerced to\n200.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 200, inclusive",
                "value": 100
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous `ListInstanceChildrenRequest` call.\nProvide this to retrieve the subsequent page.\n\nWhen paginating, all other parameters provided to\n`ListInstanceChildrenRequest` must match the call that provided the page\ntoken.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "x-long-running-operation-parameters": {
          "metadata": {
            "$ref": "#/components/schemas/ListInstanceChildrenMetadata"
          },
          "response": {
            "$ref": "#/components/schemas/ListInstanceChildrenResponse"
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.instance:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe.place.instance:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/Instance",
            "name": "Instance"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 45
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/Instance/Cloud_ListInstanceChildren"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/luau-execution-session-tasks": {
      "post": {
        "tags": ["Luau Execution", "Places"],
        "summary": "Create Luau Execution Session Task",
        "description": "Creates a task but does not wait for the task to complete.\n\nTo check whether a task has\ncompleted, call the `GetLuauExecutionSessionTask` method and inspect the\n`state` field of the returned resource.\n\nQuotas:\n* 5 calls per minute per API key owner\n* 45 calls per minute per IP address",
        "operationId": "Cloud_CreateLuauExecutionSessionTask__Using_Universes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LuauExecutionSessionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LuauExecutionSessionTask"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.luau-execution-session:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Luau execution",
          "methodProperties": {
            "scopes": ["universe.place.luau-execution-session:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/LuauExecutionSessionTask",
            "name": "LuauExecutionSessionTask"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 40
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/luau-execution#/LuauExecutionSessionTask/Cloud_CreateLuauExecutionSessionTask__Using_Universes"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/user-restrictions": {
      "get": {
        "tags": ["Bans and blocks", "Places", "Universes", "Users"],
        "summary": "List User Restrictions",
        "description": "List user restrictions for users that have ever been banned in either a\nuniverse or a specific place.",
        "operationId": "Cloud_ListUserRestrictions__Using_Universes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of user restrictions to return. The service might return\nfewer than this value. If unspecified, at most 10 user restrictions are\nreturned. The maximum value is 100 and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserRestrictionsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "User Restrictions are subject to the additional rate limits, applied per universe\n\n* Get User Restriction: 50 req/s\n* List User Restrictions: 50 req/s\n* Update User Restrictions: 10 req/s\n* List User Restriction Logs: 50 req/s\n\nAdditionally, we impose the following rate limit for the same user within a universe:\n\n* Update User Restriction: 2 req/min\n\nFor example, Update User Restriction may not be called for user 123 more than twice every minute.",
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 30
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.user-restriction:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["universe.user-restriction:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserRestriction",
            "name": "UserRestriction"
          }
        },
        "x-roblox-stability": "BETA",
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/bans-and-blocks#/UserRestriction/Cloud_ListUserRestrictions__Using_Universes"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/user-restrictions/{user_restriction_id}": {
      "get": {
        "tags": ["Bans and blocks", "Places", "Universes", "Users"],
        "summary": "Get User Restriction",
        "description": "Get the user restriction.",
        "operationId": "Cloud_GetUserRestriction__Using_Universes_Places",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_restriction_id",
            "in": "path",
            "description": "The user-restriction ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestriction"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "User Restrictions are subject to the additional rate limits, applied per universe\n\n* Get User Restriction: 50 req/s\n* List User Restrictions: 50 req/s\n* Update User Restrictions: 10 req/s\n* List User Restriction Logs: 50 req/s\n\nAdditionally, we impose the following rate limit for the same user within a universe:\n\n* Update User Restriction: 2 req/min\n\nFor example, Update User Restriction may not be called for user 123 more than twice every minute.",
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 30
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.user-restriction:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["universe.user-restriction:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserRestriction",
            "name": "UserRestriction"
          }
        },
        "x-roblox-stability": "BETA",
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/bans-and-blocks#/UserRestriction/Cloud_GetUserRestriction__Using_Universes_Places"
        }
      },
      "patch": {
        "tags": ["Bans and blocks", "Places", "Universes", "Users"],
        "summary": "Update User Restriction",
        "description": "Update the user restriction.",
        "operationId": "Cloud_UpdateUserRestriction__Using_Universes_Places",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_restriction_id",
            "in": "path",
            "description": "The user-restriction ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The list of fields to update.\n\nThe `game_join_restriction` field must be updated atomically; field masks\nthat index into `game_join_restriction` (such as\n`\"game_join_restriction.active\"`) are not supported.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          },
          {
            "name": "idempotencyKey.key",
            "in": "query",
            "description": "The unique key to use for idempotency.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotencyKey.firstSent",
            "in": "query",
            "description": "The timestamp at which the first request was sent.\n\nIf this is further in the past than the lifetime of the idempotency key\n(which *may* exceed the annotated minimum lifetime), the server *must*\nreturn an error.",
            "schema": {
              "example": "2023-07-05T12:34:56Z",
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRestriction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestriction"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "User Restrictions are subject to the additional rate limits, applied per universe\n\n* Get User Restriction: 50 req/s\n* List User Restrictions: 50 req/s\n* Update User Restrictions: 10 req/s\n* List User Restriction Logs: 50 req/s\n\nAdditionally, we impose the following rate limit for the same user within a universe:\n\n* Update User Restriction: 2 req/min\n\nFor example, Update User Restriction may not be called for user 123 more than twice every minute.",
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 30
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.user-restriction:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["universe.user-restriction:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserRestriction",
            "name": "UserRestriction"
          }
        },
        "x-roblox-stability": "BETA",
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/bans-and-blocks#/UserRestriction/Cloud_UpdateUserRestriction__Using_Universes_Places"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/versions/{version_id}/luau-execution-session-tasks": {
      "post": {
        "tags": ["Luau Execution", "Places"],
        "summary": "Create Luau Execution Session Task",
        "description": "Creates a task but does not wait for the task to complete.\n\nTo check whether a task has\ncompleted, call the `GetLuauExecutionSessionTask` method and inspect the\n`state` field of the returned resource.\n\nQuotas:\n* 5 calls per minute per API key owner\n* 45 calls per minute per IP address",
        "operationId": "Cloud_CreateLuauExecutionSessionTask__Using_Universes_Places",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "description": "The version ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LuauExecutionSessionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LuauExecutionSessionTask"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.luau-execution-session:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Luau execution",
          "methodProperties": {
            "scopes": ["universe.place.luau-execution-session:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/LuauExecutionSessionTask",
            "name": "LuauExecutionSessionTask"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/luau-execution#/LuauExecutionSessionTask/Cloud_CreateLuauExecutionSessionTask__Using_Universes_Places"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/versions/{version_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{task_id}": {
      "get": {
        "tags": ["Luau Execution", "Places"],
        "summary": "Get Luau Execution Session Task",
        "description": "Gets information about a task.\n\nQuotas:\n* 45 calls per minute per API key owner or IP address",
        "operationId": "Cloud_GetLuauExecutionSessionTask",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "description": "The version ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "luau_execution_session_id",
            "in": "path",
            "description": "The luau-execution-session ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "The task ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "The view in which to retrieve the luau execution session task.\n\nSupports BASIC and FULL.\n\nDefaults to BASIC.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | VIEW_UNSPECIFIED | The luau execution session task view is not specified; the default will be used. |\n  | BASIC | Excludes the `script` field. |\n  | FULL | Includes all fields. |",
            "schema": {
              "example": "VIEW_UNSPECIFIED",
              "enum": ["VIEW_UNSPECIFIED", "BASIC", "FULL"],
              "type": "string",
              "format": "enum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LuauExecutionSessionTask"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.luau-execution-session:read"
          },
          {
            "description": "Required",
            "name": "universe.place.luau-execution-session:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Luau execution",
          "methodProperties": {
            "scopes": [
              "universe.place.luau-execution-session:read",
              "universe.place.luau-execution-session:write"
            ]
          },
          "resource": {
            "$ref": "#/components/schemas/LuauExecutionSessionTask",
            "name": "LuauExecutionSessionTask"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 200
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/luau-execution#/LuauExecutionSessionTask/Cloud_GetLuauExecutionSessionTask"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/places/{place_id}/versions/{version_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{task_id}/logs": {
      "get": {
        "tags": ["Luau Execution", "Places"],
        "summary": "List Luau Execution Session Task Logs",
        "description": "Lists log chunks generated by a `LuauExecutionSessionTask`.\n\nQuotas:\n* 45 calls per minute per API key owner or IP address",
        "operationId": "Cloud_ListLuauExecutionSessionTaskLogs",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "place_id",
            "in": "path",
            "description": "The place ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "description": "The version ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "luau_execution_session_id",
            "in": "path",
            "description": "The luau-execution-session ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "The task ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of luau execution session task logs to return. The\nservice might return fewer than this value. If unspecified, at most 10000\nluau execution session task logs are returned. The maximum value is 10000\nand higher values are set to 10000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 10000, inclusive",
                "value": 10000
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "The view in which to retrieve the luau execution session task log.\n\nSupports FLAT and STRUCTURED.\n\nDefaults to FLAT.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | VIEW_UNSPECIFIED | The luau execution session task log view is not specified; the default will be used. |\n  | FLAT | If this view is selected, the `messages` field will be populated (and the `structuredMessages` field will not). Each entry of the `messages` array contains only the log message, without additional medata.  This is the default. |\n  | STRUCTURED | If this view is selected, the `structuredMessages` field will be populated (and the `messages` field will not). Each entry of the `structuredMessages` array contains the log message plus additional metadata (see `LogMessage` for details). |",
            "schema": {
              "example": "VIEW_UNSPECIFIED",
              "enum": ["VIEW_UNSPECIFIED", "FLAT", "STRUCTURED"],
              "type": "string",
              "format": "enum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLuauExecutionSessionTaskLogsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.place.luau-execution-session:read"
          },
          {
            "description": "Required",
            "name": "universe.place.luau-execution-session:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Luau execution",
          "methodProperties": {
            "scopes": [
              "universe.place.luau-execution-session:read",
              "universe.place.luau-execution-session:write"
            ]
          },
          "resource": {
            "$ref": "#/components/schemas/LuauExecutionSessionTaskLog",
            "name": "LuauExecutionSessionTaskLog"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 45
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/luau-execution#/LuauExecutionSessionTaskLog/Cloud_ListLuauExecutionSessionTaskLogs"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/subscription-products/{subscription_product_id}/subscriptions/{subscription_id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Subscription",
        "description": "Get the subscription.\n\nThe `universe.subscription-product.subscription:read` scope only allows\nreading subscriptions of the user making the request. Because of this, the\nsubscription ID must match the user ID of the user making the request. Note\nthat this scope might be more relevant for OAuth 2.0 apps.\n\nTo read all subscriptions made by users for a particular universe, use the\n`universe:write` scope instead.",
        "operationId": "Cloud_GetSubscription",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_product_id",
            "in": "path",
            "description": "The subscription-product ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "The subscription ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "The view in which to retrieve the subscription.\n\nSupports BASIC and FULL.\n\nDefaults to BASIC.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | VIEW_UNSPECIFIED | The subscription view is not specified; the default will be used. |\n  | BASIC | Includes only the `active` and `renewing` fields. |\n  | FULL | Includes all fields. |",
            "schema": {
              "example": "VIEW_UNSPECIFIED",
              "enum": ["VIEW_UNSPECIFIED", "BASIC", "FULL"],
              "type": "string",
              "format": "enum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe:write"
          },
          {
            "description": "Required",
            "name": "universe.subscription-product.subscription:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Monetization",
          "methodProperties": {
            "scopes": [
              "universe:write",
              "universe.subscription-product.subscription:read"
            ]
          },
          "resource": {
            "$ref": "#/components/schemas/Subscription",
            "name": "Subscription"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 3
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/Subscription/Cloud_GetSubscription"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/user-restrictions": {
      "get": {
        "tags": ["Bans and blocks", "Universes", "Users"],
        "summary": "List User Restrictions",
        "description": "List user restrictions for users that have ever been banned in either a\nuniverse or a specific place.",
        "operationId": "Cloud_ListUserRestrictions",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of user restrictions to return. The service might return\nfewer than this value. If unspecified, at most 10 user restrictions are\nreturned. The maximum value is 100 and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserRestrictionsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "User Restrictions are subject to the additional rate limits, applied per universe\n\n* Get User Restriction: 50 req/s\n* List User Restrictions: 50 req/s\n* Update User Restrictions: 10 req/s\n* List User Restriction Logs: 50 req/s\n\nAdditionally, we impose the following rate limit for the same user within a universe:\n\n* Update User Restriction: 2 req/min\n\nFor example, Update User Restriction may not be called for user 123 more than twice every minute.",
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 30
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.user-restriction:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["universe.user-restriction:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserRestriction",
            "name": "UserRestriction"
          }
        },
        "x-roblox-stability": "BETA",
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/bans-and-blocks#/UserRestriction/Cloud_ListUserRestrictions"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/user-restrictions/{user_restriction_id}": {
      "get": {
        "tags": ["Bans and blocks", "Universes", "Users"],
        "summary": "Get User Restriction",
        "description": "Get the user restriction.",
        "operationId": "Cloud_GetUserRestriction__Using_Universes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_restriction_id",
            "in": "path",
            "description": "The user-restriction ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestriction"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "User Restrictions are subject to the additional rate limits, applied per universe\n\n* Get User Restriction: 50 req/s\n* List User Restrictions: 50 req/s\n* Update User Restrictions: 10 req/s\n* List User Restriction Logs: 50 req/s\n\nAdditionally, we impose the following rate limit for the same user within a universe:\n\n* Update User Restriction: 2 req/min\n\nFor example, Update User Restriction may not be called for user 123 more than twice every minute.",
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 30
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.user-restriction:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["universe.user-restriction:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserRestriction",
            "name": "UserRestriction"
          }
        },
        "x-roblox-stability": "BETA",
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/bans-and-blocks#/UserRestriction/Cloud_GetUserRestriction__Using_Universes"
        }
      },
      "patch": {
        "tags": ["Bans and blocks", "Universes", "Users"],
        "summary": "Update User Restriction",
        "description": "Update the user restriction.",
        "operationId": "Cloud_UpdateUserRestriction__Using_Universes",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_restriction_id",
            "in": "path",
            "description": "The user-restriction ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The list of fields to update.\n\nThe `game_join_restriction` field must be updated atomically; field masks\nthat index into `game_join_restriction` (such as\n`\"game_join_restriction.active\"`) are not supported.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          },
          {
            "name": "idempotencyKey.key",
            "in": "query",
            "description": "The unique key to use for idempotency.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotencyKey.firstSent",
            "in": "query",
            "description": "The timestamp at which the first request was sent.\n\nIf this is further in the past than the lifetime of the idempotency key\n(which *may* exceed the annotated minimum lifetime), the server *must*\nreturn an error.",
            "schema": {
              "example": "2023-07-05T12:34:56Z",
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRestriction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestriction"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "User Restrictions are subject to the additional rate limits, applied per universe\n\n* Get User Restriction: 50 req/s\n* List User Restrictions: 50 req/s\n* Update User Restrictions: 10 req/s\n* List User Restriction Logs: 50 req/s\n\nAdditionally, we impose the following rate limit for the same user within a universe:\n\n* Update User Restriction: 2 req/min\n\nFor example, Update User Restriction may not be called for user 123 more than twice every minute.",
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 30
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.user-restriction:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["universe.user-restriction:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserRestriction",
            "name": "UserRestriction"
          }
        },
        "x-roblox-stability": "BETA",
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/bans-and-blocks#/UserRestriction/Cloud_UpdateUserRestriction__Using_Universes"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}/user-restrictions:listLogs": {
      "get": {
        "tags": ["Bans and blocks", "Universes", "Users"],
        "summary": "List User Restriction Logs",
        "description": "List changes to UserRestriction resources within a given universe.\nThis includes both universe-level and place-level restrictions.\n\nFor universe-level restriction logs, the `place` field will be empty.",
        "operationId": "Cloud_ListUserRestrictionLogs",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of UserRestrictionLogs to return. The service may return\nfewer than this value. If unspecified, at most 10 UserRestrictionLogs are\nreturned. The maximum value is 100 and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set to filter the logs returned.\n\nThe `filter` field supports a very small number of CEL:\n\n* `user`\n* `place`\n* The `==` comparison operator is available.\n* The `&&` logical operator is also supported.\n\nAs an example, filtering for a user and a place takes the form\n`filter=\"user == 'users/123'\" && \"place == 'places/456'\"`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserRestrictionLogsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-rate-limits": {
          "description": "User Restrictions are subject to the additional rate limits, applied per universe\n\n* Get User Restriction: 50 req/s\n* List User Restrictions: 50 req/s\n* Update User Restrictions: 10 req/s\n* List User Restriction Logs: 50 req/s\n\nAdditionally, we impose the following rate limit for the same user within a universe:\n\n* Update User Restriction: 2 req/min\n\nFor example, Update User Restriction may not be called for user 123 more than twice every minute.",
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 150
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 30
          }
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe.user-restriction:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["universe.user-restriction:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserRestriction",
            "name": "UserRestriction"
          }
        },
        "x-roblox-stability": "BETA",
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/bans-and-blocks#/UserRestriction/Cloud_ListUserRestrictionLogs"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}:generateSpeech": {
      "post": {
        "tags": ["Generative AI"],
        "summary": "Generate Speech",
        "description": "Generates English speech audio from the specified text.",
        "operationId": "Cloud_GenerateSpeech",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateSpeechRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateSpeechResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/Universe",
            "name": "Universe"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 4
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 4
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/generative-ai#/Universe/Cloud_GenerateSpeech"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}:generateSpeechAsset": {
      "post": {
        "tags": ["Assets", "Generative AI"],
        "summary": "Generate Speech Asset",
        "description": "Generates an English speech audio asset from the specified text.\n\nThis endpoint requires the `asset:read` and `asset:write` scopes in\naddition to the `universe:write` scope.\n\nThe response returns an `Operation` object that must be prefixed with\n`/assets/v1`. For example, the URL to discover the result of the operation\ncould be\n`https://apis.roblox.com/assets/v1/operations/8b42ef30-9c17-4526-b8cf-2ff0136ca94d`.",
        "operationId": "Cloud_GenerateSpeechAsset",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateSpeechAssetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "x-long-running-operation-parameters": {
          "metadata": {
            "$ref": "#/components/schemas/GenerateSpeechAssetMetadata"
          },
          "response": {
            "$ref": "#/components/schemas/GenerateSpeechAssetResponse"
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/Universe",
            "name": "Universe"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 4
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 4
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/Universe/Cloud_GenerateSpeechAsset"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}:publishMessage": {
      "post": {
        "tags": ["Universes"],
        "summary": "Publish Universe Message",
        "description": "Publishes a message to the universe's live servers.\n\nServers can consume messages via\n[MessagingService](https://create.roblox.com/docs/reference/engine/classes/MessagingService).",
        "operationId": "Cloud_PublishUniverseMessage",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishUniverseMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe-messaging-service:publish"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe-messaging-service:publish"]
          },
          "resource": {
            "$ref": "#/components/schemas/Universe",
            "name": "Universe"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/Universe/Cloud_PublishUniverseMessage"
        }
      }
    },
    "/cloud/v2/universes/{universe_id}:restartServers": {
      "post": {
        "tags": ["Universes"],
        "summary": "Restart Universe Servers",
        "description": "Restarts all active servers for a specific universe if and only if a new\nversion of the experience has been published. Used for releasing experience\nupdates.",
        "operationId": "Cloud_RestartUniverseServers",
        "parameters": [
          {
            "name": "universe_id",
            "in": "path",
            "description": "The universe ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestartUniverseServersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartUniverseServersResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "universe:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Universes and places",
          "methodProperties": {
            "scopes": ["universe:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/Universe",
            "name": "Universe"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 30
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 30
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/Universe/Cloud_RestartUniverseServers"
        }
      }
    },
    "/cloud/v2/users/{user_id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User",
        "description": "Gets a user's basic and advanced information.\n\nTo access a user's public information, no additional scopes are required.\n\nTo access a user's verification status, you need the following scopes:\n* user.advanced:read\n\nTo access a user's social account information, you need the following\nscopes:\n* user.social:read",
        "operationId": "Cloud_GetUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Grants access to read a user&#x27;s verification status.",
            "name": "user.advanced:read"
          },
          {
            "description": "Grants access to read a user&#x27;s social account information.",
            "name": "user.social:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/User",
            "name": "User"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 10
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/User/Cloud_GetUser"
        }
      }
    },
    "/cloud/v2/users/{user_id}/asset-quotas": {
      "get": {
        "tags": ["Assets", "Users"],
        "summary": "List Asset Quotas",
        "description": "Returns a list of asset quotas.",
        "operationId": "Cloud_ListAssetQuotas",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of asset quotas to return. The service might return\nfewer than this value. If unspecified, at most 10 asset quotas are\nreturned. The maximum value is 100 and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nSupports the following subset of CEL:\n* Only the `quotaType` and `assetType` fields are supported.\n* Only the `==` and `&&` operator are supported.\n\nFor example:\n  `quotaType == RateLimitUpload && assetType == Audio`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAssetQuotasResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "asset:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["asset:read"]
          },
          "resource": {
            "$ref": "#/components/schemas/AssetQuota",
            "name": "AssetQuota"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 60
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 60
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/AssetQuota/Cloud_ListAssetQuotas"
        }
      }
    },
    "/cloud/v2/users/{user_id}/inventory-items": {
      "get": {
        "tags": ["Inventories", "Users"],
        "summary": "List Inventory Items",
        "description": "List the inventory items in a user's inventory.\n\nThe inventory items returned depend on the target user’s choice under\n**Settings > Privacy > Who can see my inventory?**:\n* If the user granted inventory visibility to \"Everyone,\" then any API key\nor OAuth2 token can be used to view the target’s inventory, no matter what\nscopes it has or who created it.\n* If the user has not granted inventory visibility to \"Everyone\":\n  * Their inventory can still be viewed with an API key created by the\n  target user with **Inventory: Read** permission.\n  * Their inventory can still be viewed with an OAuth2 token if the target\n  user authorizes an app requesting permissions for the\n  `user.inventory-item:read` scope.\n\nRate Limits:\n* API Keys - 100 requests/minute per API key owner (can be user or group).\nRate limits are enforced across all of an owner's API keys.\n* OAuth2 Tokens - 20 requests/minute per OAuth2 access token",
        "operationId": "Cloud_ListInventoryItems",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of inventory items to return. The service might return\nfewer than this value. If unspecified, at most 10 inventory items are\nreturned. The maximum value is 100 and higher values are set to 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "maxPageSize": {
                "description": "An integer between 1 and 100, inclusive",
                "value": 10
              }
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous call, to retrieve a subsequent page.\n\nWhen paginating, all other parameters provided to the subsequent call must\nmatch the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "This field may be set in order to filter the resources returned.\n\nSee the\n[filtering](/cloud/reference/patterns#list-inventory-items)\ndocumentation for more information.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInventoryItemsResponse"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-scopes": [
          {
            "description": "Grants access to read the target user&#x27;s private inventory.",
            "name": "user.inventory-item:read"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/InventoryItem",
            "name": "InventoryItem"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 20
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/InventoryItem/Cloud_ListInventoryItems"
        }
      }
    },
    "/cloud/v2/users/{user_id}/notifications": {
      "post": {
        "tags": ["Notifications", "Users"],
        "summary": "Create User Notification",
        "description": "Sends a notification to a user.",
        "operationId": "Cloud_CreateUserNotification",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotification"
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-scopes": [
          {
            "description": "Required",
            "name": "user.user-notification:write"
          }
        ],
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": ["user.user-notification:write"]
          },
          "resource": {
            "$ref": "#/components/schemas/UserNotification",
            "name": "UserNotification"
          }
        },
        "x-roblox-stability": "STABLE",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "SECOND",
            "maxInPeriod": 4000
          },
          "perOauth2Authorization": {
            "period": "SECOND",
            "maxInPeriod": 4000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/UserNotification/Cloud_CreateUserNotification"
        }
      }
    },
    "/cloud/v2/users/{user_id}:generateThumbnail": {
      "get": {
        "tags": ["Avatars", "Thumbnails", "Users"],
        "summary": "Generate User Thumbnail",
        "description": "Generates and returns the URL for the user's avatar thumbnail.",
        "operationId": "Cloud_GenerateUserThumbnail",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the generated thumbnail. The generated thumbnail will have `size *\nsize` dimension.\n\nCurrently supported values:\n48, 50, 60, 75, 100, 110, 150, 180, 352, 420, 720\nDefault is 420.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Specify the format of the generated thumbnail. Default is `PNG`.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | FORMAT_UNSPECIFIED | Default UserThumbnail Format -- set to png |\n  | PNG | Generate thumbnail in `.png` format |\n  | JPEG | Generate thumbnail in `.jpg` format |",
            "schema": {
              "example": "FORMAT_UNSPECIFIED",
              "enum": ["FORMAT_UNSPECIFIED", "PNG", "JPEG"],
              "type": "string",
              "format": "enum"
            }
          },
          {
            "name": "shape",
            "in": "query",
            "description": "Specify the shape of the thumbnail. Default is `ROUND` (circular).\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | SHAPE_UNSPECIFIED | Default UserThumbnail Shape -- set to round |\n  | ROUND | Generate thumbnail as a circle. |\n  | SQUARE | Generate thumbnail as a rectangle. |",
            "schema": {
              "example": "SHAPE_UNSPECIFIED",
              "enum": ["SHAPE_UNSPECIFIED", "ROUND", "SQUARE"],
              "type": "string",
              "format": "enum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "x-long-running-operation-parameters": {
          "metadata": {
            "$ref": "#/components/schemas/GenerateUserThumbnailMetadata"
          },
          "response": {
            "$ref": "#/components/schemas/GenerateUserThumbnailResponse"
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "x-roblox-docs": {
          "category": "Users and groups",
          "methodProperties": {
            "scopes": []
          },
          "resource": {
            "$ref": "#/components/schemas/User",
            "name": "User"
          }
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 10
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/User/Cloud_GenerateUserThumbnail"
        }
      }
    },
    "/datastores/v1/universes/{universeId}/standard-datastores": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List data stores in an experience",
        "description": "Returns a list of an experience's data stores.",
        "operationId": "Datastores_ListDatastoresAsync",
        "x-roblox-cloud-api-operation-name": "List Data Stores",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Provide to request the next set of data.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Each call only reads one partition, so it can return fewer than the given value when running out of objectives on one partition.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "Provide to return only data stores with this prefix. ",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "An array of data stores in the target experience.",
                      "items": {
                        "$ref": "#/components/schemas/OCV1.DataStores.DataStore"
                      }
                    },
                    "nextPageCursor": {
                      "type": "string",
                      "nullable": true,
                      "description": "Indicates that there is more data available in the requested result set."
                    }
                  },
                  "example": "{\n  \"datastores\": [\n    {\n      \"name\": \"PlayerInventory\",\n      \"createdTime\": \"2022-02-18T22:38:59.9244932Z\"\n    },\n    {\n      \"name\": \"PlayerExperience\",\n      \"createdTime\": \"2022-02-18T23:00:10.4773508Z\"\n    },\n    {\n      \"name\": \"PlayerWeapons\",\n      \"createdTime\": \"2022-02-18T23:00:22.3725681Z\"\n    },\n    {\n      \"name\": \"PlayerArmor\",\n      \"createdTime\": \"2022-02-18T22:59:33.8472882Z\"\n    },\n    {\n      \"name\": \"PlayerHP\",\n      \"createdTime\": \"2022-02-18T22:58:47.6904028Z\"\n    }\n  ],\n  \"nextPageCursor\": \"...\"\n}\n"
                },
                "encoding": {
                  "metadata": {
                    "contentType": "application/json; charset=utf-8; content-length=388;"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.control:list"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "DataStoreService:ListDataStoresAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request GET \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--get \\\n-d \"prefix=Player\" \\\n-d \"limit=5\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores",
            "httpMethod": "GET"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Datastores_ListDatastoresAsync"
        }
      }
    },
    "/datastores/v1/universes/{universeId}/standard-datastores/datastore/entries": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List entries",
        "description": "Returns a list of entry keys within a data store.\n\n Entries marked deleted with a tombstone version are still included in the response if they have yet to be permanently deleted.",
        "operationId": "Entries_ListKeysAsync",
        "x-roblox-cloud-api-operation-name": "List Entries",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datastoreName",
            "in": "query",
            "description": "The name of the data store.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The value is `global` by default. See [Scopes](../../../cloud-services/data-stores/index.md#scopes).",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "allScopes",
            "in": "query",
            "description": "Set to true to return keys from all scopes.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "Provide to return only keys with this prefix.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Provide to request the next set of data.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Each call only reads one partition, so it can return fewer than the given value when running out of objectives on one partition.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 16
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "description": "An array of entry keys within the target data store.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "nextPageCursor": {
                      "type": "string",
                      "nullable": true,
                      "description": "Indicates that there is more data available in the requested result set."
                    }
                  },
                  "example": "{\n  \"keys\": [\n    {\n      \"key\": \"269323\"\n    }\n  ],\n  \"nextPageCursor\": \"eyJ2ZXJzaW9uIjoxLCJjdXJzb3IiOiIzIyJ9\"\n}\n"
                },
                "encoding": {
                  "metadata": {
                    "contentType": "application/json; charset=utf-8; content-length=388;"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.objects:list"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "DataStore:ListKeysAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request GET \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores/datastore/entries\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--get \\\n-d \"datastoreName=Coins\" \\\n-d \"prefix=\" \\\n-d \"limit=5\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries",
            "httpMethod": "GET"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries",
            "httpMethod": "GET"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Entries_ListKeysAsync"
        }
      }
    },
    "/datastores/v1/universes/{universeId}/standard-datastores/datastore/entries/entry": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "Get entry.",
        "description": "Returns the value and metadata associated with an entry.\n\nEntries marked deleted with a tombstone version will return 404 Not Found.\n\nMetadata can be found in the response headers like the following:\n```text\ncontent-md5: zuYxEhwuySMv0i8CitXImw==\nroblox-entry-version: 08D9E6A3F2188CFF.0000000001.08D9E6A3F2188CFF.01\nroblox-entry-created-time: 2022-02-02T23:30:06.5388799+00:00\nroblox-entry-version-created-time: 2022-02-02T23:30:06.5388799+00:00\nroblox-entry-attributes: { \"myAttribute\": \"myValue\" }\nroblox-entry-userids: [1, 2, 3]\n```\n\n| Header | Description |\n|---|---| \n| `content-md5` | The base64-encoded MD5 checksum of the content. See [Content-MD5](../../../cloud/guides/data-stores/request-handling.md#content-md5). |\n| `roblox-entry-version` | The version of the returned entry. |\n| `roblox-entry-created-time` | The time at which the entry was created. |\n| `roblox-entry-version-created-time` | The time at which this particular version was created. |\n| `roblox-entry-attributes` | Attributes tagged with the entry. Serialized JSON map object. |\n| `roblox-entry-userids` | Comma-separated list of Roblox user IDs tagged with the entry. |\n",
        "operationId": "Entries_GetEntryAsync",
        "x-roblox-cloud-api-operation-name": "Get Entry",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datastoreName",
            "in": "query",
            "description": "The name of the data store.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "entryKey",
            "in": "query",
            "description": "The key identifying the entry.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The value is `global` by default. See [Scopes](../../../cloud-services/data-stores/index.md#scopes).",
            "schema": {
              "type": "string",
              "default": "global",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the entry.",
            "headers": {
              "content-md5": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                },
                "description": "The base64-encoded MD5 checksum of the content. See [Content-MD5](../../../cloud/guides/data-stores/request-handling.md#content-md5)."
              },
              "roblox-entry-version": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "description": "The version of the returned entry."
              },
              "roblox-entry-created-time": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The time at which the entry was created."
              },
              "roblox-entry-version-created-time": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The time at which this particular version was created."
              },
              "roblox-entry-attributes": {
                "schema": {
                  "type": "object"
                },
                "description": "Attributes tagged with the entry. Serialized JSON map object."
              },
              "roblox-entry-userids": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "description": "Comma-separated list of Roblox user IDs tagged with the entry."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The user content of the entry."
                }
              }
            }
          },
          "204": {
            "description": "The key is marked as deleted."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.objects:read"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "GlobalDataStore:GetAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request GET \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores/datastore/entries/entry\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--get \\\n-d \"datastoreName=Coins\" \\\n-d \"entryKey=269323\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}",
            "httpMethod": "GET"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}",
            "httpMethod": "GET"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Entries_GetEntryAsync"
        }
      },
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Set entry.",
        "description": "Sets the value, metadata and user IDs associated with an entry.",
        "operationId": "Entries_SetEntryAsync",
        "x-roblox-cloud-api-operation-name": "Set Entry",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datastoreName",
            "in": "query",
            "description": "The name of the data store.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "entryKey",
            "in": "query",
            "description": "The key identifying the entry.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "matchVersion",
            "in": "query",
            "description": "Provide to update only if the current version matches this.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "name": "exclusiveCreate",
            "in": "query",
            "description": "Create the entry only if it does not exist.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The value is `global` by default. See [Scopes](../../../cloud-services/data-stores/index.md#scopes).",
            "schema": {
              "type": "string",
              "default": "global",
              "nullable": true
            }
          },
          {
            "name": "roblox-entry-attributes",
            "in": "header",
            "description": "Attributes to be associated with new version of the entry. Serialized by JSON map objects. If not provided, existing attributes are cleared.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "roblox-entry-userids",
            "in": "header",
            "description": "Comma-separated list of Roblox user IDs tagged with the entry. If not provided, existing user IDs are cleared.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "content-md5",
            "in": "header",
            "description": "The base64-encoded MD5 checksum of the content. See [Content-MD5](../../../cloud/guides/data-stores/request-handling.md#content-md5).",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "maxLength": 4194304,
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntryVersion"
                }
              }
            }
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.objects:update",
            "description": "If the entry key being set exists."
          },
          {
            "name": "universe-datastores.objects:create",
            "description": "If the entry key being set doesn't exist."
          },
          {
            "name": "universe-datastores.control:create",
            "description": "If the Data Store the entry key is in doesn't exist."
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "GlobalDataStore:SetAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request POST \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores/datastore/entries/entry?datastoreName=Coins&entryKey=269323\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--header \"content-md5: IGPBYI1uC6+AJJxC4r5YBA==\" \\\n--header \"content-type: application/json\" \\\n--header \"roblox-entry-userids: [269323]\" \\\n--header \"roblox-entry-attributes: {}\" \\\n--d \"value\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}",
            "httpMethod": "PATCH"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}",
            "httpMethod": "PATCH"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries",
            "httpMethod": "POST"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries",
            "httpMethod": "POST"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Entries_SetEntryAsync"
        }
      },
      "delete": {
        "tags": ["Data and memory stores"],
        "summary": "Delete entry.",
        "description": "Marks the entry as deleted by creating a tombstone version. Entries are deleted permanently after 30 days.",
        "operationId": "Entries_DeleteEntryAsync",
        "x-roblox-cloud-api-operation-name": "Delete Entry",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datastoreName",
            "in": "query",
            "description": "The name of the data store.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "entryKey",
            "in": "query",
            "description": "The key identifying the entry.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The value is `global` by default. See [Scopes](../../../cloud-services/data-stores/index.md#scopes).",
            "schema": {
              "type": "string",
              "default": "global",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The entry is deleted."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.objects:delete"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "GlobalDataStore:RemoveAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request DELETE \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores/datastore/entries/entry\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--get \\\n-d \"datastoreName=Coins\" \\\n-d \"entryKey=269323\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}",
            "httpMethod": "DELETE"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}",
            "httpMethod": "DELETE"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Entries_DeleteEntryAsync"
        }
      }
    },
    "/datastores/v1/universes/{universeId}/standard-datastores/datastore/entries/entry/increment": {
      "post": {
        "tags": ["Data and memory stores"],
        "summary": "Increment entry",
        "description": "Increments the value for an entry by a given amount, or create a new entry with that amount. Returns the entry and metadata.\n\nMetadata can be found in the response headers like the following:\n```text\ncontent-md5: zuYxEhwuySMv0i8CitXImw==\nroblox-entry-version: 08D9E6A3F2188CFF.0000000001.08D9E6A3F2188CFF.01\nroblox-entry-created-time: 2022-02-02T23:30:06.5388799+00:00\nroblox-entry-version-created-time: 2022-02-02T23:30:06.5388799+00:00\nroblox-entry-attributes: { \"myAttribute\": \"myValue\" }\nroblox-entry-userids: [1, 2, 3]\n```\n\n| Header | Description |\n|---|---| \n| `content-md5` | The base64-encoded MD5 checksum of the content. See [Content-MD5](../../../cloud/guides/data-stores/request-handling.md#content-md5). |\n| `roblox-entry-version` | The version of the returned entry. |\n| `roblox-entry-created-time` | The time at which the entry was created. |\n| `roblox-entry-version-created-time` | The time at which this particular version was created. |\n| `roblox-entry-attributes` | Attributes tagged with the entry. Serialized JSON map object. |\n| `roblox-entry-userids` | Comma-separated list of Roblox user IDs tagged with the entry. |\n",
        "operationId": "Entries_IncrementEntryAsync",
        "x-roblox-cloud-api-operation-name": "Increment Entry",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datastoreName",
            "in": "query",
            "description": "The name of the data store.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "entryKey",
            "in": "query",
            "description": "The key identifying the entry.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "incrementBy",
            "in": "query",
            "description": "The amount by which the entry should be incremented, or the starting value if it doesn't exist.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The value is `global` by default. See [Scopes](../../../cloud-services/data-stores/index.md#scopes).",
            "schema": {
              "type": "string",
              "default": "global",
              "nullable": true
            }
          },
          {
            "name": "roblox-entry-attributes",
            "in": "header",
            "description": "Attributes to be associated with new version of the entry. Serialized by JSON map objects. If not provided, existing attributes are cleared.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "roblox-entry-userids",
            "in": "header",
            "description": "A comma-separated list of Roblox user IDs that the entry is tagged with. If not provided, existing user IDs are cleared.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the latest version of the entry after it has been incremented.",
            "headers": {
              "content-md5": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                },
                "description": "The base64-encoded MD5 checksum of the content. See [Content-MD5](../../../cloud/guides/data-stores/request-handling.md#content-md5)."
              },
              "roblox-entry-version": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "description": "The version of the returned entry."
              },
              "roblox-entry-created-time": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The time at which the entry was created."
              },
              "roblox-entry-version-created-time": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The time at which this particular version was created."
              },
              "roblox-entry-attributes": {
                "schema": {
                  "type": "object"
                },
                "description": "Attributes tagged with the entry. Serialized JSON map object."
              },
              "roblox-entry-userids": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "description": "Comma-separated list of Roblox user IDs tagged with the entry."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The user content of the entry."
                }
              }
            }
          },
          "204": {
            "description": "The key is marked as deleted."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.objects:update",
            "description": "If the entry key being incremented exists."
          },
          {
            "name": "universe-datastores.objects:create",
            "description": "If the entry key being incremented doesn't exist."
          },
          {
            "name": "universe-datastores.control:create",
            "description": "If the Data Store the entry key is in doesn't exist."
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "GlobalDataStore:IncrementAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request POST \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores/datastore/entries/entry/increment\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--header 'content-length: 0' \\\n--get \\\n-d \"datastoreName=Coins\" \\\n-d \"entryKey=269323\" \\\n-d \"incrementBy=3\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}:increment",
            "httpMethod": "POST"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}:increment",
            "httpMethod": "POST"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Entries_IncrementEntryAsync"
        }
      }
    },
    "/datastores/v1/universes/{universeId}/standard-datastores/datastore/entries/entry/versions/version": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "Get entry version.",
        "description": "Returns the value and metadata of a specific version of an entry.\n\nMetadata can be found in the response headers like the following:\n```text\ncontent-md5: zuYxEhwuySMv0i8CitXImw==\nroblox-entry-version: 08D9E6A3F2188CFF.0000000001.08D9E6A3F2188CFF.01\nroblox-entry-created-time: 2022-02-02T23:30:06.5388799+00:00\nroblox-entry-version-created-time: 2022-02-02T23:30:06.5388799+00:00\nroblox-entry-attributes: { \"myAttribute\": \"myValue\" }\nroblox-entry-userids: [1, 2, 3]\n```\n\n| Header | Description |\n|---|---| \n| `content-md5` | The base64-encoded MD5 checksum of the content. See [Content-MD5](../../../cloud/guides/data-stores/request-handling.md#content-md5). |\n| `roblox-entry-version` | The version of the returned entry. |\n| `roblox-entry-created-time` | The time at which the entry was created. |\n| `roblox-entry-version-created-time` | The time at which this particular version was created. |\n| `roblox-entry-attributes` | Attributes tagged with the entry. Serialized JSON map object. |\n| `roblox-entry-userids` | Comma-separated list of Roblox user IDs tagged with the entry. |\n",
        "operationId": "Entries_GetEntryVersionAsync",
        "x-roblox-cloud-api-operation-name": "Get Entry Version",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datastoreName",
            "in": "query",
            "description": "The name of the data store.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "entryKey",
            "in": "query",
            "description": "The key identifying the entry.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The version to inspect.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The value is `global` by default. See [Scopes](../../../cloud-services/data-stores/index.md#scopes).",
            "schema": {
              "type": "string",
              "default": "global",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the entry.",
            "headers": {
              "content-md5": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                },
                "description": "The base64-encoded MD5 checksum of the content. See [Content-MD5](../../../cloud/guides/data-stores/request-handling.md#content-md5)."
              },
              "roblox-entry-version": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "description": "The version of the returned entry."
              },
              "roblox-entry-created-time": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The time at which the entry was created."
              },
              "roblox-entry-version-created-time": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The time at which this particular version was created."
              },
              "roblox-entry-attributes": {
                "schema": {
                  "type": "object"
                },
                "description": "Attributes tagged with the entry. Serialized JSON map object."
              },
              "roblox-entry-userids": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "description": "Comma-separated list of Roblox user IDs tagged with the entry."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The user content of the entry."
                }
              }
            }
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.versions:read"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "DataStore:GetVersionAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request GET \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores/datastore/entries/entry/versions/version\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--get \\\n-d \"datastoreName=Coins\" \\\n-d \"entryKey=269323\" \\\n-d \"versionId=08D9E6A3F2188CFF.0000000003.08D9E6DE485A7680.01\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}",
            "httpMethod": "GET"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}",
            "httpMethod": "GET"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Entries_GetEntryVersionAsync"
        }
      }
    },
    "/datastores/v1/universes/{universeId}/standard-datastores/datastore/entries/entry/versions": {
      "get": {
        "tags": ["Data and memory stores"],
        "summary": "List entry versions",
        "description": "Returns a list of versions for an entry.",
        "operationId": "Entries_ListEntryVersionsAsync",
        "x-roblox-cloud-api-operation-name": "List Entry Versions",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience with data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datastoreName",
            "in": "query",
            "description": "The name of the data store.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "entryKey",
            "in": "query",
            "description": "The key identifying the entry.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The value is `global` by default. See [Scopes](../../../cloud-services/data-stores/index.md#scopes).",
            "schema": {
              "type": "string",
              "default": "global",
              "nullable": true
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Provide to request the next set of data.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Provide to not include versions earlier than this timestamp.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "Provide to not include versions later than this timestamp.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Either `Ascending` (earlier versions first) or `Descending` (later versions first).",
            "schema": {
              "type": "string",
              "default": "Ascending",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Each call only reads one partition, so it can return fewer than the given value when running out of objectives on one partition.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 16
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntryVersion"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request / Invalid file content."
          },
          "403": {
            "description": "Publish not allowed on place."
          },
          "404": {
            "description": "The experience or data store was not found."
          },
          "429": {
            "description": "Too Many Requests."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-datastores.versions:list"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-lua-equivalent": "DataStore:ListVersionsAsync",
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --include --location --request GET \"https://apis.roblox.com/datastores/v1/universes/3310576216/standard-datastores/datastore/entries/entry/versions\" \\\n--header \"x-api-key: ${API_KEY}\" \\\n--get \\\n-d \"datastoreName=Coins\" \\\n-d \"entryKey=269323\" \\\n-d \"limit=5\""
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/entries/{entry_id}:listRevisions",
            "httpMethod": "GET"
          },
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/data-stores/{data_store_id}/scopes/{scope_id}/entries/{entry_id}:listRevisions",
            "httpMethod": "GET"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/Entries_ListEntryVersionsAsync"
        }
      }
    },
    "/ordered-data-stores/v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries": {
      "get": {
        "tags": ["Data and memory stores"],
        "description": "Returns a list of entries from an ordered data store.",
        "operationId": "OrderedDataStores_ListEntries",
        "x-roblox-cloud-api-operation-name": "List",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "description": "The identifier of the experience with ordered data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderedDataStore",
            "in": "path",
            "description": "The name of the target ordered data store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The name of the data store scope. See [Scopes](../../../cloud/guides/data-stores/request-handling.md#scopes).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_page_size",
            "in": "query",
            "description": "The maximum number of entries to return. The service may return fewer than this value. The default value is `10`. The maximum value is `100`, and any input above 100 is coerced to `100`.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "A page token received from a previous `List` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `List` must match the call providing the page token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The enumeration direction. The order by default is ascending. Input a `desc` suffix for descending.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The range of qualifying values of entries to return. See [Filters](../../../cloud/guides/data-stores/request-handling.md#filters).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEntriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: invalid orderedDataStore, scope or entry name or encoding."
          },
          "403": {
            "description": "Forbidden: studio access to APIs is not allowed, incorrect API key or scope."
          },
          "429": {
            "description": "Too Many Requests."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe.ordered-data-store.scope.entry:read"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --location 'https://apis.roblox.com/ordered-data-stores/v1/universes/<universeId>/orderedDataStores/<orderedDataStore>/scopes/<scope>/entries' \\\n --header 'x-api-key: <insert-api-key>' \n"
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries",
            "httpMethod": "GET"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/OrderedDataStores_ListEntries"
        }
      },
      "post": {
        "tags": ["Data and memory stores"],
        "description": "Creates a new entry with the content value provided.",
        "operationId": "OrderedDataStores_CreateEntry",
        "x-roblox-cloud-api-operation-name": "Create",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "description": "The identifier of the experience with ordered data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderedDataStore",
            "in": "path",
            "description": "The name of the ordered data store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The name of the data store scope. See [Scopes](../../../cloud/guides/data-stores/request-handling.md#scopes).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The name of the entry.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: invalid orderedDataStore, scope or entry name or encoding."
          },
          "403": {
            "description": "Forbidden: studio access to APIs is not allowed, incorrect API key or scope."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too Many Requests."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --location 'https://apis.roblox.com/ordered-data-stores/v1/universes/<universeId>/orderedDataStores/<orderedDataStore>/scopes/<scope>/entries?id=<id>' \\\n--header 'x-api-key: <insert-api-key>' \\\n--header 'Content-Type: application/json' \\\n--data '{ \n    \"value\": <long> \n}'\n"
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries",
            "httpMethod": "POST"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/OrderedDataStores_CreateEntry"
        }
      }
    },
    "/ordered-data-stores/v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries/{entry}": {
      "get": {
        "tags": ["Data and memory stores"],
        "description": "Gets and returns the specified entry.",
        "operationId": "OrderedDataStores_GetEntry",
        "x-roblox-cloud-api-operation-name": "Get",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "description": "The identifier of the experience with ordered data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderedDataStore",
            "in": "path",
            "description": "The name of the ordered data store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The name of the data store scope. See [Scopes](../../../cloud/guides/data-stores/request-handling.md#scopes).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: invalid orderedDataStore, scope or entry name or encoding."
          },
          "403": {
            "description": "Forbidden: studio access to APIs is not allowed, incorrect API key or scope."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too Many Requests."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe.ordered-data-store.scope.entry:read"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --location 'https://apis.roblox.com/ordered-data-stores/v1/universes/<universeId>/orderedDataStores/<orderedDataStore>/scopes/<scope>/entries/<entry>' \\\n --header 'x-api-key: <insert-api-key>' \n"
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries/{entry_id}",
            "httpMethod": "GET"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/OrderedDataStores_GetEntry"
        }
      },
      "delete": {
        "tags": ["Data and memory stores"],
        "description": "Deletes the specified entry. Unlike standard data stores, which mark entries for deletion, ordered data store entries are deleted immediately.",
        "operationId": "OrderedDataStores_DeleteEntry",
        "x-roblox-cloud-api-operation-name": "Delete",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "description": "The identifier of the experience with ordered data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderedDataStore",
            "in": "path",
            "description": "The name of the ordered data store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The name of the data store scope. See [Scopes](../../../cloud/guides/data-stores/request-handling.md#scopes).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: the entry was successfully deleted or didn't exist."
          },
          "400": {
            "description": "Bad Request: invalid orderedDataStore, scope or entry name or encoding."
          },
          "403": {
            "description": "Forbidden: Studio access to APIs is not allowed, incorrect API key or scope."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too Many Requests."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --location --request DELETE 'https://apis.roblox.com/ordered-data-stores/v1/universes/<universeId>/orderedDataStores/<orderedDataStore>/scopes/<scope>/entries/<entry>' \\\n --header 'x-api-key: <insert-api-key>' \n"
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries/{entry_id}",
            "httpMethod": "DELETE"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/OrderedDataStores_DeleteEntry"
        }
      },
      "patch": {
        "tags": ["Data and memory stores"],
        "description": "Updates an entry value and returns the updated entry.",
        "operationId": "OrderedDataStores_UpdateEntry",
        "x-roblox-cloud-api-operation-name": "Update",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "description": "The identifier of the experience with ordered data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderedDataStore",
            "in": "path",
            "description": "The name of the ordered data store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The name of the data store scope. See [Scopes](../../../cloud/guides/data-stores/request-handling.md#scopes).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allow_missing",
            "in": "query",
            "description": "The flag to allow the creation of an entry if the entry doesn't exist. See [Allow missing flags](../../../cloud/guides/data-stores/request-handling.md.md#allow-missing-flags).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: invalid orderedDataStore, scope or entry name or encoding."
          },
          "403": {
            "description": "Forbidden: studio access to APIs is not allowed, incorrect API key or scope."
          },
          "404": {
            "description": "Not found."
          },
          "409": {
            "description": "Aborted."
          },
          "429": {
            "description": "Too Many Requests."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --location --request PATCH 'https://apis.roblox.com/ordered-data-stores/v1/universes/<universeId>/orderedDataStores/<orderedDataStore>/scopes/<scope>/entries/<entry>' \\\n--header 'x-api-key: <insert-api-key>' \\\n--header 'Content-Type: application/json' \\\n--data '{ \n    \"value\": <long> \n}'\n"
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries/{entry_id}",
            "httpMethod": "PATCH"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/OrderedDataStores_UpdateEntry"
        }
      }
    },
    "/ordered-data-stores/v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries/{entry}:increment": {
      "post": {
        "tags": ["Data and memory stores"],
        "description": "Increments the value of the key by the provided amount and returns the updated entry.\n\nKnown issue: Entry values can increment past the valid range and this may persist in the backend. Returned values will clamp to the valid range.",
        "operationId": "OrderedDataStores_IncrementEntry",
        "x-roblox-cloud-api-operation-name": "Increment",
        "x-roblox-stability": "BETA",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "description": "The identifier of the experience with ordered data stores that you want to access. You can find your experience's universe ID on Creator Hub.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderedDataStore",
            "in": "path",
            "description": "The name of the ordered data store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The name of the data store scope. See [Scopes](../../../cloud/guides/data-stores/request-handling.md#scopes).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry",
            "in": "path",
            "description": "The entry ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncrementEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: invalid orderedDataStore, scope or entry name or encoding."
          },
          "403": {
            "description": "Forbidden: studio access to APIs is not allowed, incorrect API key or scope."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too Many Requests."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe.ordered-data-store.scope.entry:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "curl",
            "script": "curl --location 'https://apis.roblox.com/ordered-data-stores/v1/universes/<universeId>/orderedDataStores/<orderedDataStore>/scopes/<scope>/entries/<entry>:increment' \\\n--header 'x-api-key: <insert-api-key>' \\\n--header 'Content-Type: application/json' \\\n--data '{ \n    \"amount\": <long> \n}'\n"
          }
        ],
        "x-roblox-rate-limits": {
          "description": "See [Throttling](../../../cloud/guides/data-stores/throttling.md).",
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 500
          }
        },
        "x-roblox-alternatives": [
          {
            "url": "https://apis.roblox.com/cloud/v2/universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{scope_id}/entries/{entry_id}:increment",
            "httpMethod": "POST"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/storage#/default/OrderedDataStores_IncrementEntry"
        }
      }
    },
    "/assets/v1/assets": {
      "post": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Create Asset",
        "x-roblox-stability": "BETA",
        "summary": "Creates an asset with provided content and metadata.",
        "description": "Creates an asset with provided content and metadata.\n\nYou can't add [SocialLink](#SocialLink) objects when you create an asset. Instead, use [Update Asset](#PATCH-v1-assets-_assetId_).\n\nProvide the [Asset](#Asset), binary asset file path, and [content type](../../../cloud/guides/usage-assets.md#supported-asset-types-and-limits) in the form data.",
        "operationId": "Assets_CreateAsset",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "$ref": "#/components/schemas/Asset",
                    "description": "Asset attributes to create."
                  },
                  "fileContent": {
                    "type": "string",
                    "format": "binary",
                    "description": "The binary asset file path and the content type. See [Asset types and limits](../../../cloud/guides/usage-assets.md#supported-asset-types-and-limits)."
                  }
                },
                "required": ["request", "fileContent"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Operation ID for checking the creation status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCV1.Assets.Operation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid argument. Failed to parse the request or the file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCV1.Assets.Status"
                }
              }
            }
          },
          "401": {
            "description": "The API key is not valid for this operation / You don't have the authorization."
          },
          "500": {
            "description": "Server internal error / Unknown error."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          },
          {
            "name": "asset:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Create Asset",
            "script": "curl --location --request POST 'https://apis.roblox.com/assets/v1/assets' \\\n--header 'x-api-key: {apiKey}' \\\n--form 'request=\"{ \n  \\\"assetType\\\": \\\"Model\\\",  \n  \\\"displayName\\\": \\\"Name\\\", \n  \\\"description\\\": \\\"This is a description\\\", \n  \\\"creationContext\\\": { \n    \\\"creator\\\": { \n      \\\"userId\\\": \\\"${userId}\\\" \n    } \n  } \n}\"' \\\n--form 'fileContent=@\"/filepath/model.fbx\";type=model/fbx' \n"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 60
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 60
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_CreateAsset"
        }
      }
    },
    "/assets/v1/assets/{assetId}": {
      "get": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Get Asset",
        "x-roblox-stability": "BETA",
        "summary": "Retrieve specific asset metadata. Include the `readMask` parameter for additional asset metadata.",
        "description": "Retrieve specific asset metadata.",
        "operationId": "Assets_GetAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "readMask",
            "in": "query",
            "description": "Asset metadata fields to retrieve, including the description, display name, icon, social links, and previews. Examples: `description%2CdisplayName`, `previews%2CtwitchSocialLink`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset resource retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request, likely due to an invalid read mask."
          },
          "401": {
            "description": "The API key is not valid for this operation / You don't have the authorization."
          },
          "403": {
            "description": "Doesn't have the required permission."
          },
          "404": {
            "description": "Asset doesn't exist."
          },
          "500": {
            "description": "Server internal error / Unknown error."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Get Asset without readMask",
            "script": "curl --location --request GET 'https://apis.roblox.com/assets/v1/assets/{assetId}' \\\n--header 'x-api-key: {apiKey}'"
          },
          {
            "language": "Get Asset with readMask",
            "script": "curl --location --request GET 'https://apis.roblox.com/assets/v1/assets/{assetId}?readMask={read_mask}' \\\n--header 'x-api-key: {apiKey}'"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 60
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 60
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_GetAsset"
        }
      },
      "patch": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Update Asset",
        "x-roblox-stability": "BETA",
        "summary": "Updates an asset with provided content and metadata.",
        "description": "Updates an asset with provided content and metadata, including the description, display name, icon, social links, and previews. Currently can only update the content body for **Models**. Icons and Previews must be **Image** assets. Icons must have square dimensions.\n\nProvide the [Asset](#Asset), binary asset file path, and [content type](../../../cloud/guides/usage-assets.md#supported-asset-types-and-limits) in the form data.",
        "operationId": "Assets_UpdateAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "required": false,
            "description": "Asset metadata fields to update, including the description, display name, icon, and previews. Examples: `description%2CdisplayName`, `previews%2CtwitchSocialLink`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "$ref": "#/components/schemas/Asset",
                    "description": "Asset attributes to update."
                  },
                  "fileContent": {
                    "type": "string",
                    "format": "binary",
                    "description": "The binary asset file path and the content type. See [Asset types and limits](../../../cloud/guides/usage-assets.md#supported-asset-types-and-limits)."
                  }
                },
                "required": ["request", "fileContent"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Operation ID for checking the update status / Returns the updated metadata fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCV1.Assets.Operation",
                  "example": "{\"previews\": [\n  {\"asset\": \"assets/123\", \"altText\": \"preview 1\"},\n  {\"asset\": \"assets/456\", \"altText\": \"preview 2\"}\n]}"
                }
              }
            }
          },
          "400": {
            "description": "Invalid argument. Failed to parse the request or the file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCV1.Assets.Status"
                }
              }
            }
          },
          "401": {
            "description": "The API key is not valid for this operation / You don't have the authorization."
          },
          "500": {
            "description": "Server internal error / Unknown error."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          },
          {
            "name": "asset:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Update Content Only and Create a New Version",
            "script": "curl --location --request PATCH 'https://apis.roblox.com/assets/v1/assets/{assetId}' \\\n--header 'x-api-key: {apiKey}' \\\n--form 'request=\"{\\\"assetId\\\": {assetId} }\"' \\\n--form 'fileContent=\"@\\\"{file-path}\\\"\"'"
          },
          {
            "language": "Update Content and Metadata",
            "script": "curl --location --request PATCH 'https://apis.roblox.com/assets/v1/assets/{assetId}?updateMask=description%2CdisplayName' \\\n--header 'x-api-key: {apiKey}' \\\n--form 'request=\"{\n    \\\"assetType\\\": \\\"{assetType}\\\",\n    \\\"assetId\\\": {assetId},\n    \\\"displayName\\\": \\\"{new display name}\\\",\n    \\\"description\\\": \\\"{new description}\\\",    \n    \\\"creationContext\\\": { \n        \\\"creator\\\": {\n            \\\"userId\\\": {userId}\n        },\n        \\\"expectedPrice\\\":{expectedPrice}\n    },\n}\"' \\\n--form 'fileContent=@\\\"{file-path}\\\"'"
          },
          {
            "language": "Update a List of Previews",
            "script": "curl --location --request PATCH 'https://apis.roblox.com/assets/v1/assets/{assetId}?updateMask=previews' \\\n--header 'x-api-key: {apiKey}' \\\n--form 'request=\"{\\\"assetId\\\": \\\"{assetId}\\\", \\\"previews\\\": [{\\\"asset\\\": \\\"assets/123\\\", \\\"altText\\\": \\\"Your alt text.\\\"}]}\"'"
          },
          {
            "language": "Update Social Links",
            "script": "curl --location --request PATCH 'https://apis.roblox.com/assets/v1/assets/{assetId}?updateMask=twitchSocialLink%2CgithubSocialLink' \\\n--header 'x-api-key: {apiKey}' \\\n--form 'request=\"{\\\"assetId\\\": \\\"{assetId}\\\", \\\"twitchSocialLink\\\": {\\\"title\\\": \\\"Optional title\\\", \\\"uri\\\": \\\"https://twitch.tv/your-channel\\\"}, \\\"githubSocialLink\\\": {\\\"title\\\": \\\"Optional title\\\", \\\"uri\\\": \\\"https://github.com/your-repo\\\"}}\"'"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 60
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 60
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_UpdateAsset"
        }
      }
    },
    "/assets/v1/assets/{assetId}:archive": {
      "post": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Archive Asset",
        "x-roblox-stability": "BETA",
        "summary": "Archives the asset.",
        "description": "Archives the asset. Archived assets disappear from the website and are no longer usable or visible in Roblox experiences, but you can [restore](#POST-v1-assets-{assetId}:restore) them.",
        "operationId": "Assets_ArchiveAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset archived succesfully successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid request."
          },
          "403": {
            "description": "Forbidden - API key without Write scope or user doesn't have access."
          },
          "404": {
            "description": "Asset not found."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          },
          {
            "name": "asset:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Archive Asset",
            "script": "curl --location 'https://apis.roblox.com/assets/v1/assets/{assetid}:archive' \\\n--header 'x-api-key: {apiKey}' \\\n--header 'Content-Type: application/json'"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_ArchiveAsset"
        }
      }
    },
    "/assets/v1/assets/{assetId}:restore": {
      "post": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Restore Asset",
        "x-roblox-stability": "BETA",
        "summary": "Restores an archived asset.",
        "description": "Restores an archived asset.",
        "operationId": "Assets_RestoreAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset restored successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid request."
          },
          "403": {
            "description": "Forbidden - API key without Write scope or user doesn't have access."
          },
          "404": {
            "description": "Asset not found."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          },
          {
            "name": "asset:write"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Restore Asset",
            "script": "curl --location 'https://apis.roblox.com/assets/v1/assets/{assetid}:restore' \\\n--header 'x-api-key: {apiKey}' \\\n--header 'Content-Type: application/json'"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_RestoreAsset"
        }
      }
    },
    "/assets/v1/assets/{assetId}/versions/{versionNumber}": {
      "get": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Get Asset Version",
        "x-roblox-stability": "BETA",
        "summary": "Get Asset Version",
        "description": "Retrieve a specific asset version by the asset ID and the version number.",
        "operationId": "Assets_GetAssetVersion",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionNumber",
            "in": "path",
            "description": "The version number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset version retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersion"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - API key without Read scope or user doesn't have access."
          },
          "404": {
            "description": "Asset or Asset Version not found."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Get Asset Version",
            "script": "curl --location 'https://apis.roblox.com/assets/v1/assets/{assetId}/versions/{versionNumber}' \\\n--header 'x-api-key: {apiKey}'"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_GetAssetVersion"
        }
      }
    },
    "/assets/v1/assets/{assetId}/versions": {
      "get": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "List Asset Versions",
        "x-roblox-stability": "BETA",
        "summary": "List Asset Versions of an Asset",
        "description": "List all versions of a specific asset, with optional pagination.",
        "operationId": "listAssetVersions",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "Specifies the number of asset versions to include in the response. Valid values range from 1 to 50 (inclusive). Defaults to 8 when not provided.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token for pagination. The value is obtained from a previous request and allows for retrieving the next page of asset versions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset versions listed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetVersion"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters."
          },
          "403": {
            "description": "Forbidden - API key without Read scope or user doesn't have access."
          },
          "404": {
            "description": "Asset not found."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "List Asset Versions",
            "script": "curl --location 'https://apis.roblox.com/assets/v1/assets/{assetid}/versions?pageToken=&maxPageSize=' \\\n--header 'x-api-key: {apiKey}'"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/listAssetVersions"
        }
      }
    },
    "/assets/v1/assets/{assetId}/versions:rollback": {
      "post": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Rollback Asset Version",
        "x-roblox-stability": "BETA",
        "summary": "Rollback an asset to a previous version.",
        "description": "Rollback an asset to a specific previous version.\n\n Provide the asset version path in the form data.",
        "operationId": "Assets_RollbackAssetVersion",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "assetVersion": {
                    "type": "string",
                    "description": "The asset version path in the format of `assets/{assetId}/versions/{versionNumber}`."
                  }
                },
                "required": ["assetVersion"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset rolled back successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid request body."
          },
          "403": {
            "description": "Forbidden - API key without Write scope or user doesn't have access."
          },
          "404": {
            "description": "Asset or Asset Version not found."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          },
          {
            "name": "asset:write"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Rollback Asset Versions",
            "script": "curl --location 'https://apis.roblox.com/assets/v1/assets/{assetid}/versions:rollback' \\\n--header 'x-api-key: {apiKey}' \\\n--header 'Content-Type: application/json' \\\n--data '{\\\"assetVersion\\\":\\\"assets/{assetId}/versions/{versionNumber}\\\"}'"
          }
        ],
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_RollbackAssetVersion"
        }
      }
    },
    "/assets/v1/operations/{operationId}": {
      "get": {
        "tags": ["Assets"],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-cloud-api-operation-name": "Get Operation",
        "x-roblox-stability": "BETA",
        "summary": "Get the result of an asset creation or update.",
        "description": "Get the result of an asset creation or update using the returned Operation ID. Requires **Read** for the API key permission and **asset:read** for OAuth 2.0 apps.",
        "operationId": "Assets_GetOperation",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "The unique identifier of the operation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation result retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCV1.Assets.Operation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid argument. Failed to parse the request or the file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCV1.Assets.Status"
                }
              }
            }
          },
          "401": {
            "description": "The API key is not valid for this operation / You don't have the authorization."
          },
          "500": {
            "description": "Server internal error / Unknown error."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "asset:read"
          }
        ],
        "x-roblox-cloud-api-operation-code-samples": [
          {
            "language": "Get Operation",
            "script": "curl --location 'https://apis.roblox.com/assets/v1/operations/{operationId}' \\\n--header 'x-api-key: {apiKey}'\n"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/Assets_GetOperation"
        }
      }
    },
    "/messaging-service/v1/universes/{universeId}/topics/{topic}": {
      "post": {
        "tags": ["Universes"],
        "operationId": "CrossServerMessaging_Publish",
        "x-roblox-cloud-api-operation-name": "Publish a Message",
        "x-roblox-stability": "BETA",
        "description": "Publish a message to a pre-defined topic of an experience, with the size of the message up to 1,024 characters (1 KB). Requires the **Publish** permission for API keys and the **universe-messaging-service:publish** scope for OAuth 2.0 apps. See [Cross-server messaging](../../../cloud-services/cross-server-messaging.md#subscribe-users-to-receive-messages) for defining and subscribing users to a topic.",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience in which you want to send your messages to. You can [copy your experience's Universe ID](../../../cloud/guides/usage-messaging.md#publishing-messages-to-live-servers) on **Creator Dashboard**.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "topic",
            "in": "path",
            "required": true,
            "description": "The topic that you want to publish your message to, with up to 80 characters.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PublishRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PublishRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response body."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "The API key is not valid for this operation / You don't have the authorization."
          },
          "403": {
            "description": "Publishing is not allowed on this experience."
          },
          "500": {
            "description": "Server internal error / Unknown error."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 5000
          }
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-messaging-service:publish"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/CrossServerMessaging_Publish"
        }
      }
    },
    "/universes/v1/{universeId}/places/{placeId}/versions": {
      "post": {
        "tags": ["Places", "Universes"],
        "operationId": "Places_CreatePlaceVersionApiKey",
        "x-roblox-cloud-api-operation-name": "Publish a Place",
        "x-roblox-stability": "BETA",
        "description": "Publish a new place or update an existing place with a new version. Provide a RBXL or RBXLX file in the data-binary.",
        "parameters": [
          {
            "name": "universeId",
            "in": "path",
            "required": true,
            "description": "The identifier of the experience in which you want to publish your place to. You can [copy your experience's Universe ID](../../../cloud/guides/usage-place-publishing.md#publishing-a-place) on **Creator Dashboard**.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "description": "The identifier of your place. See [Publishing places with API keys](../../../cloud/guides/usage-place-publishing.md) on obtaining a Place ID.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "versionType",
            "in": "query",
            "description": "Can only be either: \n- `Saved`: the place file should be saved, but not published. \n - `Published`: the place file should be saved and published.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the published place's version number.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "{\"versionNumber\":7}"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request / Invalid file content."
          },
          "401": {
            "description": "API key not valid for operation, user does not have authorization."
          },
          "403": {
            "description": "Publish not allowed on place."
          },
          "404": {
            "description": "Place or universe does not exist."
          },
          "409": {
            "description": "Place not part of the universe."
          },
          "500": {
            "description": "Server internal error / Unknown error."
          }
        },
        "security": [
          {
            "roblox-api-key": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "universe-places:write"
          }
        ],
        "x-roblox-cloud-api-operation": true,
        "x-roblox-code-samples": [
          {
            "language": "curl",
            "script": "curl --location --request POST 'https://apis.roblox.com/universes/v1/{universeId}/places/{placeId}/versions?versionType=Published' \n--header 'x-api-key: abc...' \n--header 'Content-Type: application/xml' \n--data-raw '<roblox></roblox>'\n"
          }
        ],
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 30
          }
        },
        "x-roblox-throttling-limit": {
          "perApiKey": {
            "periodInSeconds": "60",
            "maxInPeriod": 30
          }
        },
        "x-roblox-size-limit": 10485760,
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/Places_CreatePlaceVersionApiKey"
        }
      }
    },
    "/v1/birthdate": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get the user's birthdate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.BirthdateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.BirthdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_birthdate"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Update the user's birthdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.BirthdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.BirthdateRequest"
              }
            }
          },
          "description": "The Roblox.AccountInformation.Api.Models.BirthdateRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found.\r\n4: The birthdate provided is invalid.\r\n8: Password is incorrect."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: Invalid birthdate change."
          },
          "500": {
            "description": "0: An unknown error occured.\r\n5: Invalid birthdate change."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_birthdate"
        }
      }
    },
    "/v1/description": {
      "get": {
        "tags": ["Accounts", "User profiles"],
        "summary": "Get the user's description",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.DescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.DescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_description"
        }
      },
      "post": {
        "tags": ["Accounts", "User profiles"],
        "summary": "Update the user's description",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.DescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.DescriptionRequest"
              }
            }
          },
          "description": "The Roblox.AccountInformation.Api.Models.DescriptionRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.DescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.DescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "3: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_description"
        }
      }
    },
    "/v1/gender": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get the user's gender",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.GenderResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.GenderResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_gender"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Update the user's gender",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.GenderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.GenderRequest"
              }
            }
          },
          "description": "The Roblox.AccountInformation.Api.Models.GenderRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found.\r\n6: The gender provided is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_gender"
        }
      }
    },
    "/v1/metadata": {
      "get": {
        "tags": ["Accounts", "Metadata", "User profiles"],
        "summary": "Get the metadata",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.MetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.MetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_metadata"
        }
      }
    },
    "/v1/phone": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get Verified Phone Number",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PhoneResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PhoneResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_phone"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Set Phone Number",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.AccountInformation.Api.Models.PhoneRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Platform.UserPhoneNumberVerification.Models.PendingVerificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Platform.UserPhoneNumberVerification.Models.PendingVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid Phone Number\r\n3: Phone Number Already Associated\r\n8: Invalid Phone Number Type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: Incorrect Password\r\n10: "
          },
          "429": {
            "description": "6: Flooded"
          },
          "500": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "1: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_phone"
        }
      }
    },
    "/v1/promotion-channels": {
      "get": {
        "tags": ["Accounts", "User profiles"],
        "summary": "Get the user's promotion channels",
        "parameters": [
          {
            "in": "query",
            "name": "alwaysReturnUrls",
            "description": "Whether all promotion channel links should be returned as full URLs.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "filterLink",
            "description": "Whether all promotion channel links should be filtered.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "onlyShortenTwitter",
            "description": "Whether all promotion channels links except for Twitter should be returned as full URLs. If false, all promotion channels will be shortened.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PromotionChannelsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PromotionChannelsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_promotion_channels"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Update the user's promotion channels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PromotionChannelsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PromotionChannelsRequest"
              }
            }
          },
          "description": "The Roblox.AccountInformation.Api.Models.PromotionChannelsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: The request was empty.\r\n11: The Facebook profile url is invalid.\r\n12: The Twitter handle is invalid.\r\n13: The YouTube url is invalid.\r\n14: The Twitch profile url is invalid.\r\n15: The Guilded profile url is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: Only users who are over twelve years of age may edit social network channels."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_promotion_channels"
        }
      }
    },
    "/v1/star-code-affiliates": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets a star code affiliate supporter for the authenticated user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.StarCodeAffiliateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.StarCodeAffiliateResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_star_code_affiliates"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Adds a star code affiliate supporter for the authenticated user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.StarCodeAffiliateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.StarCodeAffiliateRequest"
              }
            }
          },
          "description": "Roblox.AccountInformation.Api.Models.StarCodeAffiliateRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.StarCodeAffiliateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.StarCodeAffiliateResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The code was invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_star_code_affiliates"
        }
      },
      "delete": {
        "tags": ["Accounts"],
        "summary": "Removes the star code affiliate supporter for the authenticated user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/delete_v1_star_code_affiliates"
        }
      }
    },
    "/v1/users/{userId}/promotion-channels": {
      "get": {
        "tags": ["Accounts", "User profiles", "Users"],
        "summary": "Get promotion channels for a given user ID",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user to fetch the promotion channels for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "alwaysReturnUrls",
            "description": "Whether all promotion channel links should be returned as full URLs.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "filterLink",
            "description": "Whether all promotion channel links should be filtered.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PromotionChannelsByUserIdResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PromotionChannelsByUserIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_users__userId__promotion_channels"
        }
      }
    },
    "/v1/users/{userId}/roblox-badges": {
      "get": {
        "tags": ["Accounts", "Badges", "User profiles", "Users"],
        "summary": "Returns a list of Roblox badges belonging to a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.AccountInformation.Api.RobloxBadgeResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.AccountInformation.Api.RobloxBadgeResponse"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_users__userId__roblox_badges"
        }
      }
    },
    "/v1/xbox-live/consecutive-login-days": {
      "get": {
        "tags": ["Accounts", "User profiles"],
        "summary": "Returns number of consecutive login days for xbox users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.ConsecutiveLoginDaysResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.ConsecutiveLoginDaysResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n7: The account is not connected to an Xbox Live account"
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_xbox_live_consecutive_login_days"
        }
      }
    },
    "/v1/email/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verify the user's email address from token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.VerifyEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.VerifyEmailRequest"
              }
            }
          },
          "description": "Roblox.AccountInformation.Api.Models.VerifyEmailRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.VerifyEmailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.VerifyEmailResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_email_verify"
        }
      }
    },
    "/v1/phone/delete": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Delete Phone",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.AccountInformation.Api.Models.PhoneRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: Incorrect Password"
          },
          "429": {
            "description": "6: Flooded"
          },
          "500": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "1: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_phone_delete"
        }
      }
    },
    "/v1/phone/resend": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Resend Phone code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.EmptyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.EmptyRequest"
              }
            }
          },
          "description": "Roblox.AccountInformation.Api.Models.PhoneRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "6: Flooded"
          },
          "500": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "1: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_phone_resend"
        }
      }
    },
    "/v1/phone/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verify Phone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.VerifyPhoneRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.VerifyPhoneRequest"
              }
            }
          },
          "description": "Roblox.AccountInformation.Api.Models.VerifyPhoneRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid Phone Number\r\n3: Phone Number Already Associated\r\n7: Invalid Code"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "6: Flooded"
          },
          "500": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "1: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountinformation.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_phone_verify"
        }
      }
    },
    "/v1/account/settings/account-country": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get a user's current account country setting.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.Models.Response.AccountCountrySettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.Models.Response.AccountCountrySettingsResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_account_settings_account_country"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Updates the user's account country.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.UpdateAccountCountryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.UpdateAccountCountryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.Models.Response.UpdateAccountCountryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.Models.Response.UpdateAccountCountryResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: InvalidRequest"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: OperationNotPermitted"
          },
          "404": {
            "description": "2: OperationNotPermitted"
          },
          "500": {
            "description": "0: Unknown"
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_account_settings_account_country"
        }
      }
    },
    "/v1/account/settings/metadata": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Returns metadata used by the account settings page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.Models.AccountsSettingsMetadataModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.Models.AccountsSettingsMetadataModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_account_settings_metadata"
        }
      }
    },
    "/v1/email": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets the authenticated user's email address and verified status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.EmailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.EmailResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_email"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Updates the authenticated user's email address",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.AccountSettings.Api.UpdateEmailRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "8: Password is incorrect.\r\n9: Invalid email address."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: This feature is currently disabled. Please try again later.\r\n3: There are too many accounts associated with this email address.\r\n11: You must be on the Corporate network to log in."
          },
          "409": {
            "description": "4: This is already the current email."
          },
          "429": {
            "description": "6: Too many attempts to update email. Please try again later.\r\n7: Too many attempts to send verification email. Please try again later."
          },
          "503": {
            "description": "2: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_email"
        }
      },
      "patch": {
        "tags": ["Accounts"],
        "summary": "Updates the authenticated user's email address",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.AccountSettings.Api.UpdateEmailRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "8: Password is incorrect.\r\n9: Invalid email address."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: This feature is currently disabled. Please try again later.\r\n3: There are too many accounts associated with this email address.\r\n11: You must be on the Corporate network to log in."
          },
          "409": {
            "description": "4: This is already the current email."
          },
          "429": {
            "description": "6: Too many attempts to update email. Please try again later.\r\n7: Too many attempts to send verification email. Please try again later."
          },
          "503": {
            "description": "2: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/patch_v1_email"
        }
      }
    },
    "/v1/themes/{consumerType}/{consumerId}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "returns the theme type for a specific consumer.",
        "parameters": [
          {
            "in": "path",
            "name": "consumerType",
            "description": "The consumer type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1]
            }
          },
          {
            "in": "path",
            "name": "consumerId",
            "description": "The consumer's theme configuration to get. If the consumerType is User always return the AuthenticatedUser's theme type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.ThemeConfigurationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.ThemeConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid consumer type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_themes__consumerType___consumerId_"
        }
      },
      "patch": {
        "tags": ["Accounts"],
        "summary": "Modify the theme type for consumer.",
        "parameters": [
          {
            "in": "path",
            "name": "consumerType",
            "description": "The consumer type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1]
            }
          },
          {
            "in": "path",
            "name": "consumerId",
            "description": "The consumer's theme configuration to modify. If the consumerType is User always modify the AuthenticatedUser's theme type.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.ThemeConfigurationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.ThemeConfigurationRequest"
              }
            }
          },
          "description": "An Roblox.AccountSettings.Api.ThemeConfigurationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid theme type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/patch_v1_themes__consumerType___consumerId_"
        }
      }
    },
    "/v1/themes/types": {
      "get": {
        "tags": ["Accounts"],
        "summary": "returns all the enabled theme types.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_System.String_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_System.String_"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_themes_types"
        }
      }
    },
    "/v1/trade-privacy": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get a user's trade privacy setting",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradePrivacyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradePrivacyResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_trade_privacy"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Updates a user's trade privacy setting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.UpdateTradePrivacyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.UpdateTradePrivacyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradePrivacyUpdateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradePrivacyUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.AccountSettings.Api.ResponseEnums.TradeSettingsErrors.InvalidTradePrivacy"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.AccountSettings.Api.ResponseEnums.TradeSettingsErrors.AccountLocked\r\n            OR\r\n            Roblox.AccountSettings.Api.ResponseEnums.TradeSettingsErrors.UserCannotTrade\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_trade_privacy"
        }
      }
    },
    "/v1/trade-value": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get a user's trade quality filter setting",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradeValueResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradeValueResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_trade_value"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Updates a user's trade quality filter setting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradeValueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.TradeValueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.AccountSettings.Api.ResponseEnums.TradeSettingsErrors.InvalidTradeValue"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.AccountSettings.Api.ResponseEnums.TradeSettingsErrors.AccountLocked\r\n            OR\r\n            Roblox.AccountSettings.Api.ResponseEnums.TradeSettingsErrors.UserCannotTrade\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_trade_value"
        }
      }
    },
    "/v1/email/verify#AccountSettingsApi": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Send verify email to the authenticated user's email address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.SendVerifyEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AccountSettings.Api.SendVerifyEmailRequest"
              }
            }
          },
          "description": "The request body."
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "10: No email address is associated with the account."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: This feature is currently disabled. Please try again later.\r\n11: You must be on the Corporate network to log in."
          },
          "409": {
            "description": "5: The email is already verified."
          },
          "429": {
            "description": "7: Too many attempts to send verification email. Please try again later."
          },
          "503": {
            "description": "2: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://accountsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_email_verify"
        }
      }
    },
    "/v2/sponsored-campaigns": {
      "get": {
        "tags": ["Sponsored campaigns"],
        "summary": "Gets a page of Roblox.AdConfiguration.Api.SponsoredCampaignModel with specified input parameters.",
        "parameters": [
          {
            "in": "query",
            "name": "campaignTargetType",
            "description": "The campaign target type enum value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3]
            }
          },
          {
            "in": "query",
            "name": "campaignTargetId",
            "description": "The id of the campaign target",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "includeReportingStats",
            "description": "Indicates whether to include reporting stats in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "isArchived",
            "description": "Indicates whether to retrieve archived ads",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "pageCursor",
            "description": "The cursor of the page to retrieve. If empty, fetches the first page",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.GetSponsoredCampaignsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.GetSponsoredCampaignsResponse"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid campaign target ID.\r\n23: Invalid campaign target type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "1: This feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/get_v2_sponsored_campaigns"
        }
      }
    },
    "/v2/sponsored-campaigns/eligible-asset-type-ids": {
      "get": {
        "tags": ["Sponsored campaigns"],
        "summary": "Get all asset type IDs that are eligible to be sponsored.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "10: Insufficient permissions."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/get_v2_sponsored_campaigns_eligible_asset_type_ids"
        }
      }
    },
    "/v2/sponsored-campaigns/multi-get-can-user-sponsor": {
      "get": {
        "tags": ["Sponsored campaigns"],
        "summary": "Checks whether the targets are eligible for sponsorship, and\r\nif the user is authorized to sponsor the targets.",
        "parameters": [
          {
            "in": "query",
            "name": "campaignTargetType",
            "description": "Ads.Management.Service.CampaignTargetType.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3]
            }
          },
          {
            "in": "query",
            "name": "campaignTargetIds",
            "description": "The IDs of the campaign targets.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/get_v2_sponsored_campaigns_multi_get_can_user_sponsor"
        }
      }
    },
    "/v2/sponsored-games": {
      "get": {
        "tags": ["Sponsored campaigns"],
        "summary": "Gets a page of Roblox.AdConfiguration.Api.SponsoredGameV2Model with specified input parameters.",
        "parameters": [
          {
            "in": "query",
            "name": "universeId",
            "description": "The universe id of the ad campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "includeReportingStats",
            "description": "Indicates whether to include reporting stats in the response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "isArchived",
            "description": "Indicates whether to retrieve archived ads.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "pageCursor",
            "description": "The cursor of the page to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.GetSponsoredGamesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.GetSponsoredGamesResponse"
                }
              }
            }
          },
          "400": {
            "description": "9: Cannot load the universe for the specified universe id.\r\n9: Cannot load the universe for the specified universe id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "1: This feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/get_v2_sponsored_games"
        }
      }
    },
    "/v2/sponsored-games/universes": {
      "get": {
        "tags": ["Sponsored campaigns"],
        "summary": "Gets a list of universes for the authenticated user, or the given group, ordered by most recently created sponsored game ads.",
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "The group id, if applicable.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.GetRecentAdsRankedUniversesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.GetRecentAdsRankedUniversesResponse"
                }
              }
            }
          },
          "400": {
            "description": "19: Invalid group id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "10: Insufficient permissions."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/get_v2_sponsored_games_universes"
        }
      }
    },
    "/v2/sponsored-campaigns/create": {
      "post": {
        "tags": ["Sponsored campaigns"],
        "summary": "Creates a complete ad. Including ad campaign, ad set, escrow, and the ad.\r\nCurrently intended for creation of sponsorships only.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.CreateSponsoredCampaignRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.CreateSponsoredCampaignRequest"
              }
            }
          },
          "description": "Roblox.AdConfiguration.Api.Models.CreateSponsoredCampaignRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "2: Daily budget is lower than minimum allowed.\r\n3: Total budget must be greater than 0.\r\n4: Ad name cannot be empty.\r\n5: Start date must not be a future date.\r\n6: End date must be a future date.\r\n7: Start date must be earlier than end date.\r\n8: Total budget does not match daily spend and number of days being scheduled\r\n9: Cannot load the universe for the specified universe id.\r\n11: Invalid target age bracket.\r\n12: Invalid target gender.\r\n13: Invalid target device type.\r\n14: Invalid ad set id.\r\n15: Ad name cannot exceed 255 characters.\r\n16: Insufficient Robux balance.\r\n17: Name has already been taken.\r\n18: Daily budget is higher than maximum allowed.\r\n19: Invalid group id.\r\n20: Number of days scheduled exceeded maximum days allowed.\r\n21: Your experience is currently not eligible for advertising.\r\n22: Invalid campaign target ID.\r\n23: Invalid campaign target type.\r\n24: Invalid creative ID.\r\n25: Invalid creative type.\r\n28: Total budget must be campaign duration * daily bid\r\n29: The target is not eligible for new campaigns\r\n30: Invalid user ID"
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n10: Insufficient permissions."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n31: Internal server error"
          },
          "503": {
            "description": "1: This feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/post_v2_sponsored_campaigns_create"
        }
      }
    },
    "/v2/sponsored-campaigns/eligible-campaign-targets": {
      "post": {
        "tags": ["Sponsored campaigns"],
        "summary": "Returns a collection of Roblox.AdConfiguration.Api.Models.CampaignTargetModel that the user is authorized to sponsor, ordered by most recently advertised",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.GetEligibleCampaignTargetsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.GetEligibleCampaignTargetsRequest"
              }
            }
          },
          "description": "Roblox.AdConfiguration.Api.Models.GetEligibleCampaignTargetsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.GetCampaignTargetsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.GetCampaignTargetsResponse"
                }
              }
            }
          },
          "400": {
            "description": "19: Invalid group id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n10: Insufficient permissions."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/post_v2_sponsored_campaigns_eligible_campaign_targets"
        }
      }
    },
    "/v2/sponsored-campaigns/stop": {
      "post": {
        "tags": ["Sponsored campaigns"],
        "summary": "Stops a sponsored campaign / ad (ad set) from running. Initiated by a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.StopSponsoredCampaignRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.StopSponsoredCampaignRequest"
              }
            }
          },
          "description": "Roblox.AdConfiguration.Api.Models.StopSponsoredCampaignRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "10: Insufficient permissions.\r\n14: Invalid ad set id.\r\n31: Internal server error"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "1: This feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/post_v2_sponsored_campaigns_stop"
        }
      }
    },
    "/v2/sponsored-games/create": {
      "post": {
        "tags": ["Sponsored campaigns"],
        "summary": "Creates a new sponsored game ad with specified input parameters.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.CreateSponsoredGameV2Request"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.CreateSponsoredGameV2Request"
              }
            }
          },
          "description": "Roblox.AdConfiguration.Api.CreateSponsoredGameV2Request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: Daily budget is lower than minimum allowed.\r\n3: Total budget must be greater than 0.\r\n4: Ad name cannot be empty.\r\n5: Start date must not be a future date.\r\n6: End date must be a future date.\r\n7: Start date must be earlier than end date.\r\n8: Total budget does not match daily spend and number of days being scheduled\r\n9: Cannot load the universe for the specified universe id.\r\n11: Invalid target age bracket.\r\n12: Invalid target gender.\r\n13: Invalid target device type.\r\n14: Invalid ad set id.\r\n15: Ad name cannot exceed 255 characters.\r\n16: Insufficient Robux balance.\r\n17: Name has already been taken.\r\n18: Daily budget is higher than maximum allowed.\r\n19: Invalid group id.\r\n20: Number of days scheduled exceeded maximum days allowed.\r\n21: Your experience is currently not eligible for advertising.\r\n22: Invalid campaign target ID.\r\n23: Invalid campaign target type.\r\n24: Invalid creative ID.\r\n25: Invalid creative type.\r\n28: Total budget must be campaign duration * daily bid\r\n29: The target is not eligible for new campaigns\r\n30: Invalid user ID"
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n10: Insufficient permissions."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n31: Internal server error"
          },
          "503": {
            "description": "1: This feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/post_v2_sponsored_games_create"
        }
      }
    },
    "/v2/sponsored-games/stop": {
      "post": {
        "tags": ["Sponsored campaigns"],
        "summary": "To stop a sponsored-game ad (ad set) from running, initiated by a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.StopSponsoredGameV2Request"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.StopSponsoredGameV2Request"
              }
            }
          },
          "description": "Roblox.AdConfiguration.Api.Models.StopSponsoredGameV2Request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid ad set id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n10: Insufficient permissions."
          },
          "503": {
            "description": "1: This feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://adconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/sponsored-campaigns#/default/post_v2_sponsored_games_stop"
        }
      }
    },
    "/v2/alias/{alias}": {
      "get": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "path",
            "name": "alias",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+\\/.+"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_alias__alias_"
        }
      }
    },
    "/v2/asset": {
      "get": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userAssetId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "assetVersionId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "universeId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assetName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "marAssetHash",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "marCheckSum",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "permissionContext",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doNotFallbackToBaselineRepresentation",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contentRepresentationPriorityList",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_asset"
        }
      }
    },
    "/v2/assetId/{assetId}": {
      "get": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "doNotFallbackToBaselineRepresentation",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contentRepresentationPriorityList",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_assetId__assetId_"
        }
      }
    },
    "/v2/assetId/{assetId}/version/{versionNumber}": {
      "get": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "versionNumber",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "doNotFallbackToBaselineRepresentation",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contentRepresentationPriorityList",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_assetId__assetId__version__versionNumber_"
        }
      }
    },
    "/v2/marAssetHash/{marAssetHash}/marCheckSum/{marCheckSum}": {
      "get": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "path",
            "name": "marAssetHash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "marCheckSum",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_marAssetHash__marAssetHash__marCheckSum__marCheckSum_"
        }
      }
    },
    "/v2/assets/batch": {
      "post": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.BatchAssetRequestItem"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.BatchAssetRequestItem"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV2"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v2_assets_batch"
        }
      }
    },
    "/v1/alias/{alias}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Retrieves an asset by its alias (universeID/name)",
        "parameters": [
          {
            "in": "path",
            "name": "alias",
            "description": "The alias of the asset to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+\\/.+"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_alias__alias_"
        }
      }
    },
    "/v1/asset": {
      "get": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userAssetId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "assetVersionId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "universeId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assetName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "marAssetHash",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "marCheckSum",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "permissionContext",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doNotFallbackToBaselineRepresentation",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contentRepresentationPriorityList",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_asset"
        }
      }
    },
    "/v1/assetId/{assetId}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Retrieves an asset by its ID",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "The ID of the asset to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "doNotFallbackToBaselineRepresentation",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contentRepresentationPriorityList",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_assetId__assetId_"
        }
      }
    },
    "/v1/assetId/{assetId}/version/{versionNumber}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Retrieves an asset by its ID and version number.",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "The ID of the asset to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "versionNumber",
            "description": "The version of the asset to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "doNotFallbackToBaselineRepresentation",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contentRepresentationPriorityList",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_assetId__assetId__version__versionNumber_"
        }
      }
    },
    "/v1/marAssetHash/{marAssetHash}/marCheckSum/{marCheckSum}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Retrieves an asset by its mar (moderation agnostic) hash and mar (moderation agnostic) checksum.",
        "parameters": [
          {
            "in": "path",
            "name": "marAssetHash",
            "description": "The mar (moderation agnostic) hash of the asset to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "marCheckSum",
            "description": "The mar (moderation agnostic) checksum of the asset to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept-Encoding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "AssetType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-AssetFormat",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skipSigningScripts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "clientInsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "scriptinsert",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "modulePlaceId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "serverplaceid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "expectedAssetType",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                }
              }
            }
          },
          "400": {
            "description": "2: invalid server request\r\n3: Encoding cannot be empty"
          },
          "404": {
            "description": "5: Asset hash cannot be empty"
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_marAssetHash__marAssetHash__marCheckSum__marCheckSum_"
        }
      }
    },
    "/v1/assets/batch": {
      "post": {
        "tags": ["Assets"],
        "parameters": [
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.BatchAssetRequestItem"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.Web.Assets.BatchAssetRequestItem"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Web.Assets.AssetResponseItemV1"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://assetdelivery.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_assets_batch"
        }
      }
    },
    "/v3/logout": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Destroys the current authentication session while reporting metrics like url and reason for logout.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.LogoutV3Request"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.LogoutV3Request"
              }
            }
          },
          "description": "The logout request with postBody which includes reason, url, and userIdString.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v3_logout"
        }
      }
    },
    "/v3/users/{userId}/two-step-verification/login": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Authenticates as a user given a two step verification verification token.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID to authenticate as.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.TwoStepVerificationLoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.TwoStepVerificationLoginRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.TwoStepVerificationLoginRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.TwoStepVerificationV3LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.TwoStepVerificationV3LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User is invalid.\r\n5: Invalid two step verification ticket.\r\n10: Invalid verification token."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: Maxium logged in accounts limit reached."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v3_users__userId__two_step_verification_login"
        }
      }
    },
    "/v2/auth/metadata": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Gets Auth meta data",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AuthMetaDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AuthMetaDataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_auth_metadata"
        }
      }
    },
    "/v2/metadata": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Get the metadata",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.MetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.MetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_metadata"
        }
      }
    },
    "/v2/passwords/current-status": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Returns password status for current user, asynchronously.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_passwords_current_status"
        }
      }
    },
    "/v2/passwords/reset": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Gets metadata needed for the password reset view.",
        "parameters": [
          {
            "in": "query",
            "name": "TargetType",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2]
            }
          },
          {
            "in": "query",
            "name": "Ticket",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Request was empty.\r\n9: The target type is invalid.\r\n11: The password reset ticket is invalid.\r\n14: The nonce is invalid."
          },
          "403": {
            "description": "11: The password reset ticket is invalid.\r\n16: The ticket is expired."
          },
          "500": {
            "description": "0: Unknown error occured."
          },
          "503": {
            "description": "1: Feature temporarily disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_passwords_reset"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Resets a password for a user that belongs to the password reset ticket.",
        "description": "This will log the user out of all sessions and re-authenticate.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetModel"
              }
            }
          },
          "description": "The request model including the target type, ticket, user id, and new password, Roblox.Authentication.Api.Models.PasswordResetModel",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Request was empty.\r\n11: The password reset ticket is invalid.\r\n12: The user is invalid.\r\n20: The password is invalid.\r\n21: Passwords do not match."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n16: The ticket is expired.\r\n17: The nonce is expired."
          },
          "500": {
            "description": "0: Unknown error occured."
          },
          "503": {
            "description": "1: Feature temporarily disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_passwords_reset"
        }
      }
    },
    "/v2/passwords/validate": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Endpoint for checking if a password is valid.",
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "Password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Valid Username and Password are required. Please try again."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_passwords_validate"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for checking if a password is valid.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationModel"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.PasswordValidationModel.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Valid Username and Password are required. Please try again."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_passwords_validate"
        }
      }
    },
    "/v2/recovery/metadata": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Get metadata for forgot endpoints",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoveryMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoveryMetadataResponse"
                }
              }
            }
          },
          "503": {
            "description": "7: The Roblox WeChat API is currently unavailable."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_recovery_metadata"
        }
      }
    },
    "/v2/revert/account": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get Revert Account ticket info",
        "parameters": [
          {
            "in": "query",
            "name": "ticket",
            "description": "Ticket Guid to revert account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The account revert ticket is not valid"
          },
          "503": {
            "description": "1: This feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_revert_account"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Submit Revert Account Request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountSubmitRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountSubmitRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.RevertAccountSubmitRequest containing the necessary information to revert account.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The account revert ticket is not valid\r\n3: Password is not valid\r\n4: Passwords do not match\r\n5: Password cannot be used\r\n8: The account security ticket is expired."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "0: Unknown\r\n1: This feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_revert_account"
        }
      }
    },
    "/v2/usernames": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets a list of existing usernames on Roblox based on the query parameters",
        "description": "This endpoint can be expanded in the future to include other query parameters such as \"startsWith\"",
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "description": "The username",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernamesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernamesResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_usernames"
        }
      }
    },
    "/v2/usernames/validate": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Checks if a username is valid.",
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "Birthday",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "Context",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: A valid username is required.\r\n2: A valid birthday or authenticated user is required."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_usernames_validate"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Checks if a username is valid.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.UsernameValidationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: A valid username is required.\r\n2: A valid birthday or authenticated user is required."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_usernames_validate"
        }
      }
    },
    "/v2/identity-verification/login": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for login with identity verification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.IdentityVerificationLoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.IdentityVerificationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Invalid login ticket.\r\n2: Invalid result token.\r\n3: Invalid user.\r\n4: Authentication failure."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_identity_verification_login"
        }
      }
    },
    "/v2/login": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Authenticates a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            }
          },
          "description": "Roblox.Authentication.Api.Models.LoginRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n3: Username and Password are required. Please try again.\r\n8: Login with received credential type is not supported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n2: You must pass the robot test before logging in.\r\n4: Account has been locked. Please request a password reset.\r\n5: Unable to login. Please use Social Network sign on.\r\n6: Account issue. Please contact Support.\r\n9: Unable to login with provided credentials. Default login is required.\r\n10: Received credentials are unverified.\r\n12: Existing login session found. Please log out first.\r\n14: The account is unable to log in. Please log in to the LuoBu app.\r\n15: Too many attempts. Please wait a bit.\r\n27: The account is unable to login. Please log in with the VNG app."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "11: Service unavailable. Please try again."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_login"
        }
      }
    },
    "/v2/login/linked": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for logging in a user, specifically for linked\r\nauthentication on PCGDK",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            }
          },
          "description": "Roblox.Authentication.Api.Models.LoginRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n3: Username and Password are required. Please try again.\r\n8: Login with received credential type is not supported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n2: You must pass the robot test before logging in.\r\n4: Account has been locked. Please request a password reset.\r\n5: Unable to login. Please use Social Network sign on.\r\n6: Account issue. Please contact Support.\r\n9: Unable to login with provided credentials. Default login is required.\r\n10: Received credentials are unverified.\r\n12: Existing login session found. Please log out first.\r\n14: The account is unable to log in. Please log in to the LuoBu app.\r\n15: Too many attempts. Please wait a bit.\r\n27: The account is unable to login. Please log in with the VNG app."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "11: Service unavailable. Please try again."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_login_linked"
        }
      }
    },
    "/v2/logout": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Destroys the current authentication session.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_logout"
        }
      }
    },
    "/v2/logoutfromallsessionsandreauthenticate": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Logs out user from all other sessions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.LogoutFromAllSessionsAndReauthenticateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.LogoutFromAllSessionsAndReauthenticateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_logoutfromallsessionsandreauthenticate"
        }
      }
    },
    "/v2/passwords/reset/send": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Sends a password reset email or challenge to the specified target.",
        "description": "Phone target must be a csv with 3 values: \"internationalPrefixNumber,nationalNumber,countryCode\"",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SendResetPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SendResetPasswordRequest"
              }
            }
          },
          "description": "The request model containing the target type and a target.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SendResetPasswordResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SendResetPasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Request was empty.\r\n9: The target type is invalid.\r\n10: The target is invalid.\r\n12: The user is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: Captcha is required.\r\n23: Authenticate with Luobu instead."
          },
          "429": {
            "description": "2: Too many attempts. Please try again later."
          },
          "500": {
            "description": "0: Unknown error occured.\r\n19: Message could not be sent."
          },
          "503": {
            "description": "1: Feature temporarily disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_passwords_reset_send"
        }
      }
    },
    "/v2/passwords/reset/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verifies a password reset challenge solution.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetVerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetVerificationRequest"
              }
            }
          },
          "description": "The request model containing the nonce and the solution. Roblox.Authentication.Api.Models.PasswordResetVerificationRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetVerificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordResetVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Request was empty.\r\n9: The target type is invalid.\r\n14: The nonce is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n13: The code is invalid."
          },
          "500": {
            "description": "0: Unknown error occured."
          },
          "503": {
            "description": "1: Feature temporarily disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_passwords_reset_verify"
        }
      }
    },
    "/v2/session/refresh": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Logs out user from the current session and create a new one.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_session_refresh"
        }
      }
    },
    "/v2/signup": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for signing up a new user",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Authentication.Api.Models.SignupRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\r\n16: User agreement ids are null.\r\n21: Empty account switch blob required"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: Captcha Failed.\r\n4: Invalid Birthday.\r\n5: Invalid Username.\r\n6: Username already taken.\r\n7: Invalid Password.\r\n8: Password and Username are same.\r\n9: Password is too simple.\r\n10: Email is invalid.\r\n11: Asset is invalid.\r\n12: Too many attempts. Please wait a bit.\r\n17: One time Passcode session was not valid\r\n22: Maximum logged in accounts limit reached."
          },
          "429": {
            "description": "3: Too many attempts. Please wait a bit."
          },
          "500": {
            "description": "Internal server error\r\n15: Insert acceptances failed.\r\n27: Pre-auth passkey registration failed"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_signup"
        }
      }
    },
    "/v2/signup/linked": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for signing up a new user, specifically for linked\r\nauthentication on PCGDK",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Authentication.Api.Models.SignupRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\r\n16: User agreement ids are null.\r\n21: Empty account switch blob required"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: Captcha Failed.\r\n4: Invalid Birthday.\r\n5: Invalid Username.\r\n6: Username already taken.\r\n7: Invalid Password.\r\n8: Password and Username are same.\r\n9: Password is too simple.\r\n10: Email is invalid.\r\n11: Asset is invalid.\r\n12: Too many attempts. Please wait a bit.\r\n17: One time Passcode session was not valid\r\n22: Maximum logged in accounts limit reached."
          },
          "429": {
            "description": "3: Too many attempts. Please wait a bit."
          },
          "500": {
            "description": "Internal server error\r\n15: Insert acceptances failed.\r\n27: Pre-auth passkey registration failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_signup_linked"
        }
      }
    },
    "/v2/user/passwords/change": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Changes the password for the authenticated user.",
        "description": "The current password is needed for verification that the password can be changed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordChangeModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordChangeModel"
              }
            }
          },
          "description": "The request model including the current password, and the new password.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.InvalidCurrentPassword\r\n            OR\r\n            Roblox.Web.Authentication.Passwords.PasswordResponseCodes.InvalidPassword"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.PinLocked\r\n0: Token Validation Failed"
          },
          "429": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.Flooded"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_user_passwords_change"
        }
      }
    },
    "/v2/username": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Change the user's username",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameChangeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameChangeRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.UsernameChangeRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "5: You don't have enough Robux to change your username.\r\n10: This username is already in use\r\n11: Username not appropriate for Roblox\r\n12: Usernames can be 3 to 20 characters long\r\n13: Usernames can’t start or end with _ and can have at most one _\r\n14: Only a-z, A-Z, 0-9, and _ are allowed\r\n15: Username is null\r\n16: Username might contain private information\r\n17: This username is not available\r\n18: Username is same as current"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: PIN is locked.\r\n2: A verified email is missing\r\n3: Your password is incorrect.\r\n100: Unknown birthday"
          },
          "500": {
            "description": "0: An unknown error occured.\r\n5: You don't have enough Robux to change your username."
          },
          "503": {
            "description": "4: The feature is currently not available. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_username"
        }
      }
    },
    "/v2/usernames/recover": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Sends an email of all accounts belonging to an email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameResponse"
                }
              }
            }
          },
          "400": {
            "description": "20: Invalid Email\r\n21: Invalid Phone\r\n23: No Account Found"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: Too many attempts. Please wait a bit."
          },
          "500": {
            "description": "0: An unexpected error occurred."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v2_usernames_recover"
        }
      }
    },
    "/v1/account/pin": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets the account pin status.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_account_pin"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Request to create the account pin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.AccountPinRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_account_pin"
        }
      },
      "delete": {
        "tags": ["Accounts"],
        "summary": "Request for deletes the account pin from the account.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/delete_v1_account_pin"
        }
      },
      "patch": {
        "tags": ["Accounts"],
        "summary": "Request made to update the account pin on the account.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/patch_v1_account_pin"
        }
      }
    },
    "/v1/auth/metadata": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Gets Auth meta data",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AuthMetaDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AuthMetaDataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_auth_metadata"
        }
      }
    },
    "/v1/client-assertion": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Creates a client assertion to be used when generating an auth ticket.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.GetClientAssertionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.GetClientAssertionResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_client_assertion"
        }
      }
    },
    "/v1/external/{identityProviderId}/sso/oauth/callback": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Callback function that external identity provider calls post user authentication.",
        "parameters": [
          {
            "in": "path",
            "name": "identityProviderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_external__identityProviderId__sso_oauth_callback"
        }
      }
    },
    "/v1/external/{identityProviderId}/sso/oauth/init": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Signs a user up for Roblox and links the account to the authenticated external provider ID.",
        "parameters": [
          {
            "in": "path",
            "name": "identityProviderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_external__identityProviderId__sso_oauth_init"
        }
      }
    },
    "/v1/metadata#AuthenticationApi": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Get the metadata",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.MetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.MetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_metadata"
        }
      }
    },
    "/v1/passwords/validate": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Endpoint for checking if a password is valid.",
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "Password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Valid Username and Password are required. Please try again."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_passwords_validate"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for checking if a password is valid.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationModel"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.PasswordValidationModel.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Valid Username and Password are required. Please try again."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passwords_validate"
        }
      }
    },
    "/v1/recovery/metadata": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Get metadata for forgot endpoints",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoveryMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoveryMetadataResponse"
                }
              }
            }
          },
          "503": {
            "description": "7: The Roblox WeChat API is currently unavailable."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_recovery_metadata"
        }
      }
    },
    "/v1/revert/account": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get Revert Account ticket info",
        "parameters": [
          {
            "in": "query",
            "name": "ticket",
            "description": "Ticket Guid to revert account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The account revert ticket is not valid"
          },
          "503": {
            "description": "1: This feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_revert_account"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Submit Revert Account Request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountSubmitRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RevertAccountSubmitRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.RevertAccountSubmitRequest containing the necessary information to revert account.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The account revert ticket is not valid\r\n3: Password is not valid\r\n4: Passwords do not match\r\n5: Password cannot be used\r\n8: The account security ticket is expired."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "0: Unknown\r\n1: This feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_revert_account"
        }
      }
    },
    "/v1/social/connected-providers": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get social network user information if the given social auth method is connected to current user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SocialProvidersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SocialProvidersResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_social_connected_providers"
        }
      }
    },
    "/v1/usernames": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets a list of existing usernames on Roblox based on the query parameters",
        "description": "This endpoint can be expanded in the future to include other query parameters such as \"startsWith\"",
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "description": "The username",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernamesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernamesResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_usernames"
        }
      }
    },
    "/v1/usernames/validate": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Checks if a username is valid.",
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "Birthday",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "Context",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: A valid username is required.\r\n2: A valid birthday or authenticated user is required."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_usernames_validate"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Checks if a username is valid.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.UsernameValidationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: A valid username is required.\r\n2: A valid birthday or authenticated user is required."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_usernames_validate"
        }
      }
    },
    "/v1/validators/email": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Tries to check if an email is valid",
        "parameters": [
          {
            "in": "query",
            "name": "Email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.EmailValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.EmailValidationResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_validators_email"
        }
      }
    },
    "/v1/validators/recommendedUsernameFromDisplayName": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Validates the given display name, and if valid, will convert it to a valid username and return suggested username(s) if available.",
        "parameters": [
          {
            "in": "query",
            "name": "DisplayName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "BirthDay",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_validators_recommendedUsernameFromDisplayName"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Validates the given display name, and if valid, will convert it to a valid username and return suggested username(s) if available.\r\n            \r\nThis is a POST request and explicitly does not receive the parameter values from the query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameFromDisplayNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameFromDisplayNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_validators_recommendedUsernameFromDisplayName"
        }
      }
    },
    "/v1/validators/username": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Tries to get a valid username if the current username is taken",
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "BirthDay",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_validators_username"
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Tries to get a valid username if the current username is taken\r\nThis is a POST request and explicitly does not receive the parameter values from the query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_validators_username"
        }
      }
    },
    "/v1/xbox/connection": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Check if the current user has an Xbox connected.\r\nAlso returns the gamertag of the Xbox account if connected.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxConnectionModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxConnectionModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": ""
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_xbox_connection"
        }
      }
    },
    "/v1/xbox/get-login-consecutive-days": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get the consecutive days the xbox user has been logged in.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxLoginConsecutiveDaysResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxLoginConsecutiveDaysResponse"
                }
              }
            }
          },
          "400": {
            "description": "36: Invalid Xbox Live Account"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": ""
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_xbox_get_login_consecutive_days"
        }
      }
    },
    "/v1/account/pin/lock": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Request to locks the account which has an account pin enabled.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_account_pin_lock"
        }
      }
    },
    "/v1/account/pin/unlock": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Requests to unlock the account pin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.AccountPinRequest containing the entered pin.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountPinResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_account_pin_unlock"
        }
      }
    },
    "/v1/external/access": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Signs a user up for Roblox and links the account to the authenticated external provider ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalAccessRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.ExternalIdentityGateway.ExternalIdentityAccessResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_external_access"
        }
      }
    },
    "/v1/external/login": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Logs in a user to Roblox based on the user's authenticated external provider session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalLoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.ExternalIdentityGateway.ExternalLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "30: Platform is not supported for SSO login."
          },
          "401": {
            "description": "31: No linked account found for SSO login."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unexpected error occurred."
          },
          "501": {
            "description": "0: An unexpected error occurred."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_external_login"
        }
      }
    },
    "/v1/external/loginAndLink": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Deprecated endpoint\r\nLogins in a user to Roblox, then links the Roblox account to the external provider ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalLoginAndLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalLoginAndLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_external_loginAndLink"
        }
      }
    },
    "/v1/external/signup": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Signs a user up for Roblox and links the account to the authenticated external provider ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalSignupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalSignupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_external_signup"
        }
      }
    },
    "/v1/external/unlink": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Unlink the logged in Roblox account from the current external provider ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalUnlinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ExternalUnlinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_external_unlink"
        }
      }
    },
    "/v1/identity-verification/login": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for login with identity verification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.IdentityVerificationLoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.IdentityVerificationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Invalid login ticket.\r\n2: Invalid result token.\r\n3: Invalid user.\r\n4: Authentication failure."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_identity_verification_login"
        }
      }
    },
    "/v1/identity/initialize-login": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Initiates identifier-first login flow by returning a list of login methods for user(s).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.InitializeLoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.InitializeLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.InitializeLoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.InitializeLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: User identifier and type are required."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: Invalid user identifier."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "1: This feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_identity_initialize_login"
        }
      }
    },
    "/v1/login": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Authenticates a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            }
          },
          "description": "Roblox.Authentication.Api.Models.LoginRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n3: Username and Password are required. Please try again.\r\n8: Login with received credential type is not supported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n2: You must pass the robot test before logging in.\r\n4: Account has been locked. Please request a password reset.\r\n5: Unable to login. Please use Social Network sign on.\r\n6: Account issue. Please contact Support.\r\n9: Unable to login with provided credentials. Default login is required.\r\n10: Received credentials are unverified.\r\n12: Existing login session found. Please log out first.\r\n14: The account is unable to log in. Please log in to the LuoBu app.\r\n15: Too many attempts. Please wait a bit.\r\n27: The account is unable to login. Please log in with the VNG app."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "11: Service unavailable. Please try again."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_login"
        }
      }
    },
    "/v1/login/linked": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for logging in a user, specifically for linked\r\nauthentication on PCGDK",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginRequest"
              }
            }
          },
          "description": "Roblox.Authentication.Api.Models.LoginRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n3: Username and Password are required. Please try again.\r\n8: Login with received credential type is not supported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n2: You must pass the robot test before logging in.\r\n4: Account has been locked. Please request a password reset.\r\n5: Unable to login. Please use Social Network sign on.\r\n6: Account issue. Please contact Support.\r\n9: Unable to login with provided credentials. Default login is required.\r\n10: Received credentials are unverified.\r\n12: Existing login session found. Please log out first.\r\n14: The account is unable to log in. Please log in to the LuoBu app.\r\n15: Too many attempts. Please wait a bit.\r\n27: The account is unable to login. Please log in with the VNG app."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "11: Service unavailable. Please try again."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_login_linked"
        }
      }
    },
    "/v1/logout": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Destroys the current authentication session.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_logout"
        }
      }
    },
    "/v1/logoutfromallsessionsandreauthenticate": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Logs out user from all other sessions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.LogoutFromAllSessionsAndReauthenticateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.LogoutFromAllSessionsAndReauthenticateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_logoutfromallsessionsandreauthenticate"
        }
      }
    },
    "/v1/passkey/DeleteCredentialBatch": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Disables a batch of credentials for the specified user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.DeletePasskeysRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.DeletePasskeysRequest"
              }
            }
          },
          "description": "The request body!:DisableTwoStepVerificationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n0: An unknown error occurred with the request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_DeleteCredentialBatch"
        }
      }
    },
    "/v1/passkey/finish-preauth-registration": {
      "post": {
        "tags": ["Accounts"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.FinishPasskeyPreauthRegistrationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.FinishPasskeyPreauthRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "0: An unknown error occurred with the request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n0: An unknown error occurred with the request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Reached limit of pass keys registered."
          },
          "500": {
            "description": "0: An unknown error occurred with the request."
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_finish_preauth_registration"
        }
      }
    },
    "/v1/passkey/FinishRegistration": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Complete Passkey registration by providing credential creation options.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.FinishPasskeyRegistrationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.FinishPasskeyRegistrationRequest"
              }
            }
          },
          "description": "The request body.Roblox.Authentication.Api.Models.Request.FinishPasskeyRegistrationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "0: An unknown error occurred with the request.\r\n3: Invalid security key nickname."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n0: An unknown error occurred with the request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: Invalid security key nickname."
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_FinishRegistration"
        }
      }
    },
    "/v1/passkey/ListCredentials": {
      "post": {
        "tags": ["Accounts"],
        "summary": "List a user's registered passkeys.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ListPasskeysRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.ListPasskeysRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.ListPasskeyCredentialResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.ListPasskeyCredentialResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n0: An unknown error occurred with the request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_ListCredentials"
        }
      }
    },
    "/v1/passkey/start-authentication-by-user": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Initializes passkey authentication for the user(s) corresponding to the identifier provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.StartAuthenticationByUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.StartAuthenticationByUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartAuthenticationByUserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartAuthenticationByUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "5: User identifier and type are required.\r\n6: Multi-user passkey authentication is not supported for this credential type."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: No passkeys registered for any users found."
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_start_authentication_by_user"
        }
      }
    },
    "/v1/passkey/start-preauth-registration": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Initiates  Passkey preauthenticated registration by providing credential creation options.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.StartPasskeyPreauthRegistrationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.StartPasskeyPreauthRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartPasskeyPreauthRegistrationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartPasskeyPreauthRegistrationResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_start_preauth_registration"
        }
      }
    },
    "/v1/passkey/StartAuthentication": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Provides a challenge for the Passkey to authenticate.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartAuthenticationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartAuthenticationResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_StartAuthentication"
        }
      }
    },
    "/v1/passkey/StartRegistration": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Initiates Passkey registration by providing credential creation options.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartPasskeyRegistrationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.StartPasskeyRegistrationResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n0: An unknown error occurred with the request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Reached limit of pass keys registered."
          },
          "503": {
            "description": "2: Feature disabled."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_passkey_StartRegistration"
        }
      }
    },
    "/v1/session/refresh": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Logs out user from the current session and create a new one.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_session_refresh"
        }
      }
    },
    "/v1/signup": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for signing up a new user",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Authentication.Api.Models.SignupRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\r\n16: User agreement ids are null.\r\n21: Empty account switch blob required"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: Captcha Failed.\r\n4: Invalid Birthday.\r\n5: Invalid Username.\r\n6: Username already taken.\r\n7: Invalid Password.\r\n8: Password and Username are same.\r\n9: Password is too simple.\r\n10: Email is invalid.\r\n11: Asset is invalid.\r\n12: Too many attempts. Please wait a bit.\r\n17: One time Passcode session was not valid\r\n22: Maximum logged in accounts limit reached."
          },
          "429": {
            "description": "3: Too many attempts. Please wait a bit."
          },
          "500": {
            "description": "Internal server error\r\n15: Insert acceptances failed.\r\n27: Pre-auth passkey registration failed"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_signup"
        }
      }
    },
    "/v1/signup/linked": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Endpoint for signing up a new user, specifically for linked\r\nauthentication on PCGDK",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Authentication.Api.Models.SignupRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\r\n16: User agreement ids are null.\r\n21: Empty account switch blob required"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: Captcha Failed.\r\n4: Invalid Birthday.\r\n5: Invalid Username.\r\n6: Username already taken.\r\n7: Invalid Password.\r\n8: Password and Username are same.\r\n9: Password is too simple.\r\n10: Email is invalid.\r\n11: Asset is invalid.\r\n12: Too many attempts. Please wait a bit.\r\n17: One time Passcode session was not valid\r\n22: Maximum logged in accounts limit reached."
          },
          "429": {
            "description": "3: Too many attempts. Please wait a bit."
          },
          "500": {
            "description": "Internal server error\r\n15: Insert acceptances failed.\r\n27: Pre-auth passkey registration failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_signup_linked"
        }
      }
    },
    "/v1/social/{provider}/disconnect": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Removes the given social authentication method from current Roblox user if it is connected.",
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "description": "The social authentication provider, e.g. Facebook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SocialAuthenticationDisconnectRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SocialAuthenticationDisconnectRequest"
              }
            }
          },
          "description": "The request body for additional parameters that may be required for disconnect",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\r\n2: Unsupported social provider type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Forbidden\r\n0: Token Validation Failed\r\n3: Cannot disconnect the only authentication method. Password on account is required.\r\n4: The password provided is invalid."
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_social__provider__disconnect"
        }
      }
    },
    "/v1/user/passwords/change": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Changes the password for the authenticated user.",
        "description": "The current password is needed for verification that the password can be changed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordChangeModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.PasswordChangeModel"
              }
            }
          },
          "description": "The request model including the current password, and the new password.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.InvalidCurrentPassword\r\n            OR\r\n            Roblox.Web.Authentication.Passwords.PasswordResponseCodes.InvalidPassword"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.PinLocked\r\n0: Token Validation Failed"
          },
          "429": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.Flooded"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_user_passwords_change"
        }
      }
    },
    "/v1/username": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Change the user's username",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameChangeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.UsernameChangeRequest"
              }
            }
          },
          "description": "The Roblox.Authentication.Api.Models.UsernameChangeRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "5: You don't have enough Robux to change your username.\r\n10: This username is already in use\r\n11: Username not appropriate for Roblox\r\n12: Usernames can be 3 to 20 characters long\r\n13: Usernames can’t start or end with _ and can have at most one _\r\n14: Only a-z, A-Z, 0-9, and _ are allowed\r\n15: Username is null\r\n16: Username might contain private information\r\n17: This username is not available\r\n18: Username is same as current"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: PIN is locked.\r\n2: A verified email is missing\r\n3: Your password is incorrect.\r\n100: Unknown birthday"
          },
          "500": {
            "description": "0: An unknown error occured.\r\n5: You don't have enough Robux to change your username."
          },
          "503": {
            "description": "4: The feature is currently not available. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_username"
        }
      }
    },
    "/v1/usernames/recover": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Sends an email of all accounts belonging to an email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.RecoverUsernameResponse"
                }
              }
            }
          },
          "400": {
            "description": "20: Invalid Email\r\n21: Invalid Phone\r\n23: No Account Found"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: Too many attempts. Please wait a bit."
          },
          "500": {
            "description": "0: An unexpected error occurred."
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_usernames_recover"
        }
      }
    },
    "/v1/xbox/disconnect": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Unlink the current ROBLOX account from the Xbox live account.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Forbidden\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_xbox_disconnect"
        }
      }
    },
    "/v1/xbox/translate": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Translate the xbox user to roblox user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxTranslateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxTranslateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxCollectionsOfUserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxCollectionsOfUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://auth.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_xbox_translate"
        }
      }
    },
    "/v1/avatar": {
      "get": {
        "tags": ["Avatars"],
        "summary": "Returns details about the authenticated user's avatar.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV2"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_avatar"
        }
      }
    },
    "/v1/avatar-rules": {
      "get": {
        "tags": ["Avatars"],
        "summary": "Returns the business rules related to avatars.",
        "description": "BodyColorsPalette is a list of valid brickColors you can choose for your avatar.\r\nWearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.\r\nDoes not include packages because they cannot be worn on your avatar directly.\r\nPlayerAvatarTypes are the types of avatars you can choose between.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarRulesModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarRulesModel"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_avatar_rules"
        }
      }
    },
    "/v1/avatar/metadata": {
      "get": {
        "tags": ["Avatars", "Metadata"],
        "summary": "Returns metadata used by the avatar page of the website.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarMetadataModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarMetadataModel"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_avatar_metadata"
        }
      }
    },
    "/v1/game-start-info": {
      "get": {
        "tags": ["Avatars", "Universes"],
        "summary": "The server will call this on game server start to request general information about the universe\r\nThis is version 1.1, which returns an entry from the UniverseAvatarType enum.\r\nDuring mixed mode this may return unreliable results.",
        "parameters": [
          {
            "in": "query",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.GameStartInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.GameStartInfoResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_game_start_info"
        }
      }
    },
    "/v1/outfits/{userOutfitId}/details": {
      "get": {
        "tags": ["Avatars"],
        "summary": "Gets details about the contents of an outfit.",
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitDetailsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified userOutfitId is invalid.\r\n2: The outfit for the specified userOutfit is invalid."
          },
          "403": {
            "description": "3: The requester does not have access to the details for the given user outfit."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_outfits__userOutfitId__details"
        }
      }
    },
    "/v1/users/{userId}/avatar": {
      "get": {
        "tags": ["Avatars", "User profiles", "Users"],
        "summary": "Returns details about a specified user's avatar.",
        "description": "Includes assets, bodycolors, and playerAvatarType.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV2"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist.\r\n2: An account for the given userId does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_users__userId__avatar"
        }
      }
    },
    "/v1/users/{userId}/currently-wearing": {
      "get": {
        "tags": ["Assets", "Avatars", "User profiles", "Users"],
        "summary": "Gets a list of asset ids that the user is currently wearing.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetIdListModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetIdListModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist.\r\n2: An account for the given userId does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_users__userId__currently_wearing"
        }
      }
    },
    "/v1/users/{userId}/outfits": {
      "get": {
        "tags": ["Avatars", "Users"],
        "summary": "Deprecated, user v2.\r\nGets a list of outfits for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "outfitType",
            "description": "The outfit type being searched for, null will return all outfitTypes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the current page of requests, default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "itemsPerPage",
            "description": "The max number of outfits that can be returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "isEditable",
            "description": "Whether the outfits are editable. A null value will lead to no filtering.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarFilteredPageResponse_Roblox.Api.Avatar.Models.OutfitModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarFilteredPageResponse_Roblox.Api.Avatar.Models.OutfitModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist.\r\n2: An account for the given userId does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_users__userId__outfits"
        }
      }
    },
    "/v1/avatar/redraw-thumbnail": {
      "post": {
        "tags": ["Avatars", "Thumbnails", "User profiles"],
        "summary": "Requests the authenticated user's thumbnail be redrawn.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "1: Redrawing your avatar thumbnail is floodchecked at this time.\r\n1: Redrawing your avatar thumbnail is floodchecked at this time"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v1_avatar_redraw_thumbnail"
        }
      }
    },
    "/v1/avatar/set-body-colors": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Sets the authenticated user's body colors.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColorsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColorsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v1_avatar_set_body_colors"
        }
      }
    },
    "/v1/avatar/set-player-avatar-type": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Sets the authenticated user's player avatar type (e.g. R6 or R15).",
        "description": "This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.PlayerAvatarTypeModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.PlayerAvatarTypeModel"
              }
            }
          },
          "description": "R6 or R15.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid playerAvatarType. Valid values are: "
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not allowed to change player avatar type."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v1_avatar_set_player_avatar_type"
        }
      }
    },
    "/v1/avatar/set-scales": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Sets the authenticated user's scales.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Please pass in the scales JSON"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: The user does not have permissions to change scales."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v1_avatar_set_scales"
        }
      }
    },
    "/v1/avatar/set-wearing-assets": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Sets the avatar's current assets to the list\r\n- Flagged as obsolete, does not support layered clothing meta params.",
        "description": "Only allows items that you own, are not expired, and are wearable asset types.\r\nAny assets being worn before this method is called are automatically removed.\n\nUse v2/avatar/set-wearing-assets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetIdListModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetIdListModel"
              }
            }
          },
          "description": "The list of asset IDs.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.WearResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.WearResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid assetId"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "2: Failed to wear asset."
          }
        },
        "deprecated": true,
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v1_avatar_set_wearing_assets"
        }
      }
    },
    "/v1/outfits/{userOutfitId}/delete": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Deletes the outfit.",
        "description": "You are only allowed to delete outfits you created.",
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified userOutfitId is invalid!"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You don't have permission to delete this outfit."
          },
          "500": {
            "description": "3: An error occurred while deleting the outfit."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v1_outfits__userOutfitId__delete"
        }
      }
    },
    "/v2/avatar/avatar": {
      "get": {
        "tags": ["Avatars"],
        "summary": "Returns details about the authenticated user's avatar.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV3"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV3"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v2_avatar_avatar"
        }
      }
    },
    "/v2/avatar/users/{userId}/avatar": {
      "get": {
        "tags": ["Avatars", "Users"],
        "summary": "Returns details about a specified user's avatar.",
        "description": "Includes assets, bodycolors, and playerAvatarType.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV3"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarModelV3"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist.\r\n2: An account for the given userId does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v2_avatar_users__userId__avatar"
        }
      }
    },
    "/v2/avatar/users/{userId}/outfits": {
      "get": {
        "tags": ["Avatars", "Users"],
        "summary": "Gets a list of outfits for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "paginationToken",
            "description": "The token received from the response to get the next page. For the first request, this value should be empty. Note : If no value is sent the 1st page will be returned.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "outfitType",
            "description": "The outfit type being searched for, null will return all outfitTypes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the current page of requests, default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "itemsPerPage",
            "description": "The max number of outfits that can be returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "isEditable",
            "description": "Whether the outfits are editable. A null value will lead to no filtering.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarPageResponse_Roblox.Api.Avatar.Models.OutfitModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarPageResponse_Roblox.Api.Avatar.Models.OutfitModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist.\r\n2: An account for the given userId does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v2_avatar_users__userId__outfits"
        }
      }
    },
    "/v2/avatar/set-body-colors": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Sets the authenticated user's body colors.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Platform.Avatar.BodyColorsModelV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Platform.Avatar.BodyColorsModelV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v2_avatar_set_body_colors"
        }
      }
    },
    "/v2/avatar/set-wearing-assets": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Sets the avatar's current assets to the list.",
        "description": "Only allows items that you own, are not expired, and are wearable asset types.\r\nAny assets being worn before this method is called are automatically removed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.WearRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.WearRequestModel"
              }
            }
          },
          "description": "Model of assets to be worn.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.WearResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.WearResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid assetId\r\n5: Meta does not apply to specified asset type\r\n7: Required meta is not provided for the specific asset type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "2: Failed to wear asset."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v2_avatar_set_wearing_assets"
        }
      }
    },
    "/v2/outfits/{userOutfitId}/update": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Updates the contents of the outfit.",
        "description": "Fails if the user does not own any of the assetIds or if they are not wearable asset types.",
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified userOutfit does not exist!\r\n3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you\r\n7: Invalid assetIds\r\n8: Invalid Player Avatar Type. Valid types are R6 and R15"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You don't have permission to update this outfit."
          },
          "500": {
            "description": "6: An error occurred while trying to update the outfit"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v2_outfits__userOutfitId__update"
        }
      }
    },
    "/v2/outfits/create": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Creates a new outfit.",
        "description": "Fails if any of the assetIds are not owned by the user, or not wearable types.\r\nThe name property of the request is optional as one will be auto-generated when the request has a null name.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
              }
            }
          },
          "description": "The new outfit.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you and was not added to the outfit\r\n7: Invalid Player Avatar Type. Valid types are R6 and R15\r\n8: Invalid assetIds\r\n9: Meta does not apply to specified asset type\r\n10: Required meta is not provided for the specific asset type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: You already have the maximum number of outfits"
          },
          "500": {
            "description": "6: An error occurred while creating the outfit"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v2_outfits_create"
        }
      }
    },
    "/v2/outfits/{userOutfitId}": {
      "patch": {
        "tags": ["Avatars"],
        "summary": "Updates the contents of an outfit.",
        "description": "Fails if the user does not own any of the assetIds or if they are not wearable asset types.\r\nAccepts partial updates.\n\nPlease use PATCH v3/outfits/{userOutfitId}",
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified userOutfit does not exist!\r\n1: Must provide both assetIds and bodyColors in to update outfit contents.\r\n3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you\r\n8: Invalid Player Avatar Type. Valid types are R6 and R15\r\n11: Meta does not apply to specified asset type\r\n12: Meta is required for this specific asset type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You don't have permission to update this outfit."
          },
          "500": {
            "description": "6: An error occurred while trying to update the outfit"
          }
        },
        "deprecated": true,
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/patch_v2_outfits__userOutfitId_"
        }
      }
    },
    "/v3/outfits/{userOutfitId}/details": {
      "get": {
        "tags": ["Avatars"],
        "summary": "Gets details about the contents of an outfit.",
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitDetailsModelV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitDetailsModelV2"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified userOutfitId is invalid.\r\n2: The outfit for the specified userOutfit is invalid."
          },
          "403": {
            "description": "3: The requester does not have access to the details for the given user outfit."
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v3_outfits__userOutfitId__details"
        }
      }
    },
    "/v3/outfits/create": {
      "post": {
        "tags": ["Avatars"],
        "summary": "Creates a new outfit.",
        "description": "Fails if any of the assetIds are not owned by the user, or not wearable types.\r\nThe name property of the request is optional as one will be auto-generated when the request has a null name.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV3"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV3"
              }
            }
          },
          "description": "The new outfit.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
                }
              }
            }
          },
          "400": {
            "description": "3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you and was not added to the outfit\r\n7: Invalid Player Avatar Type. Valid types are R6 and R15\r\n8: Invalid assetIds\r\n9: Meta does not apply to specified asset type\r\n10: Required meta is not provided for the specific asset type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: You already have the maximum number of outfits"
          },
          "500": {
            "description": "6: An error occurred while creating the outfit"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/post_v3_outfits_create"
        }
      }
    },
    "/v3/outfits/{userOutfitId}": {
      "patch": {
        "tags": ["Avatars"],
        "summary": "Updates the contents of an outfit.",
        "description": "Fails if the user does not own any of the assetIds or if they are not wearable asset types.\r\nAccepts partial updates.",
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV3"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV3"
              }
            }
          },
          "description": "The updated outfit.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified userOutfit does not exist!\r\n1: Must provide both assetIds and bodyColors in to update outfit contents.\r\n3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you\r\n8: Invalid Player Avatar Type. Valid types are R6 and R15\r\n11: Meta does not apply to specified asset type\r\n12: Meta is required for this specific asset type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You don't have permission to update this outfit."
          },
          "500": {
            "description": "6: An error occurred while trying to update the outfit"
          }
        },
        "servers": [
          {
            "url": "https://avatar.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/patch_v3_outfits__userOutfitId_"
        }
      }
    },
    "/v1/badges/{badgeId}": {
      "get": {
        "tags": ["Badges"],
        "summary": "Gets badge information by the badge Id.",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Badges.Api.BadgeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Badges.Api.BadgeResponse"
                }
              }
            }
          },
          "404": {
            "description": "1: Badge is invalid or does not exist.\r\n3: The game is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_badges__badgeId_"
        }
      },
      "patch": {
        "tags": ["Badges"],
        "summary": "Updates badge configuration.",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Badges.Api.UpdateBadgeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Badges.Api.UpdateBadgeRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "6: Text moderated.\r\n14: Invalid badge name.\r\n15: Invalid badge description."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to manage this badge."
          },
          "404": {
            "description": "1: Badge is invalid or does not exist.\r\n3: The game is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/patch_v1_badges__badgeId_"
        }
      }
    },
    "/legacy-badges/v1/badges/{badgeId}": {
      "patch": {
        "tags": ["Badges"],
        "summary": "Updates badge configuration.",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Badges.Api.UpdateBadgeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Badges.Api.UpdateBadgeRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "6: Text moderated.\r\n14: Invalid badge name.\r\n15: Invalid badge description."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to manage this badge."
          },
          "404": {
            "description": "1: Badge is invalid or does not exist.\r\n3: The game is invalid or does not exist."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe.badge:write"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/patch_legacy_badges_v1_badges__badgeId_"
        }
      }
    },
    "/v1/badges/metadata": {
      "get": {
        "tags": ["Badges", "Metadata"],
        "summary": "Gets metadata about the badges system.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Badges.Api.BadgeMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Badges.Api.BadgeMetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_badges_metadata"
        }
      }
    },
    "/v1/universes/{universeId}/badges": {
      "get": {
        "tags": ["Badges", "Universes"],
        "summary": "Gets badges by their awarding game.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "description": "The key to sort badges by.",
            "schema": {
              "type": "string",
              "enum": ["Rank", "DateCreated"]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Badges.Api.BadgeResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Badges.Api.BadgeResponse_"
                }
              }
            }
          },
          "404": {
            "description": "3: The game is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_universes__universeId__badges"
        }
      },
      "post": {
        "tags": ["Badges"],
        "summary": "Creates a new badge.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The ID of the universe to create the badge for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The badge name.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The badge description.",
                    "type": "string"
                  },
                  "paymentSourceType": {
                    "description": "Whether or not to pay for the badge with user funds, or group funds. ['User' = 1, 'Group' = 2]",
                    "type": "integer",
                    "format": "int32",
                    "enum": [1, 2]
                  },
                  "files": {
                    "description": "The badge icon.",
                    "type": "string",
                    "format": "binary"
                  },
                  "expectedCost": {
                    "description": "User expected cost of a badge.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "isActive": {
                    "description": "Whether or not the badge should be created in the active state.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Badges.BadgeResponseV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Badges.BadgeResponseV2"
                }
              }
            }
          },
          "400": {
            "description": "11: The badge icon is invalid.\r\n14: Invalid badge name.\r\n15: Invalid badge description.\r\n16: Payment source is invalid.\r\n18: Expected badge cost is different from the actual badge cost."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: Text moderated.\r\n12: You do not have permission to manage this game's badges.\r\n17: Insufficient funds."
          },
          "404": {
            "description": "3: The game is invalid or does not exist."
          },
          "429": {
            "description": "13: Too many requests, try again later."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/post_v1_universes__universeId__badges"
        }
      }
    },
    "/legacy-badges/v1/universes/{universeId}/badges": {
      "post": {
        "tags": ["Badges", "Universes"],
        "summary": "Creates a new badge.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The ID of the universe to create the badge for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The badge name.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The badge description.",
                    "type": "string"
                  },
                  "paymentSourceType": {
                    "description": "Whether or not to pay for the badge with user funds, or group funds. ['User' = 1, 'Group' = 2]",
                    "type": "integer",
                    "format": "int32",
                    "enum": [1, 2]
                  },
                  "files": {
                    "description": "The badge icon.",
                    "type": "string",
                    "format": "binary"
                  },
                  "expectedCost": {
                    "description": "User expected cost of a badge.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "isActive": {
                    "description": "Whether or not the badge should be created in the active state.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Badges.BadgeResponseV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Badges.BadgeResponseV2"
                }
              }
            }
          },
          "400": {
            "description": "11: The badge icon is invalid.\r\n14: Invalid badge name.\r\n15: Invalid badge description.\r\n16: Payment source is invalid.\r\n18: Expected badge cost is different from the actual badge cost."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: Text moderated.\r\n12: You do not have permission to manage this game's badges.\r\n17: Insufficient funds."
          },
          "404": {
            "description": "3: The game is invalid or does not exist."
          },
          "429": {
            "description": "13: Too many requests, try again later."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe.badge:manage-and-spend-robux"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/post_legacy_badges_v1_universes__universeId__badges"
        }
      }
    },
    "/v1/universes/{universeId}/free-badges-quota": {
      "get": {
        "tags": ["Badges", "Universes"],
        "summary": "Gets the number of free badges left for the current UTC day by their awarding game.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "3: The game is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_universes__universeId__free_badges_quota"
        }
      }
    },
    "/v1/users/{userId}/badges": {
      "get": {
        "tags": ["Badges", "User profiles", "Users"],
        "summary": "Gets a list of badges a user has been awarded.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Badges.Api.GetBadgesByUserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Badges.Api.GetBadgesByUserResponse_"
                }
              }
            }
          },
          "404": {
            "description": "4: User is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_users__userId__badges"
        }
      }
    },
    "/v1/users/{userId}/badges/{badgeId}/awarded-date": {
      "get": {
        "tags": ["Badges", "Users"],
        "summary": "Gets timestamp for when a single badge was awarded to a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "badgeId",
            "description": "Badge id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "4: User is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_users__userId__badges__badgeId__awarded_date"
        }
      }
    },
    "/v1/users/{userId}/badges/awarded-dates": {
      "get": {
        "tags": ["Badges", "Users"],
        "summary": "Gets timestamps for when badges were awarded to a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "badgeIds",
            "description": "The CSV of badge Ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Badges.Api.BadgeAwardResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Badges.Api.BadgeAwardResponse_"
                }
              }
            }
          },
          "400": {
            "description": "5: Too many badge Ids."
          },
          "404": {
            "description": "4: User is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_users__userId__badges_awarded_dates"
        }
      }
    },
    "/v1/badges/{badgeId}/icon": {
      "post": {
        "summary": "Overwrites a badge icon with a new one.",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Files": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Badges.Api.IconUploadResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Badges.Api.IconUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "6: Text moderated.\r\n22: Icon file is not present in the request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to manage this badge."
          },
          "404": {
            "description": "1: Badge is invalid or does not exist."
          },
          "429": {
            "description": "13: Too many requests, try again later."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/user/{userId}/badges/{badgeId}": {
      "delete": {
        "tags": ["Badges", "Users"],
        "summary": "Removes a badge from the user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "404": {
            "description": "1: Badge is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/delete_v1_user__userId__badges__badgeId_"
        }
      }
    },
    "/v1/user/badges/{badgeId}": {
      "delete": {
        "tags": ["Badges"],
        "summary": "Removes a badge from the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "404": {
            "description": "1: Badge is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://badges.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/delete_v1_user_badges__badgeId_"
        }
      }
    },
    "/v1/asset-to-category": {
      "get": {
        "tags": ["Assets", "Avatars"],
        "summary": "Lists a mapping for assets to category IDs to convert from inventory ID to catalog ID. Creates a mapping to link 'Get More' button in inventory page to the relevant catalog page.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_asset_to_category"
        }
      }
    },
    "/v1/asset-to-subcategory": {
      "get": {
        "tags": ["Assets", "Avatars"],
        "summary": "Lists a mapping for assets to subcategory IDs to convert from inventory ID to catalog ID. Creates a mapping to link 'Get More' button in inventory page to the relevant catalog page.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_asset_to_subcategory"
        }
      }
    },
    "/v1/assets/{assetId}/bundles": {
      "get": {
        "tags": ["Assets", "Avatars"],
        "summary": "Lists the bundles a particular asset belongs to. Use the Id of the last bundle in the response to get the next page.",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.BundleDetailsModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.BundleDetailsModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid assetId\r\n4: Invalid Cursor."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_assets__assetId__bundles"
        }
      }
    },
    "/v1/bundles/{bundleId}/details": {
      "get": {
        "tags": ["Assets", "Avatars"],
        "summary": "Returns details about the given bundleId.",
        "parameters": [
          {
            "in": "path",
            "name": "bundleId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleDetailsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid bundle"
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_bundles__bundleId__details"
        }
      }
    },
    "/v1/bundles/{bundleId}/recommendations": {
      "get": {
        "tags": ["Assets", "Avatars"],
        "summary": "Gets recommendations for a given bundle, bundleId of 0 returns randomized bundles\r\n- Accepts both public and authenticated users.",
        "parameters": [
          {
            "in": "path",
            "name": "bundleId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "numItems",
            "description": "The number of recommended items to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Catalog.Api.BundleDetailsModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Catalog.Api.BundleDetailsModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid bundle\r\n2: Error retrieving bundles\r\n3: Error getting bundle recommendations\r\n4: NumItems exceed maximum"
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_bundles__bundleId__recommendations"
        }
      }
    },
    "/v1/bundles/details": {
      "get": {
        "tags": ["Assets", "Avatars"],
        "summary": "Returns details about the given bundleIds.",
        "parameters": [
          {
            "in": "query",
            "name": "bundleIds",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleDetailsModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleDetailsModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "3: Cannot request so many bundles at once."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_bundles_details"
        }
      }
    },
    "/v1/categories": {
      "get": {
        "tags": ["Assets", "Avatars", "Metadata"],
        "summary": "Lists Category Names and their Ids.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Catalog.Api.CategoryModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Catalog.Api.CategoryModel"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_categories"
        }
      }
    },
    "/v1/favorites/assets/{assetId}/count": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions"],
        "summary": "Gets the favorite count for the given asset Id.",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid asset Id."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_favorites_assets__assetId__count"
        }
      }
    },
    "/v1/favorites/bundles/{bundleId}/count": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions"],
        "summary": "Gets the favorite count for the given bundle Id.",
        "parameters": [
          {
            "in": "path",
            "name": "bundleId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid bundle Id."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_favorites_bundles__bundleId__count"
        }
      }
    },
    "/v1/favorites/users/{userId}/assets/{assetId}/favorite": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Gets the favorite model for the asset and user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "assetId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.AssetFavoriteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.AssetFavoriteModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid asset Id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_favorites_users__userId__assets__assetId__favorite"
        }
      },
      "post": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Create a favorite for an asset by the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "assetId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid asset Id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are not authorized to perform this action."
          },
          "409": {
            "description": "3: Asset is already favorited."
          },
          "429": {
            "description": "5: This action was floodchecked. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_favorites_users__userId__assets__assetId__favorite"
        }
      },
      "delete": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Delete a favorite for an asset by the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "assetId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid asset Id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are not authorized to perform this action."
          },
          "409": {
            "description": "4: Asset is already not favorited."
          },
          "429": {
            "description": "5: This action was floodchecked. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/delete_v1_favorites_users__userId__assets__assetId__favorite"
        }
      }
    },
    "/v1/favorites/users/{userId}/bundles/{bundleId}/favorite": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Gets the favorite model for the bundle and user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "bundleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleFavoriteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleFavoriteModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid bundle Id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_favorites_users__userId__bundles__bundleId__favorite"
        }
      },
      "post": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Create a favorite for the bundle by the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "bundleId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid bundle Id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are not authorized to perform this action."
          },
          "409": {
            "description": "3: Bundle is already favorited."
          },
          "429": {
            "description": "5: This action was floodchecked. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_favorites_users__userId__bundles__bundleId__favorite"
        }
      },
      "delete": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Delete favorite for the bundle by the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "bundleId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid bundle Id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are not authorized to perform this action."
          },
          "409": {
            "description": "4: Bundle is already not favorited."
          },
          "429": {
            "description": "5: This action was floodchecked. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/delete_v1_favorites_users__userId__bundles__bundleId__favorite"
        }
      }
    },
    "/v1/favorites/users/{userId}/favorites/{assetTypeId}/assets": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Lists the marketplace assets favorited by a given user with the given assetTypeId.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "assetTypeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 18, 24, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItem_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItem_"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n8: Ascending order is not allowed.\r\n11: Invalid asset type id."
          },
          "500": {
            "description": "99: Internal server error."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_favorites_users__userId__favorites__assetTypeId__assets"
        }
      }
    },
    "/v1/favorites/users/{userId}/favorites/{subtypeId}/bundles": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Lists the bundles favorited by a given user with the given bundle subtypeId.Switched to EAAS style pagination cursors since July 2024.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "subtypeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "itemsPerPage",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 24
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isPrevious",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.FavoriteBundlesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.FavoriteBundlesResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n3: Cannot request so many bundles at once.\r\n10: Invalid previous pagination request. Please provide a cursor when isPrevious is true"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "6: You are not authorized to perform this action."
          },
          "500": {
            "description": "11: Internal server error. Please check if you have provided correct pagination cursor"
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_favorites_users__userId__favorites__subtypeId__bundles"
        }
      }
    },
    "/v1/subcategories": {
      "get": {
        "tags": ["Assets", "Avatars", "Metadata"],
        "summary": "Lists Subcategory Names and their Ids.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_subcategories"
        }
      }
    },
    "/v1/users/{userId}/bundles": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "summary": "Lists the bundles owned by a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2],
              "default": 2
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.OwnedBundleModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.OwnedBundleModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid bundle"
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_users__userId__bundles"
        }
      }
    },
    "/v1/users/{userId}/bundles/{bundleType}": {
      "get": {
        "tags": ["Assets", "Avatars", "Interactions", "Users"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "bundleType",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2, 3, 4]
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2],
              "default": 2
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.OwnedBundleModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.OwnedBundleModel_"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_users__userId__bundles__bundleType_"
        }
      }
    },
    "/v1/catalog/items/details": {
      "post": {
        "tags": ["Assets", "Avatars"],
        "summary": "Returns list of item details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Catalog.Api.MultigetItemDetailsRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Catalog.Api.MultigetItemDetailsRequestModel"
              }
            }
          },
          "description": "Roblox.Catalog.Api.MultigetItemDetailsRequestModel.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2_"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid count"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n7: User is unauthorized."
          },
          "429": {
            "description": "8: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_catalog_items_details"
        }
      }
    },
    "/v1/topic/get-topics": {
      "post": {
        "tags": ["Assets", "Avatars"],
        "summary": "Get topic given TopicRequestModel.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Catalog.Api.TopicRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Catalog.Api.TopicRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.TopicResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.TopicResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_topic_get_topics"
        }
      }
    },
    "/v2/search/items/details": {
      "get": {
        "tags": ["Assets", "Avatars"],
        "summary": "Search for catalog items.",
        "description": "This endpoint is for search by item type ids.",
        "parameters": [
          {
            "in": "query",
            "name": "AssetTypeIds",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "BundleTypeIds",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "CategoryFilter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3, 4, 5, 6]
            }
          },
          {
            "in": "query",
            "name": "SortAggregation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3, 4, 5]
            }
          },
          {
            "in": "query",
            "name": "SortType",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3, 4, 5]
            }
          },
          {
            "in": "query",
            "name": "CreatorType",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2]
            }
          },
          {
            "in": "query",
            "name": "CreatorTargetId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "CreatorName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "MaxPrice",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "MinPrice",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "Keyword",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "IncludeNotForSale",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "TriggeredByTopicDiscovery",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "SalesTypeFilter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3]
            }
          },
          {
            "in": "query",
            "name": "Topics",
            "description": "The input topics format is split by \",\". E.g \"topics=cat,hat,red\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 28, 30, 60, 120],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Desc"],
              "default": "Desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.CatalogSearchPageResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Catalog.Api.CatalogSearchPageResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2_"
                }
              }
            }
          },
          "400": {
            "description": "1: Category subcategory selection not supported.\r\n2: Creator id not found.\r\n3: Creator type not found or cannot search by CreatorTargetId with CreatorType.All\r\n4: Genre not found.\r\n5: Sort combination not supported.\r\n6: Invalid price range.\r\n10: StartRequest is invalid."
          },
          "403": {
            "description": "7: User is unauthorized.\r\n22: In-experience search is denied for this place or universe."
          },
          "429": {
            "description": "8: The flood limit has been exceeded.\r\n8: The flood limit has been exceeded."
          },
          "503": {
            "description": "18: Search request timed out"
          }
        },
        "servers": [
          {
            "url": "https://catalog.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_search_items_details"
        }
      }
    },
    "/v1/contacts/metadata": {
      "get": {
        "tags": ["Users"],
        "summary": "Gets contextual information for contacts and usertags",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Contacts.Api.Models.Response.ContactsMetadataResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Contacts.Api.Models.Response.ContactsMetadataResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://contacts.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/get_v1_contacts_metadata"
        }
      }
    },
    "/v1/user/tag/validate": {
      "get": {
        "tags": ["Users"],
        "summary": "Validates the tag for a user",
        "parameters": [
          {
            "in": "query",
            "name": "alias",
            "description": "The tag to validate",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Contacts.Api.Response.ValidateUserTagResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Contacts.Api.Response.ValidateUserTagResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "4: Invalid parameters."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "429": {
            "description": "10: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://contacts.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/get_v1_user_tag_validate"
        }
      }
    },
    "/v1/user/get-tags": {
      "post": {
        "tags": ["Users"],
        "summary": "Gets the tags for multiple users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Contacts.Api.Request.GetUserTagsRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Contacts.Api.Request.GetUserTagsRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Contacts.Api.Response.GetUserTagsResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Contacts.Api.Response.GetUserTagsResponseModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "4: Invalid parameters.\r\n8: Too many user Tags are requested."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "429": {
            "description": "10: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://contacts.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/post_v1_user_get_tags"
        }
      }
    },
    "/v1/user/tag": {
      "post": {
        "tags": ["Users"],
        "summary": "Sets the tag for a user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Contacts.Api.Request.SetUserTagRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Contacts.Api.Request.SetUserTagRequestModel"
              }
            }
          },
          "description": "The tag receiving userId and the tag itself",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Contacts.Api.Response.SetUserTagResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Contacts.Api.Response.SetUserTagResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: The target user is invalid or does not exist.\r\n4: Invalid parameters.\r\n6: The userTag is too long."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: The user cannot tag themselves."
          },
          "429": {
            "description": "10: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://contacts.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/post_v1_user_tag"
        }
      }
    },
    "/v2/client-version/{binaryType}": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Get client version information for specific binary type",
        "parameters": [
          {
            "in": "path",
            "name": "binaryType",
            "description": "Platform(WindowsPlayer, WindowsStudio, MacPlayer or MacStudio) for which we want the latest version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.ClientVersionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.ClientVersionResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_client_version__binaryType_"
        }
      }
    },
    "/v2/client-version/{binaryType}/channel/{channelName}": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Get client version information for specific binary type",
        "parameters": [
          {
            "in": "path",
            "name": "binaryType",
            "description": "Platform(WindowsPlayer, WindowsStudio, MacPlayer or MacStudio) for which we want the latest version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "channelName",
            "description": "Channel Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.ClientVersionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.ClientVersionResponse"
                }
              }
            }
          },
          "401": {
            "description": "5: Not authorized to perform this action."
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_client_version__binaryType__channel__channelName_"
        }
      }
    },
    "/v2/compression-dictionaries": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Returns a listing of all known compression dictionaries, including their SHA256 and creation date.\r\nThis will be sorted by creation date, with the most recent dictionaries first.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_compression_dictionaries"
        }
      }
    },
    "/v2/compression-dictionaries/{dictionarySha256}": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Returns the specified compression dictionary as a file download.",
        "parameters": [
          {
            "in": "path",
            "name": "dictionarySha256",
            "description": "The SHA256 of the dictionary we wish to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_compression_dictionaries__dictionarySha256_"
        }
      }
    },
    "/v2/ota-version/{binaryType}": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Get OTA information for a specific binary type with a given version on some channel.\r\nReturns empty list if no updates are found or channel/application with the given version does not exist in CVS.",
        "parameters": [
          {
            "in": "path",
            "name": "binaryType",
            "description": "Binary type of the application to get info for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "channel",
            "description": "Channel name. If not provided, production is assumed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "description": "Application version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.OtaVersionResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.OtaVersionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid binaryType.\r\n4: Invalid app version.\r\n6: Missing or invalid channel.\r\n7: Unsupported binaryType."
          },
          "401": {
            "description": "5: Not authorized to perform this action."
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_ota_version__binaryType_"
        }
      }
    },
    "/v2/user-channel": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Get channel name for currently logged in user",
        "parameters": [
          {
            "in": "query",
            "name": "binaryType",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.UserChannelResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.UserChannelResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_user_channel"
        }
      }
    },
    "/v1/client-version/{binaryType}": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Get client version information for specific binary type",
        "parameters": [
          {
            "in": "path",
            "name": "binaryType",
            "description": "Platform(WindowsPlayer, WindowsStudio, MacPlayer or MacStudio) for which we want the latest version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.ClientVersionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.ClientVersionResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v1_client_version__binaryType_"
        }
      }
    },
    "/v1/installer-cdns": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Get information about which CDNs to use for installation.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v1_installer_cdns"
        }
      }
    },
    "/v1/mobile-client-version": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Get mobile client version information based on app version parameter",
        "parameters": [
          {
            "in": "query",
            "name": "appVersion",
            "description": "AppiOSV2.13, AppVersioniOS2.0.1, etc",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.MobileClientVersionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ClientSettings.Api.Models.Response.MobileClientVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid binaryType."
          }
        },
        "servers": [
          {
            "url": "https://clientsettings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v1_mobile_client_version"
        }
      }
    },
    "/v2/assets/{id}/versions": {
      "get": {
        "tags": ["Assets"],
        "summary": "Retrieves asset information for the specified asset ID. The authenticated user must be able to manage the asset\r\nor granted by package permission.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the asset.Roblox.Platform.Assets.IAsset",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "description": "The ID of the place.Roblox.Platform.Assets.IPlace",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sort by version number, default is desc.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.AssetVersion_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.AssetVersion_"
                }
              }
            }
          }
        },
        "deprecated": true,
        "description": "Use OpenCloud Assets API instead.",
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_assets__id__versions"
        }
      }
    },
    "/v2/places/{placeId}": {
      "get": {
        "tags": ["Places"],
        "summary": "Gets the place configuration for the place with the id placeId",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place id for the place to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModelV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModelV2"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Authenticated user is not authorized to manage this place."
          },
          "404": {
            "description": "placeId Place not found."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/get_v2_places__placeId_"
        }
      },
      "patch": {
        "tags": ["Places"],
        "summary": "Updates the place configuration for the place with the id placeId",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place id for the place to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceConfigurationModelV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceConfigurationModelV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModelV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModelV2"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Authenticated user is not authorized to manage this place.\r\n0: Token Validation Failed"
          },
          "404": {
            "description": "placeId Place not found."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/patch_v2_places__placeId_"
        }
      }
    },
    "/v2/universes/{universeId}/configuration": {
      "patch": {
        "tags": ["Universes"],
        "summary": "Update universe settings for an owned universe.\r\nV2 Contains data for avatar scale and asset override.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universeId.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsRequestV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsRequestV2"
              }
            }
          },
          "description": "The Roblox.Api.Develop.Models.UniverseSettingsRequest model.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsResponseV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsResponseV2"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist.\r\n3: Invalid UniverseAvatarType.\r\n4: Invalid UniverseScaleType.\r\n5: Invalid UniverseAnimationType.\r\n6: Invalid UniverseCollisionType.\r\n7: New universe name or description has been rejected.\r\n8: New universe name is too long.\r\n10: Invalid UniverseBodyType.\r\n11: Invalid UniverseJointPositioningType.\r\n12: The universe has no root place.\r\n15: Price is required when isForSale is true.\r\n16: This game cannot be offered for sale because it is not public.\r\n17: This game cannot be offered for sale because it has private servers enabled.\r\n18: The game price is outside of the allowed range.\r\n19: Invalid genre.\r\n20: The request body is missing.\r\n21: Invalid device type.\r\n22: Invalid asset type.\r\n23: Invalid value, the min must be less than or equal to the max\r\n24: Invalid scale value\r\n28: OptIn/Out Regions Not Supported."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not authorized to configure this universe.\r\n14: You are not authorized to sell games.\r\n29: Luobu app terms of service user agreement is missing.\r\n30: Unknown error while updating Opt in out region."
          },
          "409": {
            "description": "9: Failed to shutdown all intances of game after changing AvatarType. The change has been reverted."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/patch_v2_universes__universeId__configuration"
        }
      }
    },
    "/legacy-develop/v2/teamtest/{placeId}": {
      "delete": {
        "tags": ["Places", "Team Create"],
        "summary": "Close a game instance that is being used for team testing",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The Id of the place we are setting the metadata for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "the Guid of the game instance System.Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-team-collaboration:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/delete_legacy_develop_v2_teamtest__placeId_"
        }
      }
    },
    "/v2/teamtest/{placeId}": {
      "delete": {
        "summary": "Close a game instance that is being used for team testing",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The Id of the place we are setting the metadata for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "the Guid of the game instance System.Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/assets/voting": {
      "get": {
        "tags": ["Assets", "Interactions"],
        "summary": "Gets the voting information of the given assets",
        "parameters": [
          {
            "in": "query",
            "name": "assetIds",
            "description": "The ids of the Roblox.Platform.Assets.IAsset.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.Response.AssetVotingModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.Response.AssetVotingModel_"
                }
              }
            }
          }
        },
        "deprecated": true,
        "description": "Please use toolbox service to get asset voting information.",
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_assets_voting"
        }
      }
    },
    "/v1/gametemplates": {
      "get": {
        "tags": ["Universes"],
        "summary": "Gets a page of templates that can be used to start off making games.",
        "description": "Templates subject to change without notice.\r\nSort order of templates specified by Roblox.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GameTemplateModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GameTemplateModel_"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_gametemplates"
        }
      }
    },
    "/v1/groups/{groupId}/universes": {
      "get": {
        "tags": ["Groups", "Universes"],
        "summary": "Gets a list of universes for the given group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "isArchived",
            "description": "Whether or not to return archived games.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by universeId",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.UniverseModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.UniverseModel_"
                }
              }
            }
          },
          "400": {
            "description": "Invalid groupId."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__universes"
        }
      }
    },
    "/legacy-develop/v1/places/{placeId}/teamcreate/active_session/members": {
      "get": {
        "tags": ["Places", "Team Create", "Universes"],
        "summary": "List of users in the active Team Create session",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Users.SkinnyUserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Users.SkinnyUserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe is invalid.\r\n5: The place is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: Not authorized to perform this action.\r\n4: TeamCreate on universe is disabled."
          },
          "404": {
            "description": "0: An unknown error occurred."
          },
          "500": {
            "description": "6: Multiple active sessions in a Team Create place."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-team-collaboration:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/get_legacy_develop_v1_places__placeId__teamcreate_active_session_members"
        }
      }
    },
    "/v1/places/{placeId}/teamcreate/active_session/members": {
      "get": {
        "summary": "List of users in the active Team Create session",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Users.SkinnyUserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Users.SkinnyUserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe is invalid.\r\n5: The place is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: Not authorized to perform this action.\r\n4: TeamCreate on universe is disabled."
          },
          "404": {
            "description": "0: An unknown error occurred."
          },
          "500": {
            "description": "6: Multiple active sessions in a Team Create place."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/plugins": {
      "get": {
        "tags": ["Assets"],
        "summary": "Gets plugin details by ids.",
        "parameters": [
          {
            "in": "query",
            "name": "pluginIds",
            "description": "The plugin ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Plugins.PluginResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Plugins.PluginResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: Too many ids.\r\n2: The format of the ids are invalid."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_plugins"
        }
      }
    },
    "/v1/universes/{universeId}": {
      "get": {
        "tags": ["Universes"],
        "summary": "Gets a Roblox.Api.Develop.Models.UniverseModel.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The Universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_universes__universeId_"
        }
      }
    },
    "/v1/universes/{universeId}/configuration": {
      "get": {
        "tags": ["Universes"],
        "summary": "Get settings for an owned universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You are not authorized to configure this universe."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_universes__universeId__configuration"
        }
      },
      "patch": {
        "tags": ["Universes"],
        "summary": "Update universe settings for an owned universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universeId.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsRequest"
              }
            }
          },
          "description": "The Roblox.Api.Develop.Models.UniverseSettingsRequest model.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist.\r\n3: Invalid UniverseAvatarType.\r\n4: Invalid UniverseScaleType.\r\n5: Invalid UniverseAnimationType.\r\n6: Invalid UniverseCollisionType.\r\n7: New universe name or description has been rejected.\r\n8: New universe name is too long.\r\n10: Invalid UniverseBodyType.\r\n11: Invalid UniverseJointPositioningType.\r\n12: The universe has no root place.\r\n15: Price is required when isForSale is true.\r\n16: This game cannot be offered for sale because it is not public.\r\n17: This game cannot be offered for sale because it has private servers enabled.\r\n18: The game price is outside of the allowed range.\r\n19: Invalid genre.\r\n20: The request body is missing.\r\n21: Invalid device type.\r\n22: Invalid asset type.\r\n23: Invalid value, the min must be less than or equal to the max\r\n24: Invalid scale value"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not authorized to configure this universe.\r\n14: You are not authorized to sell games."
          },
          "409": {
            "description": "9: Failed to shutdown all intances of game after changing AvatarType. The change has been reverted."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/patch_v1_universes__universeId__configuration"
        }
      }
    },
    "/v1/universes/{universeId}/configuration/vip-servers": {
      "get": {
        "tags": ["Private servers", "Universes"],
        "summary": "Get settings for an owned universe's VIP servers.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PrivateServerDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PrivateServerDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You are not authorized to configure this universe."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/get_v1_universes__universeId__configuration_vip_servers"
        }
      }
    },
    "/legacy-develop/v1/universes/{universeId}/permissions": {
      "get": {
        "tags": ["Universes"],
        "summary": "Returns list of granted and declined permissions related to the universe with the id universeId for authenticated user",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniversePermissionsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniversePermissionsModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_legacy_develop_v1_universes__universeId__permissions"
        }
      }
    },
    "/v1/universes/{universeId}/permissions": {
      "get": {
        "summary": "Returns list of granted and declined permissions related to the universe with the id universeId for authenticated user",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniversePermissionsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniversePermissionsModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/universes/{universeId}/places": {
      "get": {
        "tags": ["Places", "Universes"],
        "summary": "Gets a list of places for a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The asset id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "isUniverseCreation",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by placeId",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.IPlaceModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.IPlaceModel_"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/get_v1_universes__universeId__places"
        }
      }
    },
    "/legacy-develop/v1/universes/{universeId}/teamcreate": {
      "get": {
        "tags": ["Team Create", "Universes"],
        "summary": "Gets TeamCreate settings for an Roblox.Platform.Universes.IUniverse.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.Response.TeamCreateSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.Response.TeamCreateSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.Unauthorized"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-team-collaboration:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/team-create#/default/get_legacy_develop_v1_universes__universeId__teamcreate"
        }
      },
      "patch": {
        "tags": ["Team Create", "Universes"],
        "summary": "Edit team create settings for a universe.",
        "description": "Enables, or disables team create for a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.Unauthorized\r\n0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-team-collaboration:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/team-create#/default/patch_legacy_develop_v1_universes__universeId__teamcreate"
        }
      }
    },
    "/v1/universes/{universeId}/teamcreate": {
      "get": {
        "summary": "Gets TeamCreate settings for an Roblox.Platform.Universes.IUniverse.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.Response.TeamCreateSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.Response.TeamCreateSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.Unauthorized"
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "patch": {
        "summary": "Edit team create settings for a universe.",
        "description": "Enables, or disables team create for a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.Unauthorized\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/universes/multiget": {
      "get": {
        "tags": ["Universes"],
        "summary": "Gets a System.Collections.Generic.List`1.",
        "description": "If a universe can not be found for a given ID (such as -1) it will be skipped.",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "The universe IDs to get. Limit 100.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseModel_"
                }
              }
            }
          },
          "400": {
            "description": "8: No universe IDs sent to get.\r\n9: Too many universe IDs sent to get, the limit is: "
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_universes_multiget"
        }
      }
    },
    "/legacy-develop/v1/universes/multiget/permissions": {
      "get": {
        "tags": ["Universes"],
        "summary": "Returns an array of granted and declined permissions related to the universes with the ids in ids for the authenticated user.",
        "description": "If a universe can not be found for a given ID (such as -1) it will be skipped.",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "The universe ids.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseIdPermissionsModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseIdPermissionsModel_"
                }
              }
            }
          },
          "400": {
            "description": "8: No universe IDs sent to get.\r\n9: Too many universe IDs sent to get, the limit is: "
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_legacy_develop_v1_universes_multiget_permissions"
        }
      }
    },
    "/v1/universes/multiget/permissions": {
      "get": {
        "summary": "Returns an array of granted and declined permissions related to the universes with the ids in ids for the authenticated user.",
        "description": "If a universe can not be found for a given ID (such as -1) it will be skipped.",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "The universe ids.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseIdPermissionsModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseIdPermissionsModel_"
                }
              }
            }
          },
          "400": {
            "description": "8: No universe IDs sent to get.\r\n9: Too many universe IDs sent to get, the limit is: "
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-develop/v1/universes/multiget/teamcreate": {
      "get": {
        "tags": ["Team Create", "Universes"],
        "summary": "Gets TeamCreate settings for multiple universes specified by Ids",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "The universe Ids.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel_"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.TooManyUniverseIdsSent"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-team-collaboration:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/team-create#/default/get_legacy_develop_v1_universes_multiget_teamcreate"
        }
      }
    },
    "/v1/universes/multiget/teamcreate": {
      "get": {
        "summary": "Gets TeamCreate settings for multiple universes specified by Ids",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "The universe Ids.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel_"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.TooManyUniverseIdsSent"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-develop/v1/user/groups/canmanage": {
      "get": {
        "tags": ["Groups", "Users"],
        "summary": "Gets a list of Groups that a user can manage.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GroupModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GroupModel_"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_legacy_develop_v1_user_groups_canmanage"
        }
      }
    },
    "/v1/user/groups/canmanage": {
      "get": {
        "summary": "Gets a list of Groups that a user can manage.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GroupModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GroupModel_"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/user/groups/canmanagegamesoritems": {
      "get": {
        "tags": ["Assets", "Groups", "Universes", "Users"],
        "summary": "Gets a list of groups a user can manage games or items for.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GroupModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GroupModel_"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_user_groups_canmanagegamesoritems"
        }
      }
    },
    "/v1/user/universes": {
      "get": {
        "tags": ["Universes"],
        "summary": "Gets a list of universes for the authenticated user.",
        "parameters": [
          {
            "in": "query",
            "name": "isArchived",
            "description": "Whether or not to return archived games.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by universeId",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.UniverseModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.UniverseModel_"
                }
              }
            }
          },
          "400": {
            "description": "cursor is not valid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_user_universes"
        }
      }
    },
    "/v1/places/{placeId}": {
      "post": {
        "tags": ["Places"],
        "summary": "Updates the place configuration for the place with the id placeId",
        "description": "Currently the only supported functionality for updating the configuration is around Name, and Description.",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place id for the place to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Develop.Models.PlaceConfigurationModel"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModel"
                }
              }
            }
          },
          "400": {
            "description": "placeId is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Authenticated user is not authorized to manage this place.\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_places__placeId_"
        }
      },
      "patch": {
        "tags": ["Places"],
        "summary": "Updates the place configuration for the place with the id placeId",
        "description": "Currently the only supported functionality for updating the configuration is around Name, and Description.",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place id for the place to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Develop.Models.PlaceConfigurationModel"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceModel"
                }
              }
            }
          },
          "400": {
            "description": "placeId is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Authenticated user is not authorized to manage this place.\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/patch_v1_places__placeId_"
        }
      }
    },
    "/legacy-develop/v1/universes/{universeId}/activate": {
      "post": {
        "tags": ["Universes"],
        "summary": "Activates a universes.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist.\r\n2: This universe does not have a root place."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: You are not authorized to configure this universe.\r\n6: The root place for this universe is under review and can not be activated.\r\n7: Creator already has the maximum number of places active."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/post_legacy_develop_v1_universes__universeId__activate"
        }
      }
    },
    "/v1/universes/{universeId}/activate": {
      "post": {
        "summary": "Activates a universes.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist.\r\n2: This universe does not have a root place."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: You are not authorized to configure this universe.\r\n6: The root place for this universe is under review and can not be activated.\r\n7: Creator already has the maximum number of places active."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-develop/v1/universes/{universeId}/deactivate": {
      "post": {
        "tags": ["Universes"],
        "summary": "Deactivates a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist.\r\n2: This universe does not have a root place."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: You are not authorized to configure this universe."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/post_legacy_develop_v1_universes__universeId__deactivate"
        }
      }
    },
    "/v1/universes/{universeId}/deactivate": {
      "post": {
        "summary": "Deactivates a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The universe does not exist.\r\n2: This universe does not have a root place."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: You are not authorized to configure this universe."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/plugins/{pluginId}": {
      "patch": {
        "tags": ["Assets"],
        "summary": "Updates a plugin.",
        "parameters": [
          {
            "in": "path",
            "name": "pluginId",
            "description": "The id of the plugin.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Develop.Api.UpdatePluginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Develop.Api.UpdatePluginRequest"
              }
            }
          },
          "description": "The Roblox.Develop.Api.UpdatePluginRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "5: Description too long.\r\n6: Text moderated.\r\n7: Invalid name.\r\n8: The request body is missing."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: Insufficient permissions."
          },
          "404": {
            "description": "3: The id is invalid."
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/patch_v1_plugins__pluginId_"
        }
      }
    },
    "/legacy-develop/v1/universes/{universeId}/teamcreate/memberships": {
      "delete": {
        "tags": ["Team Create", "Universes"],
        "summary": "Removes a user from a TeamCreate permissions list.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Develop.Models.TeamCreateMembershipRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse OR Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUser"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.TeamCreateDisabled\r\n0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-team-collaboration:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/team-create#/default/delete_legacy_develop_v1_universes__universeId__teamcreate_memberships"
        }
      }
    },
    "/v1/universes/{universeId}/teamcreate/memberships": {
      "delete": {
        "summary": "Removes a user from a TeamCreate permissions list.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Api.Develop.Models.TeamCreateMembershipRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse OR Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUser"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.TeamCreateDisabled\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://develop.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/user/currency": {
      "get": {
        "tags": ["Localization"],
        "summary": "Gets currency for the authenticated user.",
        "description": "Currency can only be retrieved for the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Economy.CurrencyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Economy.CurrencyResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "1: The user is invalid."
          }
        },
        "servers": [
          {
            "url": "https://economy.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_user_currency"
        }
      }
    },
    "/v1/universes/{universeId}/stats": {
      "get": {
        "tags": ["Universes"],
        "summary": "Get statistics data for a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "Type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["PremiumUpsells", "PremiumVisits"]
            }
          },
          {
            "in": "query",
            "name": "StartTime",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "EndTime",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.EconomyCreatorStats.Api.Models.StatisticsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.EconomyCreatorStats.Api.Models.StatisticsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The Universe is invalid.\r\n3: Too many data points requested.\r\n4: The requested data type is not known."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n2: Not authorized to perform this action."
          }
        },
        "servers": [
          {
            "url": "https://economycreatorstats.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_universes__universeId__stats"
        }
      }
    },
    "/v1/universe-payout-history": {
      "get": {
        "tags": ["Universes"],
        "summary": "Gets the engagement payout history for a specific universe and a given date range, specified by start and end dates.",
        "parameters": [
          {
            "in": "query",
            "name": "universeId",
            "description": "The ID of the universe in question.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "The first date in the range, specified as yyyy-MM-dd.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "The last date in the range, specified as yyyy-MM-dd.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Roblox.EngagementPayouts.Api.PayoutResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Roblox.EngagementPayouts.Api.PayoutResponseModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "1: InvalidUniverseId\r\n2: InvalidStartDate\r\n3: InvalidEndDate\r\n4: InvalidDateRange\r\n5: Forbidden\r\n6: TooManyDays"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://engagementpayouts.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_universe_payout_history"
        }
      }
    },
    "/legacy-followings/v1/users/{userId}/universes": {
      "get": {
        "tags": ["Interactions", "Universes", "Users"],
        "summary": "Gets all the followings between a user with userId and universes",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe.following:read"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_legacy_followings_v1_users__userId__universes"
        }
      }
    },
    "/v1/users/{userId}/universes": {
      "get": {
        "summary": "Gets all the followings between a user with userId and universes",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action."
          }
        },
        "servers": [
          {
            "url": "https://followings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-followings/v1/users/{userId}/universes/{universeId}/status": {
      "get": {
        "tags": ["Interactions", "Universes", "Users"],
        "summary": "Gets the status of a following relationship between a user and a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe.following:read"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_legacy_followings_v1_users__userId__universes__universeId__status"
        }
      }
    },
    "/v1/users/{userId}/universes/{universeId}/status": {
      "get": {
        "summary": "Gets the status of a following relationship between a user and a universe.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action."
          }
        },
        "servers": [
          {
            "url": "https://followings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-followings/v1/users/{userId}/universes/{universeId}": {
      "post": {
        "tags": ["Interactions", "Universes", "Users"],
        "summary": "Creates the following between a user with userId and universe with universeId",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              }
            }
          },
          "400": {
            "description": "The user has reached the limit of number of followed universes."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action.\r\n0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe.following:write"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/post_legacy_followings_v1_users__userId__universes__universeId_"
        }
      },
      "delete": {
        "tags": ["Interactions", "Universes", "Users"],
        "summary": "Deletes the following between a user with userId and universe with universeId",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action.\r\n0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe.following:write"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/delete_legacy_followings_v1_users__userId__universes__universeId_"
        }
      }
    },
    "/v1/users/{userId}/universes/{universeId}": {
      "post": {
        "summary": "Creates the following between a user with userId and universe with universeId",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              }
            }
          },
          "400": {
            "description": "The user has reached the limit of number of followed universes."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action.\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://followings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "delete": {
        "summary": "Deletes the following between a user with userId and universe with universeId",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.UserFollowingUniverseResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action.\r\n0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://followings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-followings/v2/users/{userId}/universes": {
      "get": {
        "tags": ["Interactions", "Universes", "Users"],
        "summary": "Gets all universes followed by a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.FollowsByTypeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.FollowsByTypeResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe.following:read"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_legacy_followings_v2_users__userId__universes"
        }
      }
    },
    "/v2/users/{userId}/universes": {
      "get": {
        "summary": "Gets all universes followed by a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.FollowsByTypeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Followings.Api.Models.FollowsByTypeResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "User is not authorized for this action."
          }
        },
        "servers": [
          {
            "url": "https://followings.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/metadata#FriendsApi": {
      "get": {
        "tags": ["Connections", "Metadata"],
        "parameters": [
          {
            "in": "query",
            "name": "targetUserId",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.FriendsPageMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.FriendsPageMetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_metadata"
        }
      }
    },
    "/v1/my/friends/count": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get the number of friends a user has",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FriendsCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FriendsCountResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_my_friends_count"
        }
      }
    },
    "/v1/my/friends/requests": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get all users that friend requests with targetUserId using exclusive start paging",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 18, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by scoring requests based on request time, mutual friends, and request origin",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.FriendRequestResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.FriendRequestResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action."
          },
          "429": {
            "description": "9: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_my_friends_requests"
        }
      }
    },
    "/v1/my/new-friend-requests/count": {
      "get": {
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.NewFriendRequestsCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.NewFriendRequestsCountResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_my_new_friend_requests_count"
        }
      }
    },
    "/v1/my/trusted-friends/{userId}/status": {
      "get": {
        "tags": ["Connections"],
        "summary": "Gets trusted friend status of a specified user against the requesting user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user to check the trusted friend status for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.TrustedFriendStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.TrustedFriendStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_my_trusted_friends__userId__status"
        }
      }
    },
    "/v1/my/castors/{userId}/status": {
      "get": {
        "summary": "Gets trusted friend status of a specified user against the requesting user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user to check the trusted friend status for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.TrustedFriendStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.TrustedFriendStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/user/{userId}/multiget-are-trusted-friends": {
      "get": {
        "tags": ["Connections"],
        "summary": "Check if the requesting user is trusted friends with the specified users.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The requesting userId.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userIds",
            "description": "The user ids to check against with the requesting user.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreTrustedFriendsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreTrustedFriendsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_user__userId__multiget_are_trusted_friends"
        }
      }
    },
    "/v1/user/{userId}/multiget-are-castors": {
      "get": {
        "summary": "Check if the requesting user is trusted friends with the specified users.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The requesting userId.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userIds",
            "description": "The user ids to check against with the requesting user.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreTrustedFriendsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreTrustedFriendsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/user/friend-requests/count": {
      "get": {
        "tags": ["Connections"],
        "summary": "Return the number of pending friend requests.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.PendingFriendRequestCountModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.PendingFriendRequestCountModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_user_friend_requests_count"
        }
      }
    },
    "/v1/users/{targetUserId}/followers": {
      "get": {
        "tags": ["Interactions", "Users"],
        "summary": "Get all users that follow user with targetUserId in page response format",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 18, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters."
          },
          "403": {
            "description": "2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action."
          },
          "429": {
            "description": "9: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_users__targetUserId__followers"
        }
      }
    },
    "/v1/users/{targetUserId}/followers/count": {
      "get": {
        "tags": ["Interactions", "Users"],
        "summary": "Get the number of following a user has",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FollowCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FollowCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_users__targetUserId__followers_count"
        }
      }
    },
    "/v1/users/{targetUserId}/followings": {
      "get": {
        "tags": ["Interactions", "Users"],
        "summary": "Get all users that user with targetUserId is following in page response format",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 18, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters."
          },
          "403": {
            "description": "2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action."
          },
          "429": {
            "description": "9: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_users__targetUserId__followings"
        }
      }
    },
    "/v1/users/{targetUserId}/followings/count": {
      "get": {
        "tags": ["Interactions", "Users"],
        "summary": "Get the number of following a user has",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FollowCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FollowCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_users__targetUserId__followings_count"
        }
      }
    },
    "/v1/users/{userId}/friends": {
      "get": {
        "tags": ["Connections", "Users"],
        "summary": "Get list of all friends for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id to get the friends for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userSort",
            "description": "Specifies how to sort the returned friends.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends"
        }
      }
    },
    "/v1/users/{userId}/friends/count": {
      "get": {
        "tags": ["Connections", "Users"],
        "summary": "Get the number of friends a user has",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FriendsCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.FriendsCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends_count"
        }
      }
    },
    "/v1/users/{userId}/friends/find": {
      "get": {
        "tags": ["Connections", "Users"],
        "summary": "Get a paginated list of all friends for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id to get the friends for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userSort",
            "description": "Specifies how to sort the returned friends.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2],
              "default": 2
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "in": "query",
            "name": "findFriendsType",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Paging.CursoredPagedResult_Roblox.Friends.Api.Models.Response.FriendResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Paging.CursoredPagedResult_Roblox.Friends.Api.Models.Response.FriendResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends_find"
        }
      }
    },
    "/v1/users/{userId}/friends/inactive": {
      "get": {
        "tags": ["Connections", "Users"],
        "summary": "Get list of inactive friends for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id to get the friends for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends_inactive"
        }
      }
    },
    "/v1/users/{userId}/friends/online": {
      "get": {
        "tags": ["Connections", "Users"],
        "summary": "Get list of all online friends for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id to get the friends for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userSort",
            "description": "The sort order to return the friends.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserPresenceResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserPresenceResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends_online"
        }
      }
    },
    "/v1/users/{userId}/friends/search": {
      "get": {
        "tags": ["Connections", "Users"],
        "summary": "Search for friends by name using a text query.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id to get the friends for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "query",
            "description": "The string to search names of friends for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Paging.CursoredPagedResult_Roblox.Friends.Api.Models.Response.FriendResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Paging.CursoredPagedResult_Roblox.Friends.Api.Models.Response.FriendResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends_search"
        }
      }
    },
    "/v1/users/{userId}/friends/statuses": {
      "get": {
        "tags": ["Connections", "Users"],
        "summary": "Gets a list of friend statuses of specified users against the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user to check the friend statuses against.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "userIds",
            "description": "",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.FriendStatusResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.FriendStatusResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n15: Too many ids.\r\n16: Invalid ids."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends_statuses"
        }
      }
    },
    "/v1/contacts/{targetContactId}/request-friendship": {
      "post": {
        "tags": ["Connections"],
        "summary": "Send a contact friend request to target user",
        "parameters": [
          {
            "in": "path",
            "name": "targetContactId",
            "description": "The target contact Id for friend request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.CaptchaStatusResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.CaptchaStatusResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n5: The target user is already a friend.\r\n6: Invalid parameters.\r\n7: The user cannot be friends with itself.\r\n31: User with max friends sent friend request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action.\r\n14: The user has not passed the captcha."
          },
          "429": {
            "description": "9: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_contacts__targetContactId__request_friendship"
        }
      }
    },
    "/v1/my/friends/refresh-qr-session": {
      "post": {
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.RefreshQrSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.RefreshQrSessionResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_my_friends_refresh_qr_session"
        }
      }
    },
    "/v1/user/{userId}/multiget-are-friends": {
      "post": {
        "tags": ["Connections"],
        "summary": "Check if the requesting user is friends with the specified users.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The requesting userId.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreFriendsRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreFriendsRequestModel"
              }
            }
          },
          "description": "The user ids to check against with the requesting user.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreFriendsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.MultigetAreFriendsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_user__userId__multiget_are_friends"
        }
      }
    },
    "/v1/user/following-exists": {
      "post": {
        "tags": ["Interactions"],
        "summary": "Returns whether or not the current user is following each userId in a list of userIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.FollowingExistsRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.FollowingExistsRequestModel"
              }
            }
          },
          "description": "The userIds potentially being followed",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.FollowingExistsResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.FollowingExistsResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "0: An invalid userId was passed in."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "1: Followers are disabled at this time."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/post_v1_user_following_exists"
        }
      }
    },
    "/v1/user/friend-requests/decline-all": {
      "post": {
        "tags": ["Connections"],
        "summary": "Decline all pending friend requests for the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.DeclineAllFriendRequestsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.DeclineAllFriendRequestsResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_user_friend_requests_decline_all"
        }
      }
    },
    "/v1/users/{requesterUserId}/accept-friend-request": {
      "post": {
        "tags": ["Connections"],
        "summary": "Accept a friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "requesterUserId",
            "description": "The user Id of the requester",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n10: The friend request does not exist.\r\n11: The current users friends limit has been exceeded.\r\n12: The target users friends limit has been exceeded."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: The user is blocked from performing this action."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__requesterUserId__accept_friend_request"
        }
      }
    },
    "/v1/users/{requesterUserId}/accept-trusted-friend-request": {
      "post": {
        "tags": ["Connections"],
        "summary": "Accept a trusted friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "requesterUserId",
            "description": "Id of user who sent trusted friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.AcceptTrustedFriendRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.AcceptTrustedFriendRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__requesterUserId__accept_trusted_friend_request"
        }
      }
    },
    "/v1/users/{requesterUserId}/accept-castor-request": {
      "post": {
        "summary": "Accept a trusted friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "requesterUserId",
            "description": "Id of user who sent trusted friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.AcceptTrustedFriendRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.AcceptTrustedFriendRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/{requesterUserId}/decline-friend-request": {
      "post": {
        "tags": ["Connections"],
        "summary": "Decline a friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "requesterUserId",
            "description": "The user Id of the requester",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n10: The friend request does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__requesterUserId__decline_friend_request"
        }
      }
    },
    "/v1/users/{requesterUserId}/ignore-trusted-friend-request": {
      "post": {
        "tags": ["Connections"],
        "summary": "Ignore a trusted friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "requesterUserId",
            "description": "Id of user who sent the trusted friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.IgnoreTrustedFriendRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.IgnoreTrustedFriendRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__requesterUserId__ignore_trusted_friend_request"
        }
      }
    },
    "/v1/users/{requesterUserId}/ignore-castor-request": {
      "post": {
        "summary": "Ignore a trusted friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "requesterUserId",
            "description": "Id of user who sent the trusted friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.IgnoreTrustedFriendRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.IgnoreTrustedFriendRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/{senderUserId}/accept-friend-request-with-token": {
      "post": {
        "tags": ["Connections"],
        "summary": "Accept a friend request with an Off Network Friending token.",
        "parameters": [
          {
            "in": "path",
            "name": "senderUserId",
            "description": "The user id of the sender of the off network friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Request.FriendingTokenRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Request.FriendingTokenRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n3: The user is blocked from performing this action.\r\n5: The target user is already a friend.\r\n6: Invalid parameters.\r\n7: The user cannot be friends with itself.\r\n11: The current users friends limit has been exceeded.\r\n12: The target users friends limit has been exceeded."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__senderUserId__accept_friend_request_with_token"
        }
      }
    },
    "/v1/users/{targetUserId}/follow": {
      "post": {
        "tags": ["Interactions"],
        "summary": "Creates the following between a user and user with targetUserId",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Web.Captcha.Models.Request.CaptchaTokenRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Web.Captcha.Models.Request.CaptchaTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.CaptchaStatusResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.CaptchaStatusResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters.\r\n8: The user cannot follow itself."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action.\r\n14: The user has not passed the captcha."
          },
          "429": {
            "description": "9: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/post_v1_users__targetUserId__follow"
        }
      }
    },
    "/v1/users/{targetUserId}/remove-trusted-friend": {
      "post": {
        "tags": ["Connections"],
        "summary": "Removes target user as trusted friend.",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "The target user id to remove as trusted friend",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.RemoveTrustedFriendResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.RemoveTrustedFriendResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__targetUserId__remove_trusted_friend"
        }
      }
    },
    "/v1/users/{targetUserId}/remove-castor": {
      "post": {
        "summary": "Removes target user as trusted friend.",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "The target user id to remove as trusted friend",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.RemoveTrustedFriendResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.RemoveTrustedFriendResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/{targetUserId}/request-friendship": {
      "post": {
        "tags": ["Connections"],
        "summary": "Send a friend request to target user",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "The target user Id for friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.FriendshipRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Friends.Api.FriendshipRequestModel"
              }
            }
          },
          "description": "The source which the friend request originated from",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.CaptchaStatusResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.CaptchaStatusResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n5: The target user is already a friend.\r\n6: Invalid parameters.\r\n7: The user cannot be friends with itself.\r\n10: The friend request does not exist.\r\n13: The users are not in the same game.\r\n31: User with max friends sent friend request.\r\n35: Invalid nickname."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action.\r\n14: The user has not passed the captcha."
          },
          "429": {
            "description": "9: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__targetUserId__request_friendship"
        }
      }
    },
    "/v1/users/{targetUserId}/send-trusted-friend-request": {
      "post": {
        "tags": ["Connections"],
        "summary": "Send a trusted friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "Id of target user for the trusted friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.SendTrustedFriendRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.SendTrustedFriendRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__targetUserId__send_trusted_friend_request"
        }
      }
    },
    "/v1/users/{targetUserId}/send-castor-request": {
      "post": {
        "summary": "Send a trusted friend request.",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "Id of target user for the trusted friend request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.SendTrustedFriendRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.SendTrustedFriendRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/{targetUserId}/unfollow": {
      "post": {
        "tags": ["Interactions"],
        "summary": "Deletes the following between a user and user with targetUserId",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist.\r\n6: Invalid parameters.\r\n8: The user cannot follow itself."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user is banned from performing operation.\r\n3: The user is blocked from performing this action.\r\n14: The user has not passed the captcha."
          },
          "429": {
            "description": "9: The flood limit has been exceeded."
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/post_v1_users__targetUserId__unfollow"
        }
      }
    },
    "/v1/users/{targetUserId}/unfriend": {
      "post": {
        "tags": ["Connections"],
        "summary": "Unfriend a user",
        "parameters": [
          {
            "in": "path",
            "name": "targetUserId",
            "description": "The target user id to unfriend",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The target user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/post_v1_users__targetUserId__unfriend"
        }
      }
    },
    "/v1/my/new-friend-requests": {
      "delete": {
        "tags": ["Connections"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.ClearNewFriendRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.ClearNewFriendRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://friends.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/delete_v1_my_new_friend_requests"
        }
      }
    },
    "/v2/supported-languages/games/{gameId}": {
      "get": {
        "tags": ["Universes"],
        "summary": "Get the supported languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageWithLocales_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageWithLocales_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v2_supported_languages_games__gameId_"
        }
      }
    },
    "/v1/autolocalization/metadata": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Metadata for AutoLocalization Configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.AutoLocalizationMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.AutoLocalizationMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "deprecated": true,
        "description": "Use the Autolocalization controller in LocalizationTables API",
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_autolocalization_metadata"
        }
      }
    },
    "/v1/automatic-translation/games/{gameId}/feature-status": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Checks if automatic translation can be enabled for a game.\r\nThe user must still have proper permissions for the game to get this info.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetAutomaticTranslationFeatureStatusForGameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetAutomaticTranslationFeatureStatusForGameResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_automatic_translation_games__gameId__feature_status"
        }
      }
    },
    "/v1/automatic-translation/games/{gameId}/quota": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Returns the automatic translation quota info for a game.\r\nThe user must still have proper permissions for the game to get this info.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetAutomaticTranslationQuotaForGameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetAutomaticTranslationQuotaForGameResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_automatic_translation_games__gameId__quota"
        }
      }
    },
    "/v1/automatic-translation/languages/{languageCode}/target-languages": {
      "get": {
        "tags": ["Localization"],
        "summary": "Checks if the requested target languages are allowed for automatic translation based on the source language.\r\nIf there are no requested target languages, then all allowed target languages for the source language will be returned.",
        "parameters": [
          {
            "in": "path",
            "name": "languageCode",
            "description": "The source language.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "targetLanguages",
            "description": "Optional target languages. If not passed in, all allowed target languages for the source language will be returned.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "Optional gameId. If not passed in, we'll return the default list of languages allowed.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetAllowedAutomaticTranslationStatusForLanguagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetAllowedAutomaticTranslationStatusForLanguagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "73: Maximum languages exceeded. Please keep the number of languages per request below the maximum.\r\n74: A target language cannot be null or whitespace."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_automatic_translation_languages__languageCode__target_languages"
        }
      }
    },
    "/legacy-game-internationalization/v1/badges/{badgeId}/icons": {
      "get": {
        "tags": ["Badges", "Localization"],
        "summary": "Get all icons for a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The id of the badge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetBadgeIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetBadgeIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "52: Image dimensions are invalid\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_legacy_game_internationalization_v1_badges__badgeId__icons"
        }
      }
    },
    "/v1/badges/{badgeId}/icons": {
      "get": {
        "summary": "Get all icons for a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The id of the badge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetBadgeIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetBadgeIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "52: Image dimensions are invalid\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/badges/{badgeId}/name-description": {
      "get": {
        "tags": ["Badges", "Localization"],
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              }
            }
          },
          "400": {
            "description": "62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_legacy_game_internationalization_v1_badges__badgeId__name_description"
        }
      }
    },
    "/v1/badges/{badgeId}/name-description": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              }
            }
          },
          "400": {
            "description": "62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/developer-products/{developerProductId}/icons": {
      "get": {
        "tags": ["Developer products", "Localization"],
        "summary": "Get all icons for a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The id of the developer product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetDeveloperProductIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetDeveloperProductIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "52: Image dimensions are invalid\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/get_legacy_game_internationalization_v1_developer_products__developerProductId__icons"
        }
      }
    },
    "/v1/developer-products/{developerProductId}/icons": {
      "get": {
        "summary": "Get all icons for a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The id of the developer product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetDeveloperProductIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetDeveloperProductIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "52: Image dimensions are invalid\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/developer-products/{developerProductId}/name-description": {
      "get": {
        "tags": ["Developer products", "Localization"],
        "summary": "Get all names and descriptions of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              }
            }
          },
          "400": {
            "description": "70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/get_legacy_game_internationalization_v1_developer_products__developerProductId__name_description"
        }
      }
    },
    "/v1/developer-products/{developerProductId}/name-description": {
      "get": {
        "summary": "Get all names and descriptions of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              }
            }
          },
          "400": {
            "description": "70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-icon/games/{gameId}": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Get all icons for a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 512
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 512
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n52: Image dimensions are invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_game_internationalization_v1_game_icon_games__gameId_"
        }
      }
    },
    "/v1/game-icon/games/{gameId}": {
      "get": {
        "summary": "Get all icons for a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 512
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 512
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n52: Image dimensions are invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/game-localization-status/{gameId}/translation-counts": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Gets the language translation counts for all languages of a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "GameID of the game to get translation counts for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetTranslationCountsForGameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetTranslationCountsForGameResponse"
                }
              }
            }
          },
          "400": {
            "description": "4: Table does not exist.\r\n14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_game_localization_status__gameId__translation_counts"
        }
      }
    },
    "/v1/game-localization-status/translation-counts-for-language-or-locale": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Gets the language translation counts for the specified table.\r\nThe languages to retrieve must be provided.",
        "parameters": [
          {
            "in": "query",
            "name": "gameIds",
            "description": "List of game ids to retrieve translation counts for.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "languageOrLocaleCode",
            "description": "The code for the language or locale.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "languageOrLocaleType",
            "description": "Indicates whether the languageOrLocaleCode represents a language or locale.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["Language", "Locale"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetTranslationCountsForLanguageOrLocaleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetTranslationCountsForLanguageOrLocaleResponse"
                }
              }
            }
          },
          "400": {
            "description": "66: Games can't be null or empty\r\n67: Maximum games exceeded. Please keep the number of games per request below the maximum.\r\n68: LanguageOrLocaleCode is null or whitespace"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_game_localization_status_translation_counts_for_language_or_locale"
        }
      }
    },
    "/legacy-game-internationalization/v1/game-passes/{gamePassId}/icons": {
      "get": {
        "tags": ["Game passes", "Localization"],
        "summary": "Get all icons for a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGamePassIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGamePassIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "52: Image dimensions are invalid\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/get_legacy_game_internationalization_v1_game_passes__gamePassId__icons"
        }
      }
    },
    "/v1/game-passes/{gamePassId}/icons": {
      "get": {
        "summary": "Get all icons for a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height of the icon to request",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGamePassIconResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGamePassIconResponse_"
                }
              }
            }
          },
          "400": {
            "description": "52: Image dimensions are invalid\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-passes/{gamePassId}/name-description": {
      "get": {
        "tags": ["Game passes", "Localization"],
        "summary": "Get all names and descriptions of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              }
            }
          },
          "400": {
            "description": "61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/get_legacy_game_internationalization_v1_game_passes__gamePassId__name_description"
        }
      }
    },
    "/v1/game-passes/{gamePassId}/name-description": {
      "get": {
        "summary": "Get all names and descriptions of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              }
            }
          },
          "400": {
            "description": "61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/game-thumbnails/games/{gameId}/images": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Get the localized image ids in all languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "width",
            "description": "The width.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 768
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "The height.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 432
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameThumbnailsResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameThumbnailsResponse_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n52: Image dimensions are invalid"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_game_thumbnails_games__gameId__images"
        }
      }
    },
    "/v1/name-description/games/{gameId}": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Gets a game's name and description in all supported languages",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_name_description_games__gameId_"
        }
      },
      "patch": {
        "summary": "Updates a game's name and/or description in multiple languages.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n23: You can't delete translations for source language\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/name-description/games/{gameId}": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Updates a game's name and/or description in multiple languages.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateNameDescriptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n23: You can't delete translations for source language\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_legacy_game_internationalization_v1_name_description_games__gameId_"
        }
      }
    },
    "/v1/name-description/metadata": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Rollout settings for name/description migration to new page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.GameNameDescriptionMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.GameNameDescriptionMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_name_description_metadata"
        }
      }
    },
    "/v1/source-language/games/{gameId}": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Gets the source language of a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Language"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Language"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_source_language_games__gameId_"
        }
      },
      "patch": {
        "summary": "Sets the source language of a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "85: Failed to disable automatic translation status for languages"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/source-language/games/{gameId}": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Sets the source language of a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "85: Failed to disable automatic translation status for languages"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_legacy_game_internationalization_v1_source_language_games__gameId_"
        }
      }
    },
    "/v1/supported-languages/games/{gameId}": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Get the supported languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocale_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocale_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_supported_languages_games__gameId_"
        }
      },
      "patch": {
        "summary": "Add or remove supported languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.PatchLanguage"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.PatchLanguage"
                }
              }
            }
          },
          "description": "The languages to add or remove. LanguageCodeType can be \"Language\" or \"Locale\".",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n49: Duplicate language codes are not allowed."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/supported-languages/games/{gameId}": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Add or remove supported languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.PatchLanguage"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.PatchLanguage"
                }
              }
            }
          },
          "description": "The languages to add or remove. LanguageCodeType can be \"Language\" or \"Locale\".",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n49: Duplicate language codes are not allowed."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_legacy_game_internationalization_v1_supported_languages_games__gameId_"
        }
      }
    },
    "/legacy-game-internationalization/v1/supported-languages/games/{gameId}/automatic-translation-status": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Get the automatic translation status of supported languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocaleSettings_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocaleSettings_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_game_internationalization_v1_supported_languages_games__gameId__automatic_translation_status"
        }
      }
    },
    "/v1/supported-languages/games/{gameId}/automatic-translation-status": {
      "get": {
        "summary": "Get the automatic translation status of supported languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocaleSettings_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocaleSettings_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/supported-languages/games/{gameId}/in-experience-language-selection": {
      "get": {
        "summary": "Get the user's in-experience language selector languages for a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocale_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocale_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/supported-languages/games/{gameId}/universe-display-info-automatic-translation-settings": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Get UniverseDisplayInfo automatic translation settings.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.UniverseDisplayInfoAutomaticTranslationSettings_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.UniverseDisplayInfoAutomaticTranslationSettings_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n22: Invalid language code\r\n83: Failed to get UniverseDisplayInformation content instance auto translation settings\r\n84: Count of language code is larger than max batch get size"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_game_internationalization_v1_supported_languages_games__gameId__universe_display_info_automatic_translation_settings"
        }
      }
    },
    "/v1/supported-languages/games/{gameId}/universe-display-info-automatic-translation-settings": {
      "get": {
        "summary": "Get UniverseDisplayInfo automatic translation settings.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.UniverseDisplayInfoAutomaticTranslationSettings_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.UniverseDisplayInfoAutomaticTranslationSettings_"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n22: Invalid language code\r\n83: Failed to get UniverseDisplayInformation content instance auto translation settings\r\n84: Count of language code is larger than max batch get size"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/supported-languages/metadata": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Rollout settings for supported languages of a game",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SupportedLanguagesMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SupportedLanguagesMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_supported_languages_metadata"
        }
      }
    },
    "/v1/translation-analytics/games/{gameId}/download-translation-analytics-report": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Download translation analytics report after the report is ready",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game's id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "startDateTime",
            "description": "The inclusive start dateTime of report in UTC",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "endDateTime",
            "description": "The exclusive end dateTime of report in UTC",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "reportType",
            "description": "The report type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "GameTranslationStatus",
                "GameTranslationStatusForTranslator",
                "GameTranslationStatusForTranslatorGroup",
                "Test"
              ]
            }
          },
          {
            "in": "query",
            "name": "reportSubjectTargetId",
            "description": "The translator group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n56: You need to provide a valid translator group id to get report.\r\n58: Start datetime or end datetime is invlaid.\r\n59: Report type is invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "57: You do not have permission to request translation analytics report."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_translation_analytics_games__gameId__download_translation_analytics_report"
        }
      }
    },
    "/v1/translation-analytics/metadata": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Get metadata related to UI and rollout settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationAnalyticsMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationAnalyticsMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_translation_analytics_metadata"
        }
      }
    },
    "/v1/ui-configurations": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Get ui configurations for frontend to use.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetUiConfigurationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetUiConfigurationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_ui_configurations"
        }
      }
    },
    "/v1/user-localization-settings/universe/{universeId}": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Get user localization settings for universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe's ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.GetUserLocalizationSettingsForUniverseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.GetUserLocalizationSettingsForUniverseResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n21: The language is not supported\r\n22: Invalid language code"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_user_localization_settings_universe__universeId_"
        }
      },
      "post": {
        "tags": ["Localization", "Universes"],
        "summary": "Set user localization settings for universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe's ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Request.SetUserLocalizationSettingsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Request.SetUserLocalizationSettingsRequest"
              }
            }
          },
          "description": "The request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.SetUserLocalizationSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.SetUserLocalizationSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_user_localization_settings_universe__universeId_"
        }
      }
    },
    "/v1/autolocalization/games/{gameId}/autolocalizationtable": {
      "post": {
        "tags": ["Localization", "Universes"],
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GameAutolocalizationInformationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GameAutolocalizationInformationResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "deprecated": true,
        "description": "Use the Autolocalization controller in LocalizationTables API",
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_autolocalization_games__gameId__autolocalizationtable"
        }
      },
      "patch": {
        "tags": ["Localization", "Universes"],
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SetAutolocalizationTableForGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SetAutolocalizationTableForGameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "deprecated": true,
        "description": "Use the Autolocalization controller in LocalizationTables API",
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_v1_autolocalization_games__gameId__autolocalizationtable"
        }
      }
    },
    "/legacy-game-internationalization/v1/badges/{badgeId}/icons/language-codes/{languageCode}": {
      "post": {
        "tags": ["Badges", "Localization"],
        "summary": "Update a badge's icon",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The id of the badge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/post_legacy_game_internationalization_v1_badges__badgeId__icons_language_codes__languageCode_"
        }
      },
      "delete": {
        "tags": ["Badges", "Localization"],
        "summary": "Delete a localized icon from a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The id of the badge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/delete_legacy_game_internationalization_v1_badges__badgeId__icons_language_codes__languageCode_"
        }
      }
    },
    "/v1/badges/{badgeId}/icons/language-codes/{languageCode}": {
      "post": {
        "summary": "Update a badge's icon",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The id of the badge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a localized icon from a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The id of the badge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/developer-products/{developerProductId}/icons/language-codes/{languageCode}": {
      "post": {
        "tags": ["Developer products", "Localization"],
        "summary": "Update a developer product's icon",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The id of the developer product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/post_legacy_game_internationalization_v1_developer_products__developerProductId__icons_language_codes__languageCode_"
        }
      },
      "delete": {
        "tags": ["Developer products", "Localization"],
        "summary": "Delete a localized icon from a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The id of the developer product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/delete_legacy_game_internationalization_v1_developer_products__developerProductId__icons_language_codes__languageCode_"
        }
      }
    },
    "/v1/developer-products/{developerProductId}/icons/language-codes/{languageCode}": {
      "post": {
        "summary": "Update a developer product's icon",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The id of the developer product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a localized icon from a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The id of the developer product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-icon/games/{gameId}/language-codes/{languageCode}": {
      "post": {
        "tags": ["Localization", "Universes"],
        "summary": "Update a game's icon",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_legacy_game_internationalization_v1_game_icon_games__gameId__language_codes__languageCode_"
        }
      },
      "delete": {
        "tags": ["Localization", "Universes"],
        "summary": "Delete a localized icon from a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/delete_legacy_game_internationalization_v1_game_icon_games__gameId__language_codes__languageCode_"
        }
      }
    },
    "/v1/game-icon/games/{gameId}/language-codes/{languageCode}": {
      "post": {
        "summary": "Update a game's icon",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a localized icon from a game",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-passes/{gamePassId}/icons/language-codes/{languageCode}": {
      "post": {
        "tags": ["Game passes", "Localization"],
        "summary": "Update a game pass's icon",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/post_legacy_game_internationalization_v1_game_passes__gamePassId__icons_language_codes__languageCode_"
        }
      },
      "delete": {
        "tags": ["Game passes", "Localization"],
        "summary": "Delete a localized icon from a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/delete_legacy_game_internationalization_v1_game_passes__gamePassId__icons_language_codes__languageCode_"
        }
      }
    },
    "/v1/game-passes/{gamePassId}/icons/language-codes/{languageCode}": {
      "post": {
        "summary": "Update a game pass's icon",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of this icon to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n46: File not present in request\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a localized icon from a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the localized icon to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/alt-text": {
      "post": {
        "tags": ["Localization", "Thumbnails", "Universes"],
        "summary": "Updates the game thumbnail alt text.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateThumbnailAltTextRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateThumbnailAltTextRequest"
              }
            }
          },
          "description": "The game thumbnail alt text update request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n88: Failed to filter text"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_legacy_game_internationalization_v1_game_thumbnails_games__gameId__language_codes__languageCode__alt_text"
        }
      }
    },
    "/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/alt-text": {
      "post": {
        "summary": "Updates the game thumbnail alt text.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateThumbnailAltTextRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateThumbnailAltTextRequest"
              }
            }
          },
          "description": "The game thumbnail alt text update request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n45: File uploaded does not match known image format\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n88: Failed to filter text"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/image": {
      "post": {
        "tags": ["Localization", "Thumbnails", "Universes"],
        "summary": "Uploads the game thumbnail.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.UploadImageForGameThumbnailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.UploadImageForGameThumbnailResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_legacy_game_internationalization_v1_game_thumbnails_games__gameId__language_codes__languageCode__image"
        }
      }
    },
    "/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/image": {
      "post": {
        "summary": "Uploads the game thumbnail.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_iconsLanguageCodes_languagecode_"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.UploadImageForGameThumbnailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Models.Response.UploadImageForGameThumbnailResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/order": {
      "post": {
        "tags": ["Localization", "Thumbnails", "Universes"],
        "summary": "Orders the specified image Ids for the game thumbnails.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SortImageIdsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SortImageIdsRequest"
              }
            }
          },
          "description": "The request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_legacy_game_internationalization_v1_game_thumbnails_games__gameId__language_codes__languageCode__images_order"
        }
      }
    },
    "/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/order": {
      "post": {
        "summary": "Orders the specified image Ids for the game thumbnails.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SortImageIdsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SortImageIdsRequest"
              }
            }
          },
          "description": "The request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/name-description/games/{gameId}/history": {
      "post": {
        "tags": ["Localization", "Universes"],
        "summary": "Gets the history for name or description in a provided language.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryRequest"
              }
            }
          },
          "description": "The request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n14: Invalid game id\r\n18: You do not have permission to manage this game\r\n22: Invalid language code\r\n39: Count should be at least 1 and less than 50.\r\n53: Language is not supported for the game.\r\n54: No history available for source data\r\n55: Invalid exclusive start Id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "deprecated": true,
        "description": "Please use the /translation-history endpoint instead.",
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_name_description_games__gameId__history"
        }
      }
    },
    "/legacy-game-internationalization/v1/name-description/games/translation-history": {
      "post": {
        "tags": ["Localization", "Universes"],
        "summary": "Gets the history for name or description in a provided language.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryV2Request"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryV2Request"
              }
            }
          },
          "description": "The request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n14: Invalid game id\r\n18: You do not have permission to manage this game\r\n22: Invalid language code\r\n39: Count should be at least 1 and less than 50.\r\n53: Language is not supported for the game.\r\n54: No history available for source data\r\n55: Invalid exclusive start Id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_legacy_game_internationalization_v1_name_description_games_translation_history"
        }
      }
    },
    "/v1/name-description/games/translation-history": {
      "post": {
        "summary": "Gets the history for name or description in a provided language.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryV2Request"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryV2Request"
              }
            }
          },
          "description": "The request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetNameDescriptionHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n14: Invalid game id\r\n18: You do not have permission to manage this game\r\n22: Invalid language code\r\n39: Count should be at least 1 and less than 50.\r\n53: Language is not supported for the game.\r\n54: No history available for source data\r\n55: Invalid exclusive start Id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/translation-analytics/games/{gameId}/request-translation-analytics-report": {
      "post": {
        "tags": ["Localization", "Universes"],
        "summary": "Request translation analytics report to be generated",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game's id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.RequestTranslationAnalyticsReportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.RequestTranslationAnalyticsReportRequest"
              }
            }
          },
          "description": "The request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.RequestTranslationAnalyticsReportResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.RequestTranslationAnalyticsReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n56: You need to provide a valid translator group id to get report.\r\n58: Start datetime or end datetime is invlaid.\r\n59: Report type is invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n57: You do not have permission to request translation analytics report."
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_translation_analytics_games__gameId__request_translation_analytics_report"
        }
      }
    },
    "/v1/autolocalization/games/{gameId}/settings": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Sets a game's auto-localization related settings",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SetAutolocalizationSettingsForGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.SetAutolocalizationSettingsForGameRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "deprecated": true,
        "description": "Use the Autolocalization controller in LocalizationTables API",
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_v1_autolocalization_games__gameId__settings"
        }
      }
    },
    "/legacy-game-internationalization/v1/badges/{badgeId}/description/language-codes/{languageCode}": {
      "patch": {
        "tags": ["Badges", "Localization"],
        "summary": "Update localized description of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/patch_legacy_game_internationalization_v1_badges__badgeId__description_language_codes__languageCode_"
        }
      }
    },
    "/v1/badges/{badgeId}/description/language-codes/{languageCode}": {
      "patch": {
        "summary": "Update localized description of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/badges/{badgeId}/name-description/language-codes/{languageCode}": {
      "delete": {
        "tags": ["Badges", "Localization"],
        "summary": "Delete localized name and description of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/delete_legacy_game_internationalization_v1_badges__badgeId__name_description_language_codes__languageCode_"
        }
      },
      "patch": {
        "tags": ["Badges", "Localization"],
        "summary": "Update localized name and description of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to Update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/patch_legacy_game_internationalization_v1_badges__badgeId__name_description_language_codes__languageCode_"
        }
      }
    },
    "/v1/badges/{badgeId}/name-description/language-codes/{languageCode}": {
      "delete": {
        "summary": "Delete localized name and description of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "patch": {
        "summary": "Update localized name and description of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to Update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/badges/{badgeId}/name/language-codes/{languageCode}": {
      "patch": {
        "tags": ["Badges", "Localization"],
        "summary": "Update localized name of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/patch_legacy_game_internationalization_v1_badges__badgeId__name_language_codes__languageCode_"
        }
      }
    },
    "/v1/badges/{badgeId}/name/language-codes/{languageCode}": {
      "patch": {
        "summary": "Update localized name of a badge",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateBadgeNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n62: Invalid game badge id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/developer-products/{developerProductId}/description/language-codes/{languageCode}": {
      "patch": {
        "tags": ["Developer products", "Localization"],
        "summary": "Update localized description of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/patch_legacy_game_internationalization_v1_developer_products__developerProductId__description_language_codes__languageCode_"
        }
      }
    },
    "/v1/developer-products/{developerProductId}/description/language-codes/{languageCode}": {
      "patch": {
        "summary": "Update localized description of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/developer-products/{developerProductId}/name-description/language-codes/{languageCode}": {
      "delete": {
        "tags": ["Developer products", "Localization"],
        "summary": "Delete localized name and description of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/delete_legacy_game_internationalization_v1_developer_products__developerProductId__name_description_language_codes__languageCode_"
        }
      },
      "patch": {
        "tags": ["Developer products", "Localization"],
        "summary": "Update localized name and description of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to Update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/patch_legacy_game_internationalization_v1_developer_products__developerProductId__name_description_language_codes__languageCode_"
        }
      }
    },
    "/v1/developer-products/{developerProductId}/name-description/language-codes/{languageCode}": {
      "delete": {
        "summary": "Delete localized name and description of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "patch": {
        "summary": "Update localized name and description of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to Update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/developer-products/{developerProductId}/name/language-codes/{languageCode}": {
      "patch": {
        "tags": ["Developer products", "Localization"],
        "summary": "Update localized name of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-developer-product:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/patch_legacy_game_internationalization_v1_developer_products__developerProductId__name_language_codes__languageCode_"
        }
      }
    },
    "/v1/developer-products/{developerProductId}/name/language-codes/{languageCode}": {
      "patch": {
        "summary": "Update localized name of a developer product",
        "parameters": [
          {
            "in": "path",
            "name": "developerProductId",
            "description": "The developer product id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateDeveloperProductNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n70: Invalid developer product id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-passes/{gamePassId}/description/language-codes/{languageCode}": {
      "patch": {
        "tags": ["Game passes", "Localization"],
        "summary": "Update localized description of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/patch_legacy_game_internationalization_v1_game_passes__gamePassId__description_language_codes__languageCode_"
        }
      }
    },
    "/v1/game-passes/{gamePassId}/description/language-codes/{languageCode}": {
      "patch": {
        "summary": "Update localized description of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-passes/{gamePassId}/name-description/language-codes/{languageCode}": {
      "delete": {
        "tags": ["Game passes", "Localization"],
        "summary": "Delete localized name and description of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/delete_legacy_game_internationalization_v1_game_passes__gamePassId__name_description_language_codes__languageCode_"
        }
      },
      "patch": {
        "tags": ["Game passes", "Localization"],
        "summary": "Update localized name and description of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name/description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/patch_legacy_game_internationalization_v1_game_passes__gamePassId__name_description_language_codes__languageCode_"
        }
      }
    },
    "/v1/game-passes/{gamePassId}/name-description/language-codes/{languageCode}": {
      "delete": {
        "summary": "Delete localized name and description of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name and description to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "patch": {
        "summary": "Update localized name and description of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name/description to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-passes/{gamePassId}/name/language-codes/{languageCode}": {
      "patch": {
        "tags": ["Game passes", "Localization"],
        "summary": "Update localized name of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-game-pass:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/patch_legacy_game_internationalization_v1_game_passes__gamePassId__name_language_codes__languageCode_"
        }
      }
    },
    "/v1/game-passes/{gamePassId}/name/language-codes/{languageCode}": {
      "patch": {
        "summary": "Update localized name of a game pass",
        "parameters": [
          {
            "in": "path",
            "name": "gamePassId",
            "description": "The game pass id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code of the name to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameRequest"
              }
            }
          },
          "description": "The request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateGamePassNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "13: Request body can't be null\r\n19: New name is null or whitespaces or new name/description is too long\r\n20: New name or description is moderated\r\n22: Invalid language code\r\n26: You can't update translations for source language\r\n53: Language is not supported for the game.\r\n61: Invalid game pass id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/localizationtable/gametables/{gameId}": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.AssociateLocalizationTablesToGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.AssociateLocalizationTablesToGameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.AssociateLocalizationTablesToGameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.AssociateLocalizationTablesToGameResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_v1_localizationtable_gametables__gameId_"
        }
      }
    },
    "/legacy-game-internationalization/v1/supported-languages/games/{gameId}/languages/{languageCode}/automatic-translation-status": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Enable or disable automatic translation for a game and language.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language to enable or disable for automatic translation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "text/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "Flag to indicate if automatic translation should be enabled or disabled.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.EditAutomaticTranslationStatusForGameAndLanguageResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.EditAutomaticTranslationStatusForGameAndLanguageResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n53: Language is not supported for the game.\r\n72: Automatic translation cannot be enabled for game.\r\n75: Automatic translation cannot be enabled for language."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_legacy_game_internationalization_v1_supported_languages_games__gameId__languages__languageCode__automatic_translation_status"
        }
      }
    },
    "/v1/supported-languages/games/{gameId}/languages/{languageCode}/automatic-translation-status": {
      "patch": {
        "summary": "Enable or disable automatic translation for a game and language.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language to enable or disable for automatic translation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "text/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "Flag to indicate if automatic translation should be enabled or disabled.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.EditAutomaticTranslationStatusForGameAndLanguageResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.EditAutomaticTranslationStatusForGameAndLanguageResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n53: Language is not supported for the game.\r\n72: Automatic translation cannot be enabled for game.\r\n75: Automatic translation cannot be enabled for language."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/supported-languages/games/{gameId}/languages/{languageCode}/universe-display-info-automatic-translation-settings": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Update the switch which controls if the UniverseDisplayInformation should be automatically translated.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "text/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "Whether to enable automatic translation for universe display info.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n72: Automatic translation cannot be enabled for game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "77: Content localization set settings return error code invalid\r\n79: Invalid content instance settings\r\n80: Invalid quota settings\r\n81: Invalid change agent\r\n82: Failed to update UniverseDisplayInformation content instance auto translation settings"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_legacy_game_internationalization_v1_supported_languages_games__gameId__languages__languageCode__universe_display_info_automatic_translation_settings"
        }
      }
    },
    "/v1/supported-languages/games/{gameId}/languages/{languageCode}/universe-display-info-automatic-translation-settings": {
      "patch": {
        "summary": "Update the switch which controls if the UniverseDisplayInformation should be automatically translated.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "text/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "Whether to enable automatic translation for universe display info.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n72: Automatic translation cannot be enabled for game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "500": {
            "description": "77: Content localization set settings return error code invalid\r\n79: Invalid content instance settings\r\n80: Invalid quota settings\r\n81: Invalid change agent\r\n82: Failed to update UniverseDisplayInformation content instance auto translation settings"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-game-internationalization/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/{imageId}": {
      "delete": {
        "tags": ["Localization", "Thumbnails", "Universes"],
        "summary": "Deletes the game thumbnail.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "imageId",
            "description": "The image identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/delete_legacy_game_internationalization_v1_game_thumbnails_games__gameId__language_codes__languageCode__images__imageId_"
        }
      }
    },
    "/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/{imageId}": {
      "delete": {
        "summary": "Deletes the game thumbnail.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "languageCode",
            "description": "The language code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "imageId",
            "description": "The image identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n22: Invalid language code\r\n23: You can't delete translations for source language\r\n53: Language is not supported for the game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://gameinternationalization.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/join-team-test": {
      "get": {
        "tags": ["Places", "Team Create", "Universes"],
        "summary": "Endpoint to join a team test.",
        "parameters": [
          {
            "in": "query",
            "name": "PlaceId",
            "description": "The Target Place Id for Team Test.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "PlaceVersion",
            "description": "The Target Place Version for Team Test.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/get_v1_join_team_test"
        }
      }
    },
    "/v1/join-game": {
      "post": {
        "tags": ["Places", "Universes"],
        "summary": "Endpoint to join a game",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinRequest"
              }
            }
          },
          "description": "The Roblox.GameJoin.Api.GameJoinRequest in JSON format",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_join_game"
        }
      }
    },
    "/v1/join-game-instance": {
      "post": {
        "tags": ["Places", "Universes"],
        "summary": "Endpoint to join a particular game instance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinGameInstanceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinGameInstanceRequest"
              }
            }
          },
          "description": "The Roblox.GameJoin.Api.JoinGameInstanceRequest in JSON format",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_join_game_instance"
        }
      }
    },
    "/v1/join-play-together-game": {
      "post": {
        "tags": ["Chats", "Places", "Universes"],
        "summary": "Endpoint to join play together game. DEPRECATED",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinPlayTogetherGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinPlayTogetherGameRequest"
              }
            }
          },
          "description": "The Roblox.GameJoin.Api.JoinPlayTogetherGameRequest in JSON format",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/chats#/default/post_v1_join_play_together_game"
        }
      }
    },
    "/v1/join-private-game": {
      "post": {
        "tags": ["Places", "Private servers", "Universes"],
        "summary": "Endpoint to join a private game",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinPrivateGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinPrivateGameRequest"
              }
            }
          },
          "description": "The Roblox.GameJoin.Api.JoinPrivateGameRequest in JSON format",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_join_private_game"
        }
      }
    },
    "/v1/join-reserved-game": {
      "post": {
        "tags": ["Places", "Universes"],
        "summary": "Endpoint to join a reserved game",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinReservedGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.JoinReservedGameRequest"
              }
            }
          },
          "description": "The Roblox.GameJoin.Api.JoinReservedGameRequest in JSON format",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_join_reserved_game"
        }
      }
    },
    "/v1/play-with-user": {
      "post": {
        "tags": ["Places", "Universes", "Users"],
        "summary": "Endpoint to play with user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.PlayWithUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.GameJoin.Api.PlayWithUserRequest"
              }
            }
          },
          "description": "The Roblox.GameJoin.Api.PlayWithUserRequest in JSON format",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.GameJoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_play_with_user"
        }
      }
    },
    "/v1/team-create": {
      "post": {
        "tags": ["Places", "Team Create", "Universes"],
        "summary": "Endpoint to join team create session",
        "description": "Xsrf protection disabled because it will only be used on Roblox clients. Adding an extra\r\nround-trip would impact client performance.",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.GameJoin.Api.TeamCreateRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.TeamCreateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.TeamCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "403": {
            "description": "1: Request is not authorized from specified origin.\r\n2: User is invalid or does not exist."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_team_create"
        }
      }
    },
    "/v1/team-create-preemptive": {
      "post": {
        "tags": ["Places", "Team Create", "Universes"],
        "summary": "Endpoint to preemptively start team create session.",
        "description": "Since the request origin might not be Roblox software, this endpoint implements a different set of security rules.\r\nMore specifically, it requires Xsrf protection and disables user-agent check so that it can be called from browsers.",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.GameJoin.Api.TeamCreateRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.TeamCreateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.GameJoin.Api.TeamCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "-1: An unknown error occurred."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Request is not authorized from specified origin.\r\n2: User is invalid or does not exist."
          },
          "429": {
            "description": "3: Too many requests, please slow down."
          }
        },
        "servers": [
          {
            "url": "https://gamejoin.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/post_v1_team_create_preemptive"
        }
      }
    },
    "/v2/games/{universeId}/media": {
      "get": {
        "tags": ["Thumbnails", "Universes"],
        "summary": "Get the game media data",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The id of the universe we get media data from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "fetchAllExperienceRelatedMedia",
            "description": "to tell if the API query is to fetch all related media for this experience",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Games.GameMediaItemResponseV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Games.GameMediaItemResponseV2_"
                }
              }
            }
          },
          "400": {
            "description": "3: The universe's root place is invalid."
          },
          "404": {
            "description": "2: The requested universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v2_games__universeId__media"
        }
      }
    },
    "/v2/groups/{groupId}/games": {
      "get": {
        "tags": ["Groups", "Universes"],
        "summary": "Gets games created by the specified group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "accessFilter",
            "description": "Filtering option via access level.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2, 4],
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameResponseV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameResponseV2_"
                }
              }
            }
          },
          "403": {
            "description": "3: Not authorized."
          },
          "500": {
            "description": "0: Compliance Context service is unavailable."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v2_groups__groupId__games"
        }
      }
    },
    "/v2/groups/{groupId}/gamesV2": {
      "get": {
        "tags": ["Groups", "Universes"],
        "summary": "Gets games created by the specified group. This will replace V1 after validation. Note that this can only used for public/all universes.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "accessFilter",
            "description": "Filtering option via access level.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2, 4],
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameResponseV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameResponseV2_"
                }
              }
            }
          },
          "500": {
            "description": "0: Compliance Context service is unavailable."
          },
          "501": {
            "description": "1: Code path is not Implemented."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v2_groups__groupId__gamesV2"
        }
      }
    },
    "/v2/users/{userId}/favorite/games": {
      "get": {
        "tags": ["Interactions", "Universes", "Users"],
        "summary": "Gets users favorite games.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "accessFilter",
            "description": "Filtering option via access level.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2, 4],
              "default": 2
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameFavoriteResponseModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameFavoriteResponseModel_"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v2_users__userId__favorite_games"
        }
      }
    },
    "/v2/users/{userId}/games": {
      "get": {
        "tags": ["Universes", "Users"],
        "summary": "Gets games created by the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "accessFilter",
            "description": "Filtering option via access level.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2, 4],
              "default": 2
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameResponseV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameResponseV2_"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v2_users__userId__games"
        }
      }
    },
    "/v1/games": {
      "get": {
        "tags": ["Universes"],
        "summary": "Gets a list of games' detail",
        "parameters": [
          {
            "in": "query",
            "name": "universeIds",
            "description": "A list of universe Ids. Cannot exceed a maximum of 50 IDs.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameDetailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameDetailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "8: No universe IDs were specified.\r\n9: Too many universe IDs were requested."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_games"
        }
      }
    },
    "/v1/games/{placeId}/private-servers": {
      "get": {
        "tags": ["Private servers", "Universes"],
        "summary": "Get list of private servers user can access for given game id.",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The Id of the place we are geting the private server list for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "excludeFriendServers",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GetPrivateServerListResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GetPrivateServerListResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The place is invalid.\r\n7: Guest users are not allowed."
          },
          "404": {
            "description": "1: The place is invalid."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/get_v1_games__placeId__private_servers"
        }
      }
    },
    "/v1/games/{placeId}/servers/{serverType}": {
      "get": {
        "tags": ["Places", "Universes"],
        "summary": "Get the game server list",
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The Id of the place we are geting the server list for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "serverType",
            "description": "The type of the server we geting the server list for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1]
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The sort order of the servers.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2],
              "default": 2
            }
          },
          {
            "in": "query",
            "name": "excludeFullGames",
            "description": "Exclude full servers.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameServerResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameServerResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The place is invalid.\r\n6: The server type is invalid. For fetching private servers, please use https://games.roblox.com/v1/games/{placeId}/private-servers.\r\n7: Guest users are not allowed."
          },
          "404": {
            "description": "1: The place is invalid."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/get_v1_games__placeId__servers__serverType_"
        }
      }
    },
    "/v1/games/{universeId}/favorites": {
      "get": {
        "tags": ["Interactions", "Universes"],
        "summary": "Returns if a game was marked as favorite for the authenticated user",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The Id of the universe.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoriteResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoriteResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: The universe's root place is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "404": {
            "description": "2: The requested universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_games__universeId__favorites"
        }
      },
      "post": {
        "tags": ["Interactions", "Universes"],
        "summary": "Favors (or unfavors) a game for the authenticated user",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The Id of the universe.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.Models.Request.GameFavoritesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.Models.Request.GameFavoritesRequest"
              }
            }
          },
          "description": "Request data.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "3: The universe's root place is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: You are not authorized to perform this action."
          },
          "404": {
            "description": "2: The requested universe does not exist."
          },
          "429": {
            "description": "4: Too many requests have been made."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/post_v1_games__universeId__favorites"
        }
      }
    },
    "/v1/games/{universeId}/favorites/count": {
      "get": {
        "tags": ["Interactions", "Universes"],
        "summary": "Get the favorites count of a specific game.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The Id of the universe.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoritesCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameFavoritesCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: The universe's root place is invalid."
          },
          "404": {
            "description": "2: The requested universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_games__universeId__favorites_count"
        }
      }
    },
    "/v1/games/{universeId}/game-passes": {
      "get": {
        "tags": ["Game passes", "Universes"],
        "summary": "Get the game's game passes",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The id of the universe.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2],
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The cursor to figure out where to start fetching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Games.Api.Models.Response.GamePassResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Games.Api.Models.Response.GamePassResponse_"
                }
              }
            }
          },
          "400": {
            "description": "2: The universe's root place is invalid."
          },
          "404": {
            "description": "1: The requested universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/get_v1_games__universeId__game_passes"
        }
      }
    },
    "/v1/games/{universeId}/media": {
      "get": {
        "tags": ["Thumbnails", "Universes"],
        "summary": "Get the game media data",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The id of the universe we get media data from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameMediaItem_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameMediaItem_"
                }
              }
            }
          },
          "400": {
            "description": "3: The universe's root place is invalid."
          },
          "404": {
            "description": "2: The requested universe does not exist."
          }
        },
        "deprecated": true,
        "description": "Use https://games.roblox.com/v2/games/{universeId}/media instead",
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_games__universeId__media"
        }
      }
    },
    "/v1/games/{universeId}/votes": {
      "get": {
        "tags": ["Interactions", "Universes"],
        "summary": "Get the game vote status",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The id of the universe we get vote status from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameVoteResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The universe's root place is invalid.\r\n3: The asset is not voteable."
          },
          "404": {
            "description": "1: The requested universe does not exist."
          },
          "429": {
            "description": "10: Internal service busy. Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          }
        },
        "deprecated": true,
        "description": "Use https://games.roblox.com/docs#!/Votes/get_v1_games_votes instead",
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_games__universeId__votes"
        }
      }
    },
    "/v1/games/{universeId}/votes/user": {
      "get": {
        "tags": ["Interactions", "Universes"],
        "summary": "Get the user's vote status for a game",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The id of the universe we get user vote status from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.UserGameVoteResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.UserGameVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The universe's root place is invalid.\r\n3: The asset is not voteable."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "404": {
            "description": "1: The requested universe does not exist."
          },
          "429": {
            "description": "10: Internal service busy. Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_games__universeId__votes_user"
        }
      }
    },
    "/v1/games/games-product-info": {
      "get": {
        "tags": ["Universes"],
        "summary": "Gets a list of games' product info, used to purchase a game",
        "parameters": [
          {
            "in": "query",
            "name": "universeIds",
            "description": "A list of universe Ids. Cannot exceed a maximum of 100 IDs.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameProductResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameProductResponse_"
                }
              }
            }
          },
          "400": {
            "description": "8: No universe IDs were specified.\r\n9: Too many universe IDs were requested."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_games_games_product_info"
        }
      }
    },
    "/v1/games/multiget-place-details": {
      "get": {
        "tags": ["Places", "Universes"],
        "summary": "Get place details",
        "parameters": [
          {
            "in": "query",
            "name": "placeIds",
            "description": "List of placeId to uniquely Identify a place",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PlaceDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PlaceDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/places#/default/get_v1_games_multiget_place_details"
        }
      }
    },
    "/v1/games/multiget-playability-status": {
      "get": {
        "tags": ["Accounts", "Universes"],
        "summary": "Gets a list of universe playability statuses for the authenticated user",
        "parameters": [
          {
            "in": "query",
            "name": "universeIds",
            "description": "A list of universe Ids. Cannot exceed a maximum of 50 IDs.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PlayabilityStatusResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PlayabilityStatusResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "8: No universe IDs were specified.\r\n9: Too many universe IDs were requested."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_games_multiget_playability_status"
        }
      }
    },
    "/v1/games/recommendations/game/{universeId}": {
      "get": {
        "tags": ["Universes"],
        "summary": "Get games recommendations based on a given universe",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universe to base recommendations on",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "PaginationKey",
            "description": "The key of a page, which includes the start row index and all other necessary information to query the data.\r\nThis parameter is usually not needed for the first page.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "MaxRows",
            "description": "The requested number of rows.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "IsTruncatedResultsEnabled",
            "description": "Truncated Results",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameRecommendationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameRecommendationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The pagination key is invalid."
          },
          "404": {
            "description": "2: The requested universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/universes#/default/get_v1_games_recommendations_game__universeId_"
        }
      }
    },
    "/v1/games/votes": {
      "get": {
        "tags": ["Interactions", "Universes"],
        "summary": "Gets a list of universe vote status",
        "parameters": [
          {
            "in": "query",
            "name": "universeIds",
            "description": "A list of universe Ids. Cannot exceed a maximum of 50 IDs.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameVoteResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameVoteResponse_"
                }
              }
            }
          },
          "400": {
            "description": "3: The asset is not voteable.\r\n8: No universe IDs were specified.\r\n9: Too many universe IDs were requested."
          },
          "429": {
            "description": "10: Internal service busy. Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_games_votes"
        }
      }
    },
    "/v1/private-servers": {
      "get": {
        "tags": ["Private servers", "Universes"],
        "summary": "Get private servers from private server ids",
        "parameters": [
          {
            "in": "query",
            "name": "privateServerIds",
            "description": "",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.PrivateServersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.PrivateServersResponse"
                }
              }
            }
          },
          "400": {
            "description": "8: The creator of this game has disabled private servers for this game.\r\n34: Invalid request, private server ids cannot be null.\r\n35: Guest users are not allowed."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You are not the owner of this private server."
          },
          "404": {
            "description": "1: The private server is invalid or does not exist.\r\n4: The universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/get_v1_private_servers"
        }
      }
    },
    "/v1/private-servers/enabled-in-universe/{universeId}": {
      "get": {
        "tags": ["Private servers", "Universes"],
        "summary": "Checks if the private servers are enabled in the specified universe.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PrivateServersEnabledInUniverseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PrivateServersEnabledInUniverseResponse"
                }
              }
            }
          },
          "400": {
            "description": "8: No universe IDs were specified."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/get_v1_private_servers_enabled_in_universe__universeId_"
        }
      }
    },
    "/v1/private-servers/my-private-servers": {
      "get": {
        "tags": ["Private servers", "Universes"],
        "summary": "Get private servers for the authenticated user",
        "parameters": [
          {
            "in": "query",
            "name": "privateServersTab",
            "description": "Type of private server to fetch",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1],
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "itemsPerPage",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "Current cursor",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.MyPrivateServersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.MyPrivateServersResponse"
                }
              }
            }
          },
          "400": {
            "description": "39: Invalid cursor provided in the request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/get_v1_private_servers_my_private_servers"
        }
      }
    },
    "/v1/vip-server/can-invite/{userId}": {
      "get": {
        "tags": ["Private servers", "Users"],
        "summary": "Determines if a user by id is allowed to receive a VIP Server invite from the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerCanInviteResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerCanInviteResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "404": {
            "description": "19: The user is does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/get_v1_vip_server_can_invite__userId_"
        }
      }
    },
    "/v1/vip-servers/{id}": {
      "get": {
        "tags": ["Metadata", "Private servers", "Universes"],
        "summary": "Get necessary data to generate webpage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The VIP Server ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerResponse"
                }
              }
            }
          },
          "400": {
            "description": "8: The creator of this game has disabled private servers for this game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You are not the owner of this private server."
          },
          "404": {
            "description": "1: The private server is invalid or does not exist.\r\n4: The universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v1_vip_servers__id_"
        }
      },
      "patch": {
        "tags": ["Private servers", "Universes"],
        "summary": "Updates vip server",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The VIP Server ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdateRequest"
              }
            }
          },
          "description": "The Roblox.Games.Api.VipServerUpdateRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerResponse"
                }
              }
            }
          },
          "400": {
            "description": "8: The creator of this game has disabled private servers for this game.\r\n10: The name of the private server is either empty or too long."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not the owner of this private server.\r\n11: You cannot activate a cancelled private server.\r\n12: The game must not be Friends Only to allow private servers.\r\n13: Join Link can be generated only for active private servers."
          },
          "404": {
            "description": "1: The private server is invalid or does not exist.\r\n4: The universe does not exist."
          },
          "429": {
            "description": "3: Please wait a few minutes before configuring your private server again."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/patch_v1_vip_servers__id_"
        }
      }
    },
    "/v1/games/vip-servers/{universeId}": {
      "post": {
        "tags": ["Private servers", "Universes"],
        "summary": "Create VIP server for a game",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The id of the universe.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.CreateVipServersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.CreateVipServersRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse"
                }
              }
            }
          },
          "400": {
            "description": "15: The price for purchasing this private server has changed. Please refresh the page and try again."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "404": {
            "description": "4: The universe does not exist."
          },
          "500": {
            "description": "16: We are having a problem completing your purchase. Please try again in a few minutes."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/post_v1_games_vip_servers__universeId_"
        }
      }
    },
    "/v1/games/{universeId}/user-votes": {
      "patch": {
        "tags": ["Interactions", "Universes"],
        "summary": "Set the user's vote for a game",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The id of the universe.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.Models.Request.SetUserGameVoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.Models.Request.SetUserGameVoteRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: The universe's root place is invalid.\r\n3: The asset is not voteable.\r\n4: The requested vote is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: The user needs to play the game before vote.\r\n7: The user needs additional permission to vote."
          },
          "404": {
            "description": "1: The requested universe does not exist."
          },
          "429": {
            "description": "5: Too many attempts to vote. Please try again later.\r\n10: Internal service busy. Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/patch_v1_games__universeId__user_votes"
        }
      }
    },
    "/v1/vip-servers/{id}/permissions": {
      "patch": {
        "tags": ["Groups", "Private servers", "Universes"],
        "summary": "Update friend/clan access and allowed friends/clan list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The VIP Server ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdatePermissionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdatePermissionsRequest"
              }
            }
          },
          "description": "The Roblox.Games.Api.VipServerUpdatePermissionsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerPermissionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerPermissionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "6: You cannot add so many players to the private server's invite list.\r\n8: The creator of this game has disabled private servers for this game.\r\n12: The game must not be Friends Only to allow private servers.\r\n28: You may only add or remove valid players to your private server's invite list.\r\n29: You may only add or remove players when your private server is active."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not the owner of this private server."
          },
          "404": {
            "description": "1: The private server is invalid or does not exist.\r\n4: The universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_v1_vip_servers__id__permissions"
        }
      }
    },
    "/v1/vip-servers/{id}/subscription": {
      "patch": {
        "tags": ["Private servers", "Universes"],
        "summary": "Updates subscription status of a vip server",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The VIP Server ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdateSubscriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdateSubscriptionRequest"
              }
            }
          },
          "description": "The Roblox.Games.Api.VipServerUpdateSubscriptionRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerSubscriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerSubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "8: The creator of this game has disabled private servers for this game.\r\n32: You do not have enough funds available to renew the subscription for this private server."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not the owner of this private server.\r\n21: You may not configure a cancelled private server. Please renew your subscription before configuring."
          },
          "404": {
            "description": "1: The private server is invalid or does not exist.\r\n4: The universe does not exist."
          },
          "429": {
            "description": "3: Please wait a few minutes before configuring your private server again."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/patch_v1_vip_servers__id__subscription"
        }
      }
    },
    "/v1/vip-servers/{id}/voicesettings": {
      "patch": {
        "tags": ["Private servers", "Universes"],
        "summary": "Update voice settings for a private server.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The VIP Server ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest"
              }
            }
          },
          "description": "The Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerVoiceSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Games.Api.VipServerVoiceSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "8: The creator of this game has disabled private servers for this game."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not the owner of this private server.\r\n33: You are not eligible for voice chat."
          },
          "404": {
            "description": "1: The private server is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://games.roblox.com"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/private-servers#/default/patch_v1_vip_servers__id__voicesettings"
        }
      }
    },
    "/v2/groups": {
      "get": {
        "tags": ["Groups"],
        "summary": "Multi-get groups information by Ids.",
        "description": "If a group comes back as null, it will not be returned in the response.",
        "parameters": [
          {
            "in": "query",
            "name": "groupIds",
            "description": "The group Ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Groups.GroupResponseV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Groups.GroupResponseV2_"
                }
              }
            }
          },
          "400": {
            "description": "2: Too many ids in request.\r\n3: Ids could not be parsed from request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v2_groups"
        }
      }
    },
    "/v2/groups/{groupId}/wall/posts": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a list of group wall posts.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by group wall post Id",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.GroupWallPostV2Model_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.GroupWallPostV2Model_"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "403": {
            "description": "2: You do not have permission to access this group wall."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v2_groups__groupId__wall_posts"
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Creates a post on a group wall",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.CreateWallPostRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.CreateWallPostRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.CreateWallPostRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupWallPostV2Model"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupWallPostV2Model"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n5: Your post was empty, white space, or more than 500 characters.\r\n9: The provided content was moderated."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          },
          "429": {
            "description": "4: You are posting too fast, please try again in a few minutes."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v2_groups__groupId__wall_posts"
        }
      }
    },
    "/v2/users/{userId}/groups/roles": {
      "get": {
        "tags": ["Groups", "Users"],
        "summary": "Gets a list of all group roles for groups the specified user is in.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "includeLocked",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeNotificationPreferences",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "discoveryType",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupMembershipResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupMembershipResponse_"
                }
              }
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v2_users__userId__groups_roles"
        }
      }
    },
    "/v1/featured-content/event": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets the featured event for a group",
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Client.GroupFeaturedContentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Client.GroupFeaturedContentResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_featured_content_event"
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Sets the featured event for a group",
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "eventId",
            "description": "The event Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Client.GroupFeaturedContentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Client.GroupFeaturedContentResponse"
                }
              }
            }
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: User is not authorized to set featured content for this group."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_featured_content_event"
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Deletes the featured event for a group",
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "eventId",
            "description": "The event Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: User is not authorized to set featured content for this group."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_featured_content_event"
        }
      }
    },
    "/v1/groups/{groupId}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets group information",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDetailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId_"
        }
      }
    },
    "/legacy-groups/v1/groups/{groupId}/audit-log": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets the Group's audit log",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "actionType",
            "description": "Filter for specific type of action performed",
            "schema": {
              "type": "string",
              "enum": [
                "DeletePost",
                "RemoveMember",
                "AcceptJoinRequest",
                "DeclineJoinRequest",
                "PostStatus",
                "ChangeRank",
                "BuyAd",
                "SendAllyRequest",
                "CreateEnemy",
                "AcceptAllyRequest",
                "DeclineAllyRequest",
                "DeleteAlly",
                "DeleteEnemy",
                "AddGroupPlace",
                "RemoveGroupPlace",
                "CreateItems",
                "ConfigureItems",
                "SpendGroupFunds",
                "ChangeOwner",
                "Delete",
                "AdjustCurrencyAmounts",
                "Abandon",
                "Claim",
                "Rename",
                "ChangeDescription",
                "InviteToClan",
                "KickFromClan",
                "CancelClanInvite",
                "BuyClan",
                "CreateGroupAsset",
                "UpdateGroupAsset",
                "ConfigureGroupAsset",
                "RevertGroupAsset",
                "CreateGroupDeveloperProduct",
                "ConfigureGroupGame",
                "CreateGroupDeveloperSubscriptionProduct",
                "Lock",
                "Unlock",
                "CreateGamePass",
                "CreateBadge",
                "ConfigureBadge",
                "SavePlace",
                "PublishPlace",
                "UpdateRolesetRank",
                "UpdateRolesetData",
                "BanMember",
                "UnbanMember",
                "CreateForumCategory",
                "UpdateForumCategory",
                "ArchiveForumCategory",
                "DeleteForumCategory",
                "DeleteForumPost",
                "DeleteForumComment",
                "CreateRoleset",
                "DeleteRoleset",
                "CreateCommerceProduct",
                "SetCommerceProductActive",
                "ArchiveCommerceProduct",
                "AcceptCommerceProductBundlingFee",
                "SetCommerceProductInactive",
                "ConnectMerchant",
                "DisconnectMerchant"
              ]
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Filter for specific user id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupAuditLogPageResponse_Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupAuditLogPageResponse_Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem_"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n8: Invalid or missing pagination parameters"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_legacy_groups_v1_groups__groupId__audit_log"
        }
      }
    },
    "/v1/groups/{groupId}/audit-log": {
      "get": {
        "summary": "Gets the Group's audit log",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "actionType",
            "description": "Filter for specific type of action performed",
            "schema": {
              "type": "string",
              "enum": [
                "DeletePost",
                "RemoveMember",
                "AcceptJoinRequest",
                "DeclineJoinRequest",
                "PostStatus",
                "ChangeRank",
                "BuyAd",
                "SendAllyRequest",
                "CreateEnemy",
                "AcceptAllyRequest",
                "DeclineAllyRequest",
                "DeleteAlly",
                "DeleteEnemy",
                "AddGroupPlace",
                "RemoveGroupPlace",
                "CreateItems",
                "ConfigureItems",
                "SpendGroupFunds",
                "ChangeOwner",
                "Delete",
                "AdjustCurrencyAmounts",
                "Abandon",
                "Claim",
                "Rename",
                "ChangeDescription",
                "InviteToClan",
                "KickFromClan",
                "CancelClanInvite",
                "BuyClan",
                "CreateGroupAsset",
                "UpdateGroupAsset",
                "ConfigureGroupAsset",
                "RevertGroupAsset",
                "CreateGroupDeveloperProduct",
                "ConfigureGroupGame",
                "CreateGroupDeveloperSubscriptionProduct",
                "Lock",
                "Unlock",
                "CreateGamePass",
                "CreateBadge",
                "ConfigureBadge",
                "SavePlace",
                "PublishPlace",
                "UpdateRolesetRank",
                "UpdateRolesetData",
                "BanMember",
                "UnbanMember",
                "CreateForumCategory",
                "UpdateForumCategory",
                "ArchiveForumCategory",
                "DeleteForumCategory",
                "DeleteForumPost",
                "DeleteForumComment",
                "CreateRoleset",
                "DeleteRoleset",
                "CreateCommerceProduct",
                "SetCommerceProductActive",
                "ArchiveCommerceProduct",
                "AcceptCommerceProductBundlingFee",
                "SetCommerceProductInactive",
                "ConnectMerchant",
                "DisconnectMerchant"
              ]
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Filter for specific user id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupAuditLogPageResponse_Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupAuditLogPageResponse_Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem_"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n8: Invalid or missing pagination parameters"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/groups/{groupId}/join-requests": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a page of Group Join Requests for a group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.GroupJoinRequestResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.GroupJoinRequestResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "19: You have insufficient permissions for this request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__join_requests"
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Batch accepts group join requests",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Groups.Api.MembersRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n20: The group join request is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n19: You have insufficient permissions for this request."
          },
          "500": {
            "description": "0: Something went wrong."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__join_requests"
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Batch declines group join requests",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Groups.Api.MembersRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__join_requests"
        }
      }
    },
    "/v1/groups/{groupId}/join-requests/users/{userId}": {
      "get": {
        "tags": ["Groups", "Users"],
        "summary": "Gets a group join request by userId.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupJoinRequestResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupJoinRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "19: You have insufficient permissions for this request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__join_requests_users__userId_"
        }
      },
      "post": {
        "tags": ["Groups", "Users"],
        "summary": "Accepts a group join request.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n20: The group join request is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n19: You have insufficient permissions for this request."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__join_requests_users__userId_"
        }
      },
      "delete": {
        "tags": ["Groups", "Users"],
        "summary": "Declines/cancels a group join request.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__join_requests_users__userId_"
        }
      }
    },
    "/v1/groups/{groupId}/membership": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets group membership information in the context of the authenticated user",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "includeNotificationPreferences",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__membership"
        }
      }
    },
    "/v1/groups/{groupId}/name-history": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets the Group's name change history.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem_"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__name_history"
        }
      }
    },
    "/v1/groups/{groupId}/payout-restriction": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a value indicating whether the group can use payout feature",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPayoutRestrictionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPayoutRestrictionResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "9: You don't have permission to view this group's payouts."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__payout_restriction"
        }
      }
    },
    "/v1/groups/{groupId}/payouts": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a list of the group payout percentages",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupPayoutResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupPayoutResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "9: You don't have permission to view this group's payouts."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__payouts"
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Pays out a user in Robux.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Groups.Api.PayoutRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n12: Insufficient Robux funds.\r\n24: Invalid payout type.\r\n25: The amount is invalid.\r\n26: Too many recipients."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request.\r\n28: Group has paid out too recently. Please wait and try again.\r\n35: 2-Step Verification is required to make further transactions. Go to Settings > Security to complete 2-Step Verification."
          },
          "503": {
            "description": "22: The feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__payouts"
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a group's relationships",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "StartRowIndex",
            "description": "The start index of the page request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "MaxRows",
            "description": "The maximum number of rows for the page request, should be at least 1.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRelationshipsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRelationshipsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n4: Group relationship type or request type is invalid.\r\n8: Invalid or missing pagination parameters"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__relationships__groupRelationshipType_"
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/requests": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a group's relationship requests",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The group relationship type of the request, only allies are supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "StartRowIndex",
            "description": "The start index of the page request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "MaxRows",
            "description": "The maximum number of rows for the page request, should be at least 1.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRelationshipsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRelationshipsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n4: Group relationship type or request type is invalid.\r\n8: Invalid or missing pagination parameters"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "5: You don't have permission to manage this group's relationships."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__relationships__groupRelationshipType__requests"
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Batch accepts group affiliate requests",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The type of group relationship being made",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Groups.Api.RelationshipsRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__relationships__groupRelationshipType__requests"
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Batch declines group affiliate requests",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The type of group relationship being made",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Groups.Api.RelationshipsRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__relationships__groupRelationshipType__requests"
        }
      }
    },
    "/v1/groups/{groupId}/roles": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a list of the rolesets in a group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupAllRolesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupAllRolesResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__roles"
        }
      }
    },
    "/v1/groups/{groupId}/roles/{roleSetId}/permissions": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets the permissions for a group's roleset. The authorized user must either be the group owner or the roleset being requested, except for guest roles, which can be viewed by all (members and guests).",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "roleSetId",
            "description": "The group's role set id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "3: You are not authorized to view/edit permissions for this role."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__roles__roleSetId__permissions"
        }
      },
      "patch": {
        "tags": ["Groups"],
        "summary": "Updates the permissions for a group's roleset. The authorized user must be the group owner.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group's id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "roleSetId",
            "description": "The roleset's id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdatePermissionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdatePermissionsRequest"
              }
            }
          },
          "description": "The request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: You are not authorized to view/edit permissions for this role.\r\n4: This role's permissions can not be modified."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_v1_groups__groupId__roles__roleSetId__permissions"
        }
      }
    },
    "/v1/groups/{groupId}/roles/{roleSetId}/users": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a list of users in a group for a specific roleset.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "roleSetId",
            "description": "The group's role set id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.UserModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.UserModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "403": {
            "description": "2: The roleset is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__roles__roleSetId__users"
        }
      }
    },
    "/v1/groups/{groupId}/roles/guest/permissions": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets the permissions for a group's guest roleset. These can be viewed by all (members and guests) users.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__roles_guest_permissions"
        }
      }
    },
    "/v1/groups/{groupId}/roles/permissions": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets all permissions for each role",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupPermissionsResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupPermissionsResponse_"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__roles_permissions"
        }
      }
    },
    "/legacy-groups/v1/groups/{groupId}/settings": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets the Group's settings",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_legacy_groups_v1_groups__groupId__settings"
        }
      },
      "patch": {
        "tags": ["Groups"],
        "summary": "Updates the group's settings",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupSettingsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupSettingsRequest"
              }
            }
          },
          "description": "Roblox.Groups.Api.UpdateGroupSettingsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request."
          },
          "503": {
            "description": "31: Service is currently unavailable."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_legacy_groups_v1_groups__groupId__settings"
        }
      }
    },
    "/v1/groups/{groupId}/settings": {
      "get": {
        "summary": "Gets the Group's settings",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSettingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "patch": {
        "summary": "Updates the group's settings",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupSettingsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupSettingsRequest"
              }
            }
          },
          "description": "Roblox.Groups.Api.UpdateGroupSettingsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request."
          },
          "503": {
            "description": "31: Service is currently unavailable."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/groups/{groupId}/social-links": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get social link data associated with a group",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The Id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.SocialLinkResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.SocialLinkResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "13: Only users who are over thirteen years of age may edit social links."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__social_links"
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Posts a social links",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.SocialLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.SocialLinkRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.SocialLinkRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.SocialLinkResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.SocialLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: The social link title is too long.\r\n4: The social link title cannot be empty.\r\n5: The social link url cannot be empty.\r\n7: The request was null.\r\n9: The social link type is invalid.\r\n12: The social link title was moderated."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link."
          },
          "404": {
            "description": "8: The requested group or social link was not found."
          },
          "503": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__social_links"
        }
      }
    },
    "/v1/groups/{groupId}/users": {
      "get": {
        "tags": ["Groups", "Users"],
        "summary": "Gets a list of users in a group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.UserGroupRoleResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.UserGroupRoleResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__users"
        }
      },
      "post": {
        "tags": ["Groups", "Users"],
        "summary": "Joins a group",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "description": "The place ID of the experience the player is in.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Game-Id",
            "description": "The player's current game Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Session-Id",
            "description": "The player's current session Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.JoinGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.JoinGroupRequest"
              }
            }
          },
          "description": "Only supplied when captcha has been solved.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n9: You do not have the builders club membership necessary to join this group.\r\n14: You cannot join a closed group.\r\n33: You do not have the required verification level to join this group.\r\n34: You do not have the required account tenure to join this group."
          },
          "409": {
            "description": "7: You have already requested to join this group.\r\n8: You are already a member of this group."
          },
          "429": {
            "description": "10: Too many attempts to join the group. Please try again later."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__users"
        }
      }
    },
    "/v1/groups/{groupId}/users/{userId}/permissions": {
      "get": {
        "tags": ["Groups", "Users"],
        "summary": "Gets the permissions a user has in a group. Only available to group owner and RCC",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "403": {
            "description": "3: You are not authorized to view/edit permissions for this role."
          },
          "404": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__users__userId__permissions"
        }
      }
    },
    "/v1/groups/{groupId}/wall/posts": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets a list of group wall posts.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by group wall post Id",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.GroupWallPostModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.GroupWallPostModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "403": {
            "description": "2: You do not have permission to access this group wall."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups__groupId__wall_posts"
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Creates a post on a group wall",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.CreateWallPostRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.CreateWallPostRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.CreateWallPostRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.GroupWallPostModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.GroupWallPostModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n5: Your post was empty, white space, or more than 500 characters.\r\n9: The provided content was moderated."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          },
          "405": {
            "description": "1: The group is invalid or does not exist."
          },
          "429": {
            "description": "4: You are posting too fast, please try again in a few minutes."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__wall_posts"
        }
      }
    },
    "/v1/groups/configuration/metadata": {
      "get": {
        "tags": ["Groups", "Metadata"],
        "summary": "Gets Group configuration contextual information",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupConfigurationDisplayOptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupConfigurationDisplayOptionsResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups_configuration_metadata"
        }
      }
    },
    "/v1/groups/metadata": {
      "get": {
        "tags": ["Groups", "Metadata"],
        "summary": "Gets Groups contextual information:\r\nMax number of groups a user can be part of.\r\nCurrent number of groups a user is a member of.\r\nWhether to show/hide certain features based on device type.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupsDisplayOptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupsDisplayOptionsResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups_metadata"
        }
      }
    },
    "/v1/groups/search": {
      "get": {
        "tags": ["Groups"],
        "summary": "Search for groups by keyword.",
        "parameters": [
          {
            "in": "query",
            "name": "keyword",
            "description": "The keyword or phrase to use as the search parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "prioritizeExactMatch",
            "description": "Whether or not to prioritize the exact match for the keyword (optional, defaults to false).",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSearchPageResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSearchPageResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: Search term not appropriate for Roblox.\r\n3: Search term was left empty.\r\n4: Search terms can be 2 to 50 characters long."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups_search"
        }
      }
    },
    "/v1/groups/search/lookup": {
      "get": {
        "tags": ["Groups"],
        "summary": "Looks up groups by a name. Prioritizes an exact match as the first result.",
        "description": "Should only be used for direct lookups where a user is inputting a group name, shouldn't be used for search pages.",
        "parameters": [
          {
            "in": "query",
            "name": "groupName",
            "description": "The group name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Groups.GroupBasicResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Groups.GroupBasicResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: Name is missing or has invalid characters."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups_search_lookup"
        }
      }
    },
    "/v1/groups/search/metadata": {
      "get": {
        "tags": ["Groups", "Metadata"],
        "summary": "Get suggested groups and other miscellaneous information needed for the group/join page like flags",
        "description": "Although there is no reason for this to require an authenticated user right now, in the future,\r\nwe will use coco to return different suggested groups based upon that user's request context",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSearchMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSearchMetadataResponse"
                }
              }
            }
          },
          "404": {
            "description": "5: No Localized Version of group search category exists"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups_search_metadata"
        }
      }
    },
    "/v1/roles": {
      "get": {
        "tags": ["Groups"],
        "summary": "Gets the Roles by their ids.",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "A list of role ids",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupRoleDetailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupRoleDetailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: Ids could not be parsed from request.\r\n2: Too many ids in request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_roles"
        }
      }
    },
    "/legacy-groups/v1/user/groups/pending": {
      "get": {
        "tags": ["Groups", "Users"],
        "summary": "Gets groups that the authenticated user has requested to join",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupDetailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupDetailResponse_"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_legacy_groups_v1_user_groups_pending"
        }
      }
    },
    "/v1/user/groups/pending": {
      "get": {
        "summary": "Gets groups that the authenticated user has requested to join",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupDetailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupDetailResponse_"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/{userId}/friends/groups/roles": {
      "get": {
        "tags": ["Connections", "Groups", "Users"],
        "summary": "Gets a list of all groups the specified users' friends are in.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.UserGroupMembershipResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.UserGroupMembershipResponse_"
                }
              }
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          },
          "403": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/friends#/default/get_v1_users__userId__friends_groups_roles"
        }
      }
    },
    "/v1/users/{userId}/groups/primary/role": {
      "get": {
        "tags": ["Groups", "User profiles", "Users"],
        "summary": "Gets a user's primary group.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipDetailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "4: User is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_users__userId__groups_primary_role"
        }
      }
    },
    "/v1/users/{userId}/groups/roles": {
      "get": {
        "tags": ["Groups", "Users"],
        "summary": "Gets a list of all group roles for groups the specified user is in.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "includeLocked",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeNotificationPreferences",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "discoveryType",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupMembershipDetailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupMembershipDetailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_users__userId__groups_roles"
        }
      }
    },
    "/v1/groups/{groupId}/change-owner": {
      "post": {
        "tags": ["Groups"],
        "summary": "Changes the group owner to another user.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.ChangeOwnerRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.ChangeOwnerRequest"
              }
            }
          },
          "description": "The request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n15: User is not a member of the group.\r\n16: The user does not have the necessary level of premium membership."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n17: You are not authorized to change the owner of this group.\r\n25: 2-Step Verification is required to make further transactions. Go to Settings > Security to complete 2-Step Verification."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__change_owner"
        }
      }
    },
    "/v1/groups/{groupId}/claim-ownership": {
      "post": {
        "tags": ["Groups"],
        "summary": "Claims ownership of the group as the authenticated user",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: You are not authorized to claim this group\r\n12: This group already has an owner\r\n13: Too many attempts to claim groups. Please try again later."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__claim_ownership"
        }
      }
    },
    "/v1/groups/{groupId}/payouts/recurring": {
      "post": {
        "tags": ["Groups"],
        "summary": "Updates recurring payouts.",
        "description": "This endpoint will remove any recipients not sent in the request.\r\nIf a recipient in the request is not a valid member in the group they will not be added to the recurring payouts.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.Groups.Api.PayoutRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n24: Invalid payout type.\r\n25: The amount is invalid.\r\n26: Too many recipients.\r\n27: The recipients are invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n12: Insufficient Robux funds.\r\n28: Group has paid out too recently. Please wait and try again.\r\n35: 2-Step Verification is required to make further transactions. Go to Settings > Security to complete 2-Step Verification."
          },
          "503": {
            "description": "22: The feature is disabled."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__payouts_recurring"
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/{relatedGroupId}": {
      "post": {
        "tags": ["Groups"],
        "summary": "Create a group relationship.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "relatedGroupId",
            "description": "The id of the group you want to create a relationship with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n4: Your group cannot establish a relationship with itself."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: Your group does not allow enemy declarations.\r\n6: Other group does not allow enemy declarations.\r\n7: Your group already has a relationship with the target group.\r\n8: You are blocked from communicating with this user.\r\n9: Insufficient permissions."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__relationships__groupRelationshipType___relatedGroupId_"
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Deletes a group relationship.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "relatedGroupId",
            "description": "The id of the group you want to delete the relationship with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n11: Relationship does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: You are blocked from communicating with this user."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__relationships__groupRelationshipType___relatedGroupId_"
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/requests/{relatedGroupId}": {
      "post": {
        "tags": ["Groups"],
        "summary": "Accepts a group relationship request.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The group relationship type, enemies or allies, only allies are supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "relatedGroupId",
            "description": "The id of the group you want to accept the relationship request with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n10: Relationship request does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: Insufficient permissions."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__relationships__groupRelationshipType__requests__relatedGroupId_"
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Declines a group relationship request.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "groupRelationshipType",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "relatedGroupId",
            "description": "The id of the group you want to accept the relationship request with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n10: Relationship request does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: Insufficient permissions."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__relationships__groupRelationshipType__requests__relatedGroupId_"
        }
      }
    },
    "/v1/groups/{groupId}/rolesets/create": {
      "post": {
        "tags": ["Groups"],
        "summary": "Creates new group roleset.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Request.CreateRoleSetRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Request.CreateRoleSetRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.Models.Request.CreateRoleSetRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "0: Something went wrong.\r\n3: You do not have enough funds to purchase this role.\r\n5: Role name already exists.\r\n6: Rank value is out of bounds.\r\n7: The role name is too long.\r\n8: The role description is too long.\r\n10: This group does not exist.\r\n11: Failed to process payment to purchase role.\r\n12: Limit for roles have been reached on this group.\r\n14: Role name can not be empty.\r\n15: This role does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__rolesets_create"
        }
      }
    },
    "/v1/groups/{groupId}/wall/subscribe": {
      "post": {
        "tags": ["Groups"],
        "summary": "Subscribes the authenticated user to notifications of group wall events.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups__groupId__wall_subscribe"
        }
      }
    },
    "/v1/groups/create": {
      "post": {
        "tags": ["Groups"],
        "summary": "Creates a new group.",
        "description": "This endpoint will charge Robux for the group purchase.\r\nHttp status code 413 is thrown when the group icon file size is too large.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the group.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The group description.",
                    "type": "string"
                  },
                  "publicGroup": {
                    "description": "Whether or not the group is open for anyone to join.",
                    "type": "boolean"
                  },
                  "buildersClubMembersOnly": {
                    "description": "Whether or not the group is only open to join for builders club members.",
                    "type": "boolean"
                  },
                  "Files": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Groups.GroupResponseV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Groups.GroupResponseV2"
                }
              }
            }
          },
          "400": {
            "description": "13: The name is invalid.\r\n15: The group icon is invalid.\r\n16: The group icon is missing from the request.\r\n18: The description is too long.\r\n19: The name is too long.\r\n20: The name has been taken."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n10: User must have builders club membership.\r\n11: User is in maximum number of groups.\r\n12: Insufficient Robux funds.\r\n14: The name is moderated."
          },
          "409": {
            "description": "37: The name was in use too recently."
          },
          "413": {
            "description": "0: Unknown error."
          },
          "429": {
            "description": "17: Too many requests."
          },
          "503": {
            "description": "21: Group creation is currently disabled."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_groups_create"
        }
      }
    },
    "/legacy-groups/v1/groups/policies": {
      "post": {
        "tags": ["Groups"],
        "summary": "Gets group policy info used for compliance.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPolicyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPoliciesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPoliciesResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Too many ids in request.\r\n2: Ids could not be parsed from request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_legacy_groups_v1_groups_policies"
        }
      }
    },
    "/v1/groups/policies": {
      "post": {
        "summary": "Gets group policy info used for compliance.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPolicyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPoliciesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPoliciesResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Too many ids in request.\r\n2: Ids could not be parsed from request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/user/groups/primary": {
      "post": {
        "tags": ["Groups", "User profiles"],
        "summary": "Sets the authenticated user's primary group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.PrimaryGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.PrimaryGroupRequest"
              }
            }
          },
          "description": "The request body containing the group id.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You aren't a member of the group specified."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/post_v1_user_groups_primary"
        }
      },
      "delete": {
        "tags": ["Groups", "User profiles"],
        "summary": "Removes the authenticated user's primary group",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_user_groups_primary"
        }
      }
    },
    "/legacy-groups/v1/groups/{groupId}/description": {
      "patch": {
        "tags": ["Groups"],
        "summary": "Updates the groups description",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupDescriptionRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.UpdateGroupDescriptionRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n29: Your group description was empty."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: The description is too long.\r\n23: Insufficient permissions to complete the request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_legacy_groups_v1_groups__groupId__description"
        }
      }
    },
    "/v1/groups/{groupId}/description": {
      "patch": {
        "summary": "Updates the groups description",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupDescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupDescriptionRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.UpdateGroupDescriptionRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n29: Your group description was empty."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: The description is too long.\r\n23: Insufficient permissions to complete the request."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/groups/{groupId}/name": {
      "patch": {
        "tags": ["Groups"],
        "summary": "Updates the group's name.",
        "description": "This endpoint will charge Robux for the group rename.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNameRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.UpdateGroupNameRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n13: The name is invalid.\r\n19: The name is too long.\r\n20: The name has been taken."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n12: Insufficient Robux funds.\r\n14: The name is moderated.\r\n23: Insufficient permissions to complete the request.\r\n38: Your account must be verified in order to change your group's name.\r\n39: The group ownership was changed too recently."
          },
          "409": {
            "description": "36: The name was changed too recently.\r\n37: The name was in use too recently."
          },
          "413": {
            "description": "0: Unknown error."
          },
          "429": {
            "description": "17: Too many requests."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_v1_groups__groupId__name"
        }
      }
    },
    "/legacy-groups/v1/groups/{groupId}/notification-preference": {
      "patch": {
        "tags": ["Groups"],
        "summary": "Updates the group's settings",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNotificationPreferenceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNotificationPreferenceRequest"
              }
            }
          },
          "description": "Roblox.Groups.Api.UpdateGroupSettingsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "description": " ['Unchanged' = 0, 'Created' = 1, 'Deleted' = 2, 'Updated' = 3]",
                  "enum": [0, 1, 2, 3],
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "description": " ['Unchanged' = 0, 'Created' = 1, 'Deleted' = 2, 'Updated' = 3]",
                  "enum": [0, 1, 2, 3],
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-user:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_legacy_groups_v1_groups__groupId__notification_preference"
        }
      }
    },
    "/v1/groups/{groupId}/notification-preference": {
      "patch": {
        "summary": "Updates the group's settings",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNotificationPreferenceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateGroupNotificationPreferenceRequest"
              }
            }
          },
          "description": "Roblox.Groups.Api.UpdateGroupSettingsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "description": " ['Unchanged' = 0, 'Created' = 1, 'Deleted' = 2, 'Updated' = 3]",
                  "enum": [0, 1, 2, 3],
                  "type": "integer"
                }
              },
              "text/json": {
                "schema": {
                  "format": "int32",
                  "description": " ['Unchanged' = 0, 'Created' = 1, 'Deleted' = 2, 'Updated' = 3]",
                  "enum": [0, 1, 2, 3],
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/groups/{groupId}/rolesets/{rolesetId}": {
      "delete": {
        "tags": ["Groups"],
        "summary": "Deletes existing group roleset.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "rolesetId",
            "description": "The roleset Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "10: This group does not exist.\r\n15: This role does not exist.\r\n17: Cannot remove any more roles\r\n18: Cannot delete this role."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action.\r\n16: There are users in this role."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__rolesets__rolesetId_"
        }
      },
      "patch": {
        "tags": ["Groups"],
        "summary": "Updates existing group roleset.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "rolesetId",
            "description": "The roleset Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "5: Role name already exists.\r\n6: Rank value is out of bounds.\r\n7: The role name is too long.\r\n8: The role description is too long.\r\n10: This group does not exist.\r\n14: Role name can not be empty.\r\n15: This role does not exist.\r\n19: Cannot update Guest role.\r\n20: Cannot update Owner role rank."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_v1_groups__groupId__rolesets__rolesetId_"
        }
      }
    },
    "/v1/groups/{groupId}/social-links/{socialLinkId}": {
      "delete": {
        "tags": ["Groups"],
        "summary": "Deletes a social link",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the game you are editing, required for permissions checking",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "socialLinkId",
            "description": "The id of the social link",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n10: The social link is not for a group.\r\n15: The social link id doesn't match the group id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link.\r\n13: Only users who are over thirteen years of age may edit social links."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__social_links__socialLinkId_"
        }
      },
      "patch": {
        "tags": ["Groups"],
        "summary": "Updates a social link",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the universe",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "socialLinkId",
            "description": "The id of the social link being updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.SocialLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.SocialLinkRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.SocialLinkRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n3: The social link title is too long.\r\n4: The social link title cannot be empty.\r\n5: The social link url cannot be empty.\r\n6: The social link url was improperly formatted.\r\n7: The request was null.\r\n8: The requested group or social link was not found.\r\n9: The social link type is invalid.\r\n10: The social link is not for a group.\r\n12: The social link title was moderated.\r\n16: A social link with this type already exists on this group."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          },
          "503": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_v1_groups__groupId__social_links__socialLinkId_"
        }
      }
    },
    "/legacy-groups/v1/groups/{groupId}/status": {
      "patch": {
        "tags": ["Groups"],
        "summary": "Sets group status",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.PostGroupStatusRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.PostGroupStatusRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.PostGroupStatusRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.ShoutResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.ShoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n7: Missing group status content.\r\n32: Description was filtered."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are not authorized to set the status of this group"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-group:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_legacy_groups_v1_groups__groupId__status"
        }
      }
    },
    "/v1/groups/{groupId}/status": {
      "patch": {
        "summary": "Sets group status",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.PostGroupStatusRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.PostGroupStatusRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.PostGroupStatusRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.ShoutResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Groups.Api.ShoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n7: Missing group status content.\r\n32: Description was filtered."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are not authorized to set the status of this group"
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/groups/{groupId}/users/{userId}": {
      "delete": {
        "tags": ["Groups", "Users"],
        "summary": "Removes a user from a group",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The Id of the user being removed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member.\r\n25: 2-Step Verification is required to make further transactions. Go to Settings > Security to complete 2-Step Verification."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__users__userId_"
        }
      },
      "patch": {
        "tags": ["Groups", "Users"],
        "summary": "Updates a users role in a group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The id of the group the user is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The id of the user being updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateUserRoleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Groups.Api.UpdateUserRoleRequest"
              }
            }
          },
          "description": "The Roblox.Groups.Api.UpdateUserRoleRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n23: You cannot change your own role.\r\n26: You cannot change the user's role to the same role."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_v1_groups__groupId__users__userId_"
        }
      }
    },
    "/v1/groups/icon": {
      "patch": {
        "tags": ["Groups", "Thumbnails"],
        "summary": "Updates the group icon.",
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "The group Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Files": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n16: The group icon is missing from the request.\r\n17: Too many requests.\r\n30: Invalid file type for group icon."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request."
          },
          "413": {
            "description": "0: Unknown error."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/patch_v1_groups_icon"
        }
      }
    },
    "/v1/groups/{groupId}/wall/posts/{postId}": {
      "delete": {
        "tags": ["Groups"],
        "summary": "Deletes a group wall post.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "postId",
            "description": "The group wall post id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The group wall post id is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__wall_posts__postId_"
        }
      }
    },
    "/v1/groups/{groupId}/wall/users/{userId}/posts": {
      "delete": {
        "tags": ["Groups"],
        "summary": "Deletes all group wall posts made by a specific user.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n6: The user specified is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "servers": [
          {
            "url": "https://groups.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/delete_v1_groups__groupId__wall_users__userId__posts"
        }
      }
    },
    "/v1/packages/{packageId}/assets": {
      "get": {
        "tags": ["Inventories"],
        "summary": "Given a package ID, returns the list of asset IDs for that package",
        "parameters": [
          {
            "in": "path",
            "name": "packageID",
            "description": "The asset ID of the package",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.AssetIdListModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.AssetIdListModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "description": "Packages have been migrated to bundles. Use catalog.roblox.com/v1/bundles/{bundleId}/details",
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/get_v1_packages__packageId__assets"
        }
      }
    },
    "/v1/users/{userId}/assets/collectibles": {
      "get": {
        "tags": ["Inventories", "Users"],
        "summary": "Gets all collectible assets owned by the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The userid of the owner of the collectibles.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "assetType",
            "description": "The asset type for the collectibles you're trying to get.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21,
                22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39,
                40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by userAssetId",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.CollectibleUserAssetModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.CollectibleUserAssetModel_"
                }
              }
            }
          },
          "400": {
            "description": "The specified asset type(s) are invalid."
          },
          "403": {
            "description": "The specified user's inventory is hidden."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/get_v1_users__userId__assets_collectibles"
        }
      }
    },
    "/v1/users/{userId}/can-view-inventory": {
      "get": {
        "tags": ["Accounts", "Inventories", "Users"],
        "summary": "Gets whether the specified user's inventory can be viewed.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CanViewInventoryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CanViewInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_users__userId__can_view_inventory"
        }
      }
    },
    "/v1/users/{userId}/categories": {
      "get": {
        "tags": ["Inventories", "Users"],
        "summary": "Return inventory categories for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CategoriesModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CategoriesModel"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/get_v1_users__userId__categories"
        }
      }
    },
    "/v1/users/{userId}/categories/favorites": {
      "get": {
        "tags": ["Interactions", "Inventories", "Users"],
        "summary": "Return favorites categories for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CategoriesModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CategoriesModel"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/interactions#/default/get_v1_users__userId__categories_favorites"
        }
      }
    },
    "/v1/users/{userId}/items/{itemType}/{itemTargetId}": {
      "get": {
        "tags": ["Assets", "Inventories", "Users"],
        "summary": "Gets owned items of the specified item type. Game Servers can make requests for any user, but can only make requests for game passes that belong to the place sending the request.\r\nPlace creators can make requests as if they were the Game Server.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user in question",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "itemType",
            "description": "Type of the item in question (i.e. Asset, GamePass, Badge, Bundle)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3]
            }
          },
          {
            "in": "path",
            "name": "itemTargetId",
            "description": "ID of the item in question",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.IItemModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.IItemModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist!\r\n5: The specified game pass does not exist! Are you using the new game pass ID?\r\n6: The specified item type does not exist.\r\n7: The specified Asset does not exist!\r\n10: The specified asset is not a badge!\r\n12: The specified bundle does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_users__userId__items__itemType___itemTargetId_"
        }
      }
    },
    "/v1/users/{userId}/items/{itemType}/{itemTargetId}/is-owned": {
      "get": {
        "tags": ["Inventories", "Users"],
        "summary": "Gets whether a user owns an item of type itemType with id itemTargetId.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user in question",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "itemType",
            "description": "Type of the item in question (i.e. Asset, GamePass, Badge, Bundle)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3]
            }
          },
          {
            "in": "path",
            "name": "itemTargetId",
            "description": "ID of the item in question",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "1: The specified user does not exist!\r\n5: The specified game pass does not exist! Are you using the new game pass ID?\r\n6: The specified item type does not exist.\r\n7: The specified Asset does not exist!\r\n10: The specified asset is not a badge!\r\n12: The specified bundle does not exist!"
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/get_v1_users__userId__items__itemType___itemTargetId__is_owned"
        }
      }
    },
    "/v1/users/{userId}/places/inventory": {
      "get": {
        "tags": ["Inventories", "Places", "Universes", "Users"],
        "summary": "Gets Created, MyGames, or OtherGames places inventory for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "placesTab",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3, 4, 5]
            }
          },
          {
            "in": "query",
            "name": "itemsPerPage",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.PlaceModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.PlaceModel_"
                }
              }
            }
          },
          "400": {
            "description": "6: Invalid request"
          },
          "403": {
            "description": "3: Insufficient permission."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/get_v1_users__userId__places_inventory"
        }
      }
    },
    "/v1/collections/items/{itemType}/{itemTargetId}": {
      "post": {
        "tags": ["Inventories"],
        "summary": "Adds an item to the appropriate collection",
        "parameters": [
          {
            "in": "path",
            "name": "itemType",
            "description": "Type of the item (i.e. Asset, Bundle)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3]
            }
          },
          {
            "in": "path",
            "name": "itemTargetId",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The item type does not exist.\r\n2: The asset does not exist.\r\n3: The bundle does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You don't own the specified item.\r\n5: Assets of this type are not allowed in collections.\r\n6: Items of this type are not allowed in collections.\r\n7: The item is already in the collection.\r\n9: The collection is full."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/post_v1_collections_items__itemType___itemTargetId_"
        }
      },
      "delete": {
        "tags": ["Inventories"],
        "summary": "Removes an item to the appropriate collection",
        "parameters": [
          {
            "in": "path",
            "name": "itemType",
            "description": "Type of the item (i.e. Asset, Bundle)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3]
            }
          },
          {
            "in": "path",
            "name": "itemTargetId",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The item type does not exist.\r\n2: The asset does not exist.\r\n3: The bundle does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The item is not in the collection."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/delete_v1_collections_items__itemType___itemTargetId_"
        }
      }
    },
    "/v2/assets/{assetId}/owners": {
      "get": {
        "tags": ["Assets", "Inventories", "Users"],
        "summary": "Gets a list of owners of an asset.",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "The asset id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by userAssetId",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.V2.AssetOwnerResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.V2.AssetOwnerResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: The asset id is invalid."
          },
          "403": {
            "description": "2: You do not have permission to view the owners of this asset."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_assets__assetId__owners"
        }
      }
    },
    "/v2/users/{userId}/inventory": {
      "get": {
        "tags": ["Assets", "Inventories", "Users"],
        "summary": "Get user's inventory by multiple Roblox.Platform.Assets.AssetType.",
        "description": "GamePass and Badges not allowed.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The inventory owner's userId.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "assetTypes",
            "description": "The asset types to query.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "description": " ['Image' = 1, 'TShirt' = 2, 'Audio' = 3, 'Mesh' = 4, 'Lua' = 5, 'HTML' = 6, 'Text' = 7, 'Hat' = 8, 'Place' = 9, 'Model' = 10, 'Shirt' = 11, 'Pants' = 12, 'Decal' = 13, 'Avatar' = 16, 'Head' = 17, 'Face' = 18, 'Gear' = 19, 'Badge' = 21, 'GroupEmblem' = 22, 'Animation' = 24, 'Arms' = 25, 'Legs' = 26, 'Torso' = 27, 'RightArm' = 28, 'LeftArm' = 29, 'LeftLeg' = 30, 'RightLeg' = 31, 'Package' = 32, 'YouTubeVideo' = 33, 'GamePass' = 34, 'App' = 35, 'Code' = 37, 'Plugin' = 38, 'SolidModel' = 39, 'MeshPart' = 40, 'HairAccessory' = 41, 'FaceAccessory' = 42, 'NeckAccessory' = 43, 'ShoulderAccessory' = 44, 'FrontAccessory' = 45, 'BackAccessory' = 46, 'WaistAccessory' = 47, 'ClimbAnimation' = 48, 'DeathAnimation' = 49, 'FallAnimation' = 50, 'IdleAnimation' = 51, 'JumpAnimation' = 52, 'RunAnimation' = 53, 'SwimAnimation' = 54, 'WalkAnimation' = 55, 'PoseAnimation' = 56, 'LocalizationTableManifest' = 59, 'LocalizationTableTranslation' = 60, 'EmoteAnimation' = 61, 'Video' = 62, 'TexturePack' = 63, 'TShirtAccessory' = 64, 'ShirtAccessory' = 65, 'PantsAccessory' = 66, 'JacketAccessory' = 67, 'SweaterAccessory' = 68, 'ShortsAccessory' = 69, 'LeftShoeAccessory' = 70, 'RightShoeAccessory' = 71, 'DressSkirtAccessory' = 72, 'FontFamily' = 73, 'FontFace' = 74, 'MeshHiddenSurfaceRemoval' = 75, 'EyebrowAccessory' = 76, 'EyelashAccessory' = 77, 'MoodAnimation' = 78, 'DynamicHead' = 79, 'CodeSnippet' = 80, 'AdsVideo' = 81, 'OtaUpdate' = 82, 'Screenshot' = 83, 'RuntimePropertySet' = 84, 'StorePreviewVideo' = 85, 'GamePreviewVideo' = 86]",
                "enum": [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21,
                  22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38,
                  39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                  54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
                  71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "filterDisapprovedAssets",
            "description": "Filters moderated assets when enabled.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "showApprovedOnly",
            "description": "Filters moderated assets and assets pending review when enabled.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.V2.UserAssetItemModelV2_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.V2.UserAssetItemModelV2_"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid asset type Id."
          },
          "403": {
            "description": "3: Insufficient permission.\r\n4: You are not authorized to view this user's inventory."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v2_users__userId__inventory"
        }
      }
    },
    "/v2/users/{userId}/inventory/{assetTypeId}": {
      "get": {
        "tags": ["Inventories", "Users"],
        "summary": "Gets user's inventory based on specific asset type",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user Id of the inventory owner",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "assetTypeId",
            "description": "The asset type Id of the items to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.InventoryItemModel_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.InventoryItemModel_"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid user Id.\r\n2: Invalid asset type Id."
          },
          "403": {
            "description": "3: Insufficient permission.\r\n4: You are not authorized to view this user's inventory."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/inventories#/default/get_v2_users__userId__inventory__assetTypeId_"
        }
      }
    },
    "/v2/inventory/asset/{assetId}": {
      "delete": {
        "tags": ["Assets", "Inventories"],
        "summary": "Give up an asset owned by the authenticated user.\r\nAssets that are created by Roblox user or are limited edition are not eligible for deletion\r\nand will return NotEligibleForDelete.",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "ID of the asset to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n4: You are not authorized."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You don't own the specified item.\r\n3: The item is not allowed to be deleted."
          },
          "404": {
            "description": "1: The item does not exist."
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://inventory.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/delete_v2_inventory_asset__assetId_"
        }
      }
    },
    "/v1/creations/get-assets": {
      "get": {
        "tags": ["Assets"],
        "summary": "Gets the user created asset information filtered by the given asset type.",
        "parameters": [
          {
            "in": "query",
            "name": "assetType",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isArchived",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "groupId",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.ItemConfiguration.Api.AssetCreationsResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.ItemConfiguration.Api.AssetCreationsResponse_"
                }
              }
            }
          },
          "400": {
            "description": "5: Invalid assetType\r\n10: Invalid Asset Category"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "7: User does not have necessary permissions for group\r\n8: Asset type does not have necessary permissions for group"
          },
          "429": {
            "description": "9: Flood Limit Exceeded"
          },
          "503": {
            "description": "6: Service Unavailable"
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_creations_get_assets"
        }
      }
    },
    "/v1/item-tags": {
      "get": {
        "tags": ["Assets"],
        "summary": "Gets all related item tags for each item id listed.",
        "parameters": [
          {
            "in": "query",
            "name": "itemIds",
            "description": "",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.ItemWithTags_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.ItemWithTags_"
                }
              }
            }
          },
          "400": {
            "description": "1: No item tag Ids requested\r\n2: Too many item tag Ids requested\r\n3: Invalid item id\r\n6: Invalid item namespace"
          },
          "429": {
            "description": "7: Too many requests"
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_item_tags"
        }
      },
      "post": {
        "tags": ["Assets"],
        "summary": "Creates a new item tag.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.CreateItemTagRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.CreateItemTagRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.ItemTagDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.ItemTagDetails"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid item id\r\n4: Invalid tag id\r\n6: Invalid item namespace\r\n8: The given item is ineligible for item tags\r\n9: The given item has already reached its maximum item tag count"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: The current user is missing permissions for the endpoint"
          },
          "429": {
            "description": "7: Too many requests"
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_item_tags"
        }
      }
    },
    "/v1/item-tags/metadata": {
      "get": {
        "tags": ["Assets", "Metadata"],
        "summary": "Gets the metadata related to item tags.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.ItemTagsMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.ItemTagsMetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_item_tags_metadata"
        }
      }
    },
    "/v1/tags": {
      "get": {
        "tags": ["Assets"],
        "summary": "Gets the information for a list of tag Ids.",
        "parameters": [
          {
            "in": "query",
            "name": "tagIds",
            "description": "",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.TagDetails_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.TagDetails_"
                }
              }
            }
          },
          "400": {
            "description": "1: No tag Ids requested\r\n2: Too many tag Ids requested"
          },
          "429": {
            "description": "3: Too many requests"
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_tags"
        }
      }
    },
    "/v1/tags/prefix-search": {
      "get": {
        "tags": ["Assets"],
        "summary": "Searches for up to numberOfResults tags based on the given prefix.",
        "parameters": [
          {
            "in": "query",
            "name": "prefix",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "numberOfResults",
            "description": "Must be 1, 5, 10, or 25.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.TagDetails_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.TagDetails_"
                }
              }
            }
          },
          "400": {
            "description": "5: The given prefix is invalid\r\n6: The number of results requested is invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "4: This endpoint is not yet enabled for the current user"
          },
          "429": {
            "description": "3: Too many requests"
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_tags_prefix_search"
        }
      }
    },
    "/v1/creations/get-asset-details": {
      "post": {
        "tags": ["Assets"],
        "summary": "Gets the asset status and other configuration details for the given assetIds list.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.AssetCreationsDetailsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.AssetCreationsDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.AssetCreationsDetailsResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.AssetCreationsDetailsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "1: Missing AssetIds parameters\r\n2: Invalid asset Ids"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "414": {
            "description": "3: Too many asset Ids"
          },
          "429": {
            "description": "9: Flood Limit Exceeded"
          },
          "503": {
            "description": "6: Service Unavailable"
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_creations_get_asset_details"
        }
      }
    },
    "/v1/item-tags/{itemTagId}": {
      "delete": {
        "tags": ["Assets"],
        "summary": "Deletes an item tag from an item.",
        "parameters": [
          {
            "in": "path",
            "name": "itemTagId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: The current user is missing permissions for the endpoint"
          },
          "429": {
            "description": "7: Too many requests"
          }
        },
        "servers": [
          {
            "url": "https://itemconfiguration.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/delete_v1_item_tags__itemTagId_"
        }
      }
    },
    "/v1/country-regions": {
      "get": {
        "tags": ["Localization"],
        "summary": "Get list of country regions sorted by localized name",
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.CountryRegionListResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.CountryRegionListResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: Invalid supported locale code."
          },
          "403": {
            "description": "7: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_country_regions"
        }
      }
    },
    "/v1/locales": {
      "get": {
        "tags": ["Localization"],
        "summary": "Get list of Supported locales with user locus information.",
        "parameters": [
          {
            "in": "query",
            "name": "displayValueLocale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Locale.Api.SupportedLocaleLocus_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Locale.Api.SupportedLocaleLocus_"
                }
              }
            }
          },
          "403": {
            "description": "Feature is turned off temporary"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_locales"
        }
      }
    },
    "/v1/locales/supported-locales": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Get list of supported locales sorted by the Native Name property.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocalesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocalesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Feature is turned off temporary"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_locales_supported_locales"
        }
      }
    },
    "/v1/locales/supported-locales-for-creators": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "parameters": [
          {
            "in": "query",
            "name": "displayValueLocale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Locale.Api.SupportedLocaleLocus_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Locale.Api.SupportedLocaleLocus_"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_locales_supported_locales_for_creators"
        }
      }
    },
    "/v1/locales/user-locale": {
      "get": {
        "tags": ["Localization"],
        "summary": "Gets user locale. If user is absent returns, locale from http request object.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.UserLocaleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.UserLocaleResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_locales_user_locale"
        }
      }
    },
    "/v1/locales/user-localization-locus-supported-locales": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Gets each of a user's localization locus supported locales. A localization locus supported locale is a page (or group of pages) that\r\nhave been defined by the International team which need independent locale support.\r\nIf the user is null we will attempt to return the locales appropriate for the user's device language.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.UserLocalizationLocusLocalesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.UserLocalizationLocusLocalesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_locales_user_localization_locus_supported_locales"
        }
      }
    },
    "/v1/locales/set-show-roblox-translations": {
      "post": {
        "tags": ["Localization"],
        "summary": "Sets whether translations suggested by Roblox will be shown to the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Locale.Api.SetShowRobloxTranslationsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Locale.Api.SetShowRobloxTranslationsRequest"
              }
            }
          },
          "description": "Whether to show Roblox-suggested translations",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.SuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized\r\n0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Feature is turned off temporary\r\n0: Token Validation Failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_locales_set_show_roblox_translations"
        }
      }
    },
    "/v1/locales/set-user-supported-locale": {
      "post": {
        "tags": ["Localization", "Metadata"],
        "summary": "Sets user's supported locale.\r\nNull supported locale will clear out user's supported locale (set users' supported locale to null)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Locale.Api.SetSupportedLocaleForUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Locale.Api.SetSupportedLocaleForUserRequest"
              }
            }
          },
          "description": "Supported locale code that needs to be set for user",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.SuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Locale.Api.SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized\r\n0: Authorization has been denied for this request."
          },
          "403": {
            "description": "Feature is turned off temporary\r\n0: Token Validation Failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "servers": [
          {
            "url": "https://locale.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_locales_set_user_supported_locale"
        }
      }
    },
    "/v1/autolocalization/metadata#LocalizationTablesApi": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Metadata for AutoLocalization Configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.AutoLocalizationMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.AutoLocalizationMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v1_autolocalization_metadata"
        }
      }
    },
    "/legacy-localization-tables/v1/autolocalization/metadata": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Metadata for AutoLocalization Configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.AutoLocalizationMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.AutoLocalizationMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_localization_tables_v1_autolocalization_metadata"
        }
      }
    },
    "/v1/localization-table/limits": {
      "get": {
        "summary": "Get limits for translation table entries operations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetLimitsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetLimitsResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/localization-table/limits": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Get limits for translation table entries operations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetLimitsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetLimitsResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_localization_tables_v1_localization_table_limits"
        }
      }
    },
    "/v1/localization-table/metadata": {
      "get": {
        "tags": ["Localization", "Metadata"],
        "summary": "Get metadata for localization UI",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.LocalizationTablesMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.LocalizationTablesMetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_localization_table_metadata"
        }
      }
    },
    "/v1/localization-table/tables/{assetId}": {
      "get": {
        "summary": "Get table information by the assetId of the table.",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "The asset id associated with the table.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              }
            }
          },
          "400": {
            "description": "12: Invalid asset id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/localization-table/tables/{assetId}": {
      "get": {
        "tags": ["Assets", "Localization"],
        "summary": "Get table information by the assetId of the table.",
        "parameters": [
          {
            "in": "path",
            "name": "assetId",
            "description": "The asset id associated with the table.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              }
            }
          },
          "400": {
            "description": "12: Invalid asset id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_legacy_localization_tables_v1_localization_table_tables__assetId_"
        }
      }
    },
    "/v1/localization-table/tables/{tableId}": {
      "get": {
        "summary": "Get table information by the id of the table.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "patch": {
        "summary": "Updates the tables contents based on what is provided.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "The table guid for the table to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "The game id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsRequest"
              }
            }
          },
          "description": "The metadata object is optional.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n4: Table does not exist.\r\n10: Maximum entries exceeded. Please keep the number of entries per request below the maximum.\r\n13: Request body can't be null\r\n14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You do not have permission to create this table."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/localization-table/tables/{tableId}": {
      "get": {
        "tags": ["Localization"],
        "summary": "Get table information by the id of the table.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_localization_tables_v1_localization_table_tables__tableId_"
        }
      },
      "patch": {
        "tags": ["Localization"],
        "summary": "Updates the tables contents based on what is provided.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "The table guid for the table to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "The game id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsRequest"
              }
            }
          },
          "description": "The metadata object is optional.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.UpdateTableContentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n4: Table does not exist.\r\n10: Maximum entries exceeded. Please keep the number of entries per request below the maximum.\r\n13: Request body can't be null\r\n14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You do not have permission to create this table."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_legacy_localization_tables_v1_localization_table_tables__tableId_"
        }
      }
    },
    "/v1/localization-table/tables/{tableId}/entries": {
      "get": {
        "summary": "Gets a batch of entries for a table.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "If null, there are no more entries in the table and you've reached the last page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesPagedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesPagedResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/localization-table/tables/{tableId}/entries": {
      "get": {
        "tags": ["Localization"],
        "summary": "Gets a batch of entries for a table.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "If null, there are no more entries in the table and you've reached the last page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesPagedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesPagedResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_localization_tables_v1_localization_table_tables__tableId__entries"
        }
      }
    },
    "/v1/localization-table/tables/{tableId}/entry-count": {
      "get": {
        "summary": "Gets the number of entries in the specified table",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "The table id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "The game id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntryCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntryCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/localization-table/tables/{tableId}/entry-count": {
      "get": {
        "tags": ["Localization"],
        "summary": "Gets the number of entries in the specified table",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "The table id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "The game id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntryCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntryCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n14: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "2: You do not have permission to get this table."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_legacy_localization_tables_v1_localization_table_tables__tableId__entry_count"
        }
      }
    },
    "/v1/auto-localization-table/games/{gameId}/assets-generation-request": {
      "post": {
        "tags": ["Localization", "Universes"],
        "summary": "Generates localization asset of a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n14: Invalid game id\r\n29: You do not have permission to generate asset for this table.\r\n32: LocalizationTable is not available for the game.\r\n34: Actor provided is invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_auto_localization_table_games__gameId__assets_generation_request"
        }
      }
    },
    "/v1/auto-localization-table/games/{gameId}/auto-scrape-cleanup-request": {
      "post": {
        "tags": ["Localization", "Universes"],
        "summary": "Enqueues an event to flush the auto scraped entries which doesn't have translations.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.RaiseEventForAutoScrapedEntriesCleanupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.RaiseEventForAutoScrapedEntriesCleanupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n31: You do not have permission to flush auto scraped entries asset for this game.\r\n32: LocalizationTable is not available for the game.\r\n34: Actor provided is invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "33: Too many attempts to flush the game.Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_auto_localization_table_games__gameId__auto_scrape_cleanup_request"
        }
      }
    },
    "/v1/autolocalization/games/{gameId}/autolocalizationtable#LocalizationTablesApi": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GameAutolocalizationInformationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GameAutolocalizationInformationResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.SetAutolocalizationTableForGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.SetAutolocalizationTableForGameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/autolocalization/games/{gameId}/autolocalizationtable": {
      "post": {
        "tags": ["Localization", "Universes"],
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GameAutolocalizationInformationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GameAutolocalizationInformationResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_legacy_localization_tables_v1_autolocalization_games__gameId__autolocalizationtable"
        }
      }
    },
    "/v1/localization-table/tables": {
      "post": {
        "tags": ["Localization"],
        "summary": "Creates a Localization Table with the given data.\r\nNote that this endpoint simply creates a table and does not associate it with any universe, so if intending to use this to create tables usable in experience more setup will be needed to grant those experiences access.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.CreateTableRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.CreateTableRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.CreateTableResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.CreateTableResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to get this table."
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_localization_table_tables"
        }
      }
    },
    "/v1/localization-table/tables/{tableId}/entries/translation-feedback": {
      "post": {
        "tags": ["Localization"],
        "summary": "Gets the translation feedback for each entry passed in.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "The entries' tableId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "The game id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationFeedbackRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationFeedbackRequest"
              }
            }
          },
          "description": "A request body containing all relevant data for entry translation feedback lookup.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationFeedbackResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationFeedbackResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n13: Request body can't be null\r\n14: Invalid game id\r\n16: Entries can't be null or empty\r\n35: The entries provided are invalid\r\n37: Invalid locale code.\r\n38: Invalid entry identifier."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to get this table."
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_v1_localization_table_tables__tableId__entries_translation_feedback"
        }
      }
    },
    "/v1/localization-table/tables/{tableId}/entries/translation-history": {
      "post": {
        "summary": "Gets the translation history for each entry passed in.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "The entries' tableId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "The game id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryRequest"
              }
            }
          },
          "description": "A request body containing all relevant data for entry history lookup.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n13: Request body can't be null\r\n14: Invalid game id\r\n16: Entries can't be null or empty\r\n35: The entries provided are invalid\r\n37: Invalid locale code.\r\n38: Invalid entry identifier.\r\n39: Count should be at least 1.\r\n45: Invalid exclusive start id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to get this table."
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/localization-table/tables/{tableId}/entries/translation-history": {
      "post": {
        "tags": ["Localization"],
        "summary": "Gets the translation history for each entry passed in.",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "description": "The entries' tableId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "The game id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryRequest"
              }
            }
          },
          "description": "A request body containing all relevant data for entry history lookup.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid table id.\r\n13: Request body can't be null\r\n14: Invalid game id\r\n16: Entries can't be null or empty\r\n35: The entries provided are invalid\r\n37: Invalid locale code.\r\n38: Invalid entry identifier.\r\n39: Count should be at least 1.\r\n45: Invalid exclusive start id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to get this table."
          },
          "429": {
            "description": "24: Too many attempts.Please try again later."
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/post_legacy_localization_tables_v1_localization_table_tables__tableId__entries_translation_history"
        }
      }
    },
    "/v1/auto-localization-table/games/{gameId}/ingestion": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Ingests entries for auto localization. Needs to be an authorized user.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The game id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.LocalizationTables.Api.IngestAutoScrapedContentForGameRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "10: Maximum entries exceeded. Please keep the number of entries per request below the maximum.\r\n13: Request body can't be null\r\n16: Entries can't be null or empty\r\n34: Actor provided is invalid"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_v1_auto_localization_table_games__gameId__ingestion"
        }
      }
    },
    "/v1/autolocalization/games/{gameId}/settings#LocalizationTablesApi": {
      "patch": {
        "summary": "Sets a game's auto-localization related settings",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.SetAutolocalizationSettingsForGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.SetAutolocalizationSettingsForGameRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n61: IsAutomaticEntriesSettingEnabled can only be enabled if IsAutolocalizationEnabled is also enabled."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://localizationtables.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/legacy-localization-tables/v1/autolocalization/games/{gameId}/settings": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Sets a game's auto-localization related settings",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.SetAutolocalizationSettingsForGameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.SetAutolocalizationSettingsForGameRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "14: Invalid game id\r\n61: IsAutomaticEntriesSettingEnabled can only be enabled if IsAutolocalizationEnabled is also enabled."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: You do not have permission to manage this game"
          },
          "503": {
            "description": "17: Feature is disabled"
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-universe:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_legacy_localization_tables_v1_autolocalization_games__gameId__settings"
        }
      }
    },
    "/v1/thumbnails/metadata": {
      "get": {
        "tags": ["Metadata", "Thumbnails"],
        "summary": "Get metadata related to logging thumbnail load metrics.\r\ne.g. ThumbnailLoadLoggingRatio",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Metrics.Api.ThumbnailLoadMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Metrics.Api.ThumbnailLoadMetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://metrics.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v1_thumbnails_metadata"
        }
      }
    },
    "/v1/bundle-metrics/report": {
      "post": {
        "tags": ["Assets", "Avatars", "Metadata"],
        "summary": "Records bundle load successes.",
        "description": "Xsrf protection disabled because this endpoint is supposed to be used\r\nto record static content. It's possible XSRF can't be retried if:\r\n- The XSRF retry JavaScript fails to load (or fails to execute)\r\n- CSS fails to load before JavaScript finishes loading.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Metrics.Api.RecordBundleLoadRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Metrics.Api.RecordBundleLoadRequest"
              }
            },
            "application/csp-report": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Metrics.Api.RecordBundleLoadRequest"
              }
            }
          },
          "description": "The Roblox.Metrics.Api.RecordBundleLoadRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: The bundle url is invalid."
          }
        },
        "servers": [
          {
            "url": "https://metrics.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_bundle_metrics_report"
        }
      }
    },
    "/v1/thumbnails/load": {
      "post": {
        "tags": ["Metadata", "Thumbnails"],
        "summary": "Records the time it takes for a thumbnail to get loaded in the UI.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Metrics.Api.RecordThumbnailLoadRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Metrics.Api.RecordThumbnailLoadRequest"
              }
            },
            "application/csp-report": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Metrics.Api.RecordThumbnailLoadRequest"
              }
            }
          },
          "description": "The Roblox.Metrics.Api.RecordThumbnailLoadRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: A required parameter is missing from the request"
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://metrics.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/post_v1_thumbnails_load"
        }
      }
    },
    "/v2/push-notifications/chrome-manifest": {
      "get": {
        "tags": ["Metadata", "Notifications"],
        "summary": "Get Chrome Manifest to link GCM project to Chrome Browser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.ChromeManifestModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.ChromeManifestModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_push_notifications_chrome_manifest"
        }
      }
    },
    "/v2/push-notifications/get-current-device-destination": {
      "get": {
        "tags": ["Metadata", "Notifications"],
        "summary": "Gets the current device destination",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GetCurrentPushDestinationResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GetCurrentPushDestinationResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_push_notifications_get_current_device_destination"
        }
      }
    },
    "/v2/push-notifications/get-destinations": {
      "get": {
        "tags": ["Accounts", "Notifications"],
        "summary": "Gets valid destinations associated with the signed user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GetPushDestinationsResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GetPushDestinationsResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v2_push_notifications_get_destinations"
        }
      }
    },
    "/v2/push-notifications/metadata": {
      "get": {
        "tags": ["Metadata", "Notifications"],
        "summary": "Gets the corresponding metadata for the specified notification",
        "parameters": [
          {
            "in": "query",
            "name": "notificationToken",
            "description": "Token for the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "notificationId",
            "description": "Id of the specified notification",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GetMetadataResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GetMetadataResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_push_notifications_metadata"
        }
      }
    },
    "/v2/stream-notifications/get-latest-game-updates": {
      "get": {
        "tags": ["Notifications", "Universes"],
        "summary": "Get the latest non aggregated Game Updates sent to the logged in user",
        "parameters": [
          {
            "in": "query",
            "name": "universeIds",
            "description": "List of universe IDs",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "sinceDateTime",
            "description": "For retrieving only updates that created after a time point.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GameUpdateNotificationModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.GameUpdateNotificationModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/get_v2_stream_notifications_get_latest_game_updates"
        }
      }
    },
    "/v2/stream-notifications/get-recent": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Gets the recent entries from the notification stream",
        "parameters": [
          {
            "in": "query",
            "name": "startIndex",
            "description": "Index to start the entries from. (Optional : Defaults to 0 which means the most recent entry)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "maxRows",
            "description": "Number of entries to be returned. (Optional : Defaults to 10 entries)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.NotificationStreamEntriesModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.NotificationStreamEntriesModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/get_v2_stream_notifications_get_recent"
        }
      }
    },
    "/v2/stream-notifications/metadata": {
      "get": {
        "tags": ["Metadata", "Notifications"],
        "summary": "Get Notification Stream metadata.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.ResponseModels.NotificationStreamMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.ResponseModels.NotificationStreamMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/metadata#/default/get_v2_stream_notifications_metadata"
        }
      }
    },
    "/v2/stream-notifications/unread-count": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Gets the count of unread Notification stream entries",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.UnreadStreamNotificationsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.UnreadStreamNotificationsModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/get_v2_stream_notifications_unread_count"
        }
      }
    },
    "/v2/push-notifications/deregister-all-devices": {
      "post": {
        "tags": ["Notifications"],
        "summary": "De-register all devices to disable push notifications",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/post_v2_push_notifications_deregister_all_devices"
        }
      }
    },
    "/v2/push-notifications/deregister-current-device": {
      "post": {
        "tags": ["Notifications"],
        "summary": "De-register current device to disable push notifications",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/post_v2_push_notifications_deregister_current_device"
        }
      }
    },
    "/v2/push-notifications/deregister-current-device-ios-pushkit": {
      "post": {
        "tags": ["Notifications"],
        "summary": "De-register current device to disable pushkit notifications",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/post_v2_push_notifications_deregister_current_device_ios_pushkit"
        }
      }
    },
    "/v2/push-notifications/register-android-native": {
      "post": {
        "tags": ["Notifications"],
        "summary": "Register Android Native for push notifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegisterAndroidRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegisterAndroidRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegistrationResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegistrationResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/post_v2_push_notifications_register_android_native"
        }
      }
    },
    "/v2/push-notifications/register-ios-native": {
      "post": {
        "tags": ["Notifications"],
        "summary": "Registers IOS device for push notifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegisterIOSNativeRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegisterIOSNativeRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegistrationResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegistrationResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/post_v2_push_notifications_register_ios_native"
        }
      }
    },
    "/v2/push-notifications/register-ios-pushkit": {
      "post": {
        "tags": ["Notifications"],
        "summary": "Registers IOS device for pushkit notifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegisterIOSPushKitRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegisterIOSPushKitRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegistrationResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.RegistrationResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/post_v2_push_notifications_register_ios_pushkit"
        }
      }
    },
    "/v2/stream-notifications/clear-unread": {
      "post": {
        "tags": ["Notifications"],
        "summary": "Clears the unread Notification stream count",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.SuccessResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://notifications.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/notifications#/default/post_v2_stream_notifications_clear_unread"
        }
      }
    },
    "/v1/users/{userId}/premium-upsell-precheck": {
      "get": {
        "tags": ["User profiles", "Users"],
        "summary": "Premium upsell precheck",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "universeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "placeId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://premiumfeatures.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/user-profiles#/default/get_v1_users__userId__premium_upsell_precheck"
        }
      }
    },
    "/v1/users/{userId}/validate-membership": {
      "get": {
        "tags": ["User profiles", "Users"],
        "summary": "Get if a user has a Premium membership",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://premiumfeatures.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/user-profiles#/default/get_v1_users__userId__validate_membership"
        }
      }
    },
    "/v1/announcements": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Migrate from RobloxWebsite project, return news notification for Private Message page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.GetAnnouncementsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.GetAnnouncementsResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: Message does not exist or the current user is not authorized to view it."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_announcements"
        }
      }
    },
    "/v1/announcements/metadata": {
      "get": {
        "tags": ["Accounts"],
        "summary": "",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.AnnouncementsMetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.AnnouncementsMetadataResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_announcements_metadata"
        }
      }
    },
    "/v1/messages": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets a user's messages.",
        "parameters": [
          {
            "in": "query",
            "name": "pageNumber",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "messageTab",
            "description": "",
            "schema": {
              "type": "string",
              "enum": ["Inbox", "Sent", "Archive"],
              "default": "Inbox"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.GetMessagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.GetMessagesResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_messages"
        }
      }
    },
    "/v1/messages/{messageId}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets a message's details.",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.MessageDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.MessageDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: Message does not exist or the current user is not authorized to view it."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_messages__messageId_"
        }
      }
    },
    "/v1/messages/unread/count": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets unread messages for the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.UnreadMessagesCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.UnreadMessagesCountResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_messages_unread_count"
        }
      }
    },
    "/v1/messages/archive": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Archives a batch of messages.",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.PrivateMessages.Api.Models.BatchMessagesRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "5: Too many ids in a batch request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_messages_archive"
        }
      }
    },
    "/v1/messages/mark-read": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Marks a batch of messages as read.",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.PrivateMessages.Api.Models.BatchMessagesRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "5: Too many ids in a batch request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_messages_mark_read"
        }
      }
    },
    "/v1/messages/mark-unread": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Marks a batch of messages as unread.",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.PrivateMessages.Api.Models.BatchMessagesRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "5: Too many ids in a batch request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_messages_mark_unread"
        }
      }
    },
    "/v1/messages/unarchive": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Unarchives a batch of messages.",
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.PrivateMessages.Api.Models.BatchMessagesRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "5: Too many ids in a batch request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://privatemessages.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_messages_unarchive"
        }
      }
    },
    "/v1/asset-quotas": {
      "get": {
        "tags": ["Assets"],
        "summary": "List asset quotas of the given resource type and asset type.",
        "parameters": [
          {
            "in": "query",
            "name": "resourceType",
            "description": "Resource type of the asset quota",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assetType",
            "description": "Asset type of the asset quota",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "useDummyData",
            "description": "Use dummy data for testing. This is for internal use only",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.AssetQuotasResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.AssetQuotasResponse"
                }
              }
            }
          },
          "400": {
            "description": "7: The asset type is not appropriate for this request.\r\n8: The resource type is not appropriate for this request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: Reserved for base level errors. Do not use in your endpoint directly, do not document."
          }
        },
        "servers": [
          {
            "url": "https://publish.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_asset_quotas"
        }
      }
    },
    "/v1/audio": {
      "post": {
        "summary": "Published an audio file and returns the new asset info.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Publish.Api.UploadAudioRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Publish.Api.UploadAudioRequest"
              }
            }
          },
          "description": "The file upload request body. Roblox.Publish.Api.UploadAudioRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.PublishAudioResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.PublishAudioResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: The request did not contain a file to be uploaded.\r\n4: The file in the request is too large.\r\n5: The duration of the audio file is too long.\r\n8: The file type is not supported.\r\n9: The file is corrupted\r\n11: Missing permissions to spend group funds.\r\n14: The user/group does not have suffiecient funds to publish.\r\n14: The user/group does not have suffiecient funds to publish.\r\n15: The audio file has already been reviewed and rejected.\r\n18: Too many requests. Try again later.\r\n20: Error while trying to purchase the product.\r\n22: The file size estimation error was greater than the acceptable margin of error.\r\n23: The duration estimation error was greater than the acceptable margin of error.\r\n24: Asset privacy is invalid.\r\n29: Invalid argument in the request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n1: The request did not include an authorization."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "7: Failed to parse the file.\r\n19: Asset creation was unavailable. Please try again."
          }
        },
        "servers": [
          {
            "url": "https://publish.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/audio/verify": {
      "post": {
        "tags": ["Assets"],
        "summary": "Verifies an audio file and returns a product that you can purchase to publish the audio file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Publish.Api.VerifyAudioRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Publish.Api.VerifyAudioRequest"
              }
            }
          },
          "description": "The verify audio request body. Roblox.Publish.Api.VerifyAudioRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.VerifyAudioResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.VerifyAudioResponse"
                }
              }
            }
          },
          "400": {
            "description": "3: The request did not contain a file to be uploaded.\r\n4: The file in the request is too large.\r\n5: The duration of the audio file is too long.\r\n8: The file type is not supported.\r\n9: The file is corrupted\r\n18: Too many requests. Try again later."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n1: The request did not include an authorization."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "7: Failed to parse the file."
          }
        },
        "servers": [
          {
            "url": "https://publish.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_audio_verify"
        }
      }
    },
    "/legacy-publish/v1/badges/{badgeId}/icon": {
      "post": {
        "tags": ["Assets", "Badges", "Thumbnails"],
        "summary": "Overwrites a badge icon with a new one.",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_icon"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: File not present in request.\r\n12: Name or description is moderated."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: You do not have permission to manage this item."
          },
          "404": {
            "description": "4: Target item is invalid or does not exist."
          },
          "429": {
            "description": "3: You're uploading too much, please wait and try again later."
          }
        },
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 100
          },
          "perOauth2Authorization": {
            "period": "MINUTE",
            "maxInPeriod": 100
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-api-key": []
          },
          {
            "roblox-oauth2": []
          }
        ],
        "x-roblox-scopes": [
          {
            "name": "legacy-badge:manage"
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_legacy_publish_v1_badges__badgeId__icon"
        }
      }
    },
    "/v1/badges/{badgeId}/icon#PublishApi": {
      "post": {
        "summary": "Overwrites a badge icon with a new one.",
        "parameters": [
          {
            "in": "path",
            "name": "badgeId",
            "description": "The badge Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_icon"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: File not present in request.\r\n12: Name or description is moderated."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: You do not have permission to manage this item."
          },
          "404": {
            "description": "4: Target item is invalid or does not exist."
          },
          "429": {
            "description": "3: You're uploading too much, please wait and try again later."
          }
        },
        "servers": [
          {
            "url": "https://publish.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/games/{gameId}/thumbnail/image": {
      "post": {
        "tags": ["Assets", "Thumbnails", "Universes"],
        "summary": "Uploads a game thumbnail.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The universe Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_icon"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: File uploaded does not match known image format. Try converting to png.\r\n2: File not present in request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: You do not have permission to manage this item."
          },
          "404": {
            "description": "4: Target item is invalid or does not exist."
          },
          "429": {
            "description": "3: You're uploading too much, please wait and try again later."
          }
        },
        "servers": [
          {
            "url": "https://publish.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_games__gameId__thumbnail_image"
        }
      }
    },
    "/v1/plugins/{pluginId}/icon": {
      "post": {
        "tags": ["Assets"],
        "summary": "Overwrites a plugin icon with a new one.",
        "parameters": [
          {
            "in": "path",
            "name": "pluginId",
            "description": "The plugin Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV1Badges_badgeid_icon"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Publish.Api.UploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: File not present in request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: You do not have permission to manage this item."
          },
          "404": {
            "description": "4: Target item is invalid or does not exist."
          },
          "429": {
            "description": "3: You're uploading too much, please wait and try again later."
          }
        },
        "servers": [
          {
            "url": "https://publish.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/post_v1_plugins__pluginId__icon"
        }
      }
    },
    "/v1/asset-thumbnail-animated": {
      "get": {
        "tags": ["Assets", "Thumbnails"],
        "summary": "Thumbnails asset animated.",
        "parameters": [
          {
            "in": "query",
            "name": "assetId",
            "description": "The asset id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "description": "(optional) placeid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              }
            }
          },
          "400": {
            "description": "4: The requested Ids are invalid, of an invalid type or missing."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_asset_thumbnail_animated"
        }
      }
    },
    "/v1/assets#ThumbnailsApi": {
      "get": {
        "tags": ["Assets", "Thumbnails"],
        "summary": "Thumbnails assets.",
        "parameters": [
          {
            "in": "query",
            "name": "assetIds",
            "description": "The asset ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "description": "(optional) placeid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "returnPolicy",
            "description": "Optional policy to use in selecting thumbnail to return (default = PlaceHolder).",
            "schema": {
              "type": "string",
              "enum": [
                "PlaceHolder",
                "ForcePlaceHolder",
                "AutoGenerated",
                "ForceAutoGenerated"
              ],
              "default": "PlaceHolder"
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": [
                "30x30",
                "42x42",
                "50x50",
                "60x62",
                "75x75",
                "110x110",
                "140x140",
                "150x150",
                "160x100",
                "160x600",
                "250x250",
                "256x144",
                "300x250",
                "304x166",
                "384x216",
                "396x216",
                "420x420",
                "480x270",
                "512x512",
                "576x324",
                "700x700",
                "728x90",
                "768x432",
                "1200x80",
                "330x110",
                "660x220",
                "1320x440",
                "720x228",
                "1440x456"
              ],
              "default": "30x30"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Jpeg", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n8: The requested return policy is invalid (must be PlaceHolder, AutoGenerated or ForceAutoGenerated).\r\n10: Circular thumbnail requests are not allowed"
          },
          "403": {
            "description": "9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_assets"
        }
      }
    },
    "/v1/assets-thumbnail-3d": {
      "get": {
        "tags": ["Assets", "Thumbnails"],
        "summary": "Thumbnails assets.",
        "parameters": [
          {
            "in": "query",
            "name": "assetId",
            "description": "The asset id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "useGltf",
            "description": "(optional) formatType",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "description": "(optional) placeid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              }
            }
          },
          "400": {
            "description": "4: The requested Ids are invalid, of an invalid type or missing."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_v1_assets_thumbnail_3d"
        }
      }
    },
    "/v1/badges/icons": {
      "get": {
        "tags": ["Badges", "Thumbnails"],
        "summary": "Thumbnails badge icons.",
        "parameters": [
          {
            "in": "query",
            "name": "badgeIds",
            "description": "The badge ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["150x150"],
              "default": "150x150"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/badges#/default/get_v1_badges_icons"
        }
      }
    },
    "/v1/bundles/thumbnails": {
      "get": {
        "tags": ["Avatars", "Thumbnails"],
        "summary": "Get bundle thumbnails for the given CSV of bundle ids",
        "parameters": [
          {
            "in": "query",
            "name": "bundleIds",
            "description": "CSV for the bundle ids to get bundle thumbnails",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["150x150", "420x420"],
              "default": "150x150"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_bundles_thumbnails"
        }
      }
    },
    "/v1/developer-products/icons": {
      "get": {
        "tags": ["Developer products", "Thumbnails"],
        "summary": "Thumbnails developer product icons.",
        "parameters": [
          {
            "in": "query",
            "name": "developerProductIds",
            "description": "The developer product ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["150x150", "420x420"],
              "default": "150x150"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/developer-products#/default/get_v1_developer_products_icons"
        }
      }
    },
    "/v1/game-passes": {
      "get": {
        "tags": ["Game passes", "Thumbnails"],
        "summary": "Thumbnails game pass icons.",
        "parameters": [
          {
            "in": "query",
            "name": "gamePassIds",
            "description": "The game pass ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["150x150"],
              "default": "150x150"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/game-passes#/default/get_v1_game_passes"
        }
      }
    },
    "/v1/games/{universeId}/thumbnails": {
      "get": {
        "tags": ["Thumbnails", "Universes"],
        "summary": "Fetches game thumbnail URLs for a list of universes' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.",
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "thumbnailIds",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["768x432", "576x324", "480x270", "384x216", "256x144"],
              "default": "768x432"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Jpeg", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          },
          "404": {
            "description": "5: The requested universe does not exist."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_games__universeId__thumbnails"
        }
      }
    },
    "/v1/games/icons": {
      "get": {
        "tags": ["Thumbnails", "Universes"],
        "summary": "Fetches game icon URLs for a list of universes' root places. Ids that do not correspond to a valid universe will be filtered out.\r\nThe ordering of the results is not guaranteed to be the same as the inputs. In order to correlated inputs with outputs please\r\nuse the 'targetId' of the objects in the result array.",
        "parameters": [
          {
            "in": "query",
            "name": "universeIds",
            "description": "The universe ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "returnPolicy",
            "description": "Optional policy to use in selecting game icon to return (default = PlaceHolder).",
            "schema": {
              "type": "string",
              "enum": [
                "PlaceHolder",
                "ForcePlaceHolder",
                "AutoGenerated",
                "ForceAutoGenerated"
              ],
              "default": "PlaceHolder"
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": [
                "50x50",
                "128x128",
                "150x150",
                "256x256",
                "420x420",
                "512x512"
              ],
              "default": "50x50"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Jpeg", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n8: The requested return policy is invalid (must be PlaceHolder, AutoGenerated or ForceAutoGenerated).\r\n10: Circular thumbnail requests are not allowed"
          },
          "403": {
            "description": "9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_games_icons"
        }
      }
    },
    "/v1/games/multiget/thumbnails": {
      "get": {
        "tags": ["Thumbnails", "Universes"],
        "summary": "Fetch game thumbnail URLs for a list of universe IDs.",
        "parameters": [
          {
            "in": "query",
            "name": "universeIds",
            "description": "comma-delimited list of universe IDs",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "countPerUniverse",
            "description": "max number of thumbnails to return per universe",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "defaults",
            "description": "true if defaults (if any) should be returned if no media exists",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["768x432", "576x324", "480x270", "384x216", "256x144"],
              "default": "768x432"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Jpeg", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Thumbnails.Api.Models.UniverseThumbnailsResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Thumbnails.Api.Models.UniverseThumbnailsResponse_"
                }
              }
            }
          },
          "400": {
            "description": "0: Unknown error\r\n1: There are too many requested Ids.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n5: The requested universe does not exist.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_games_multiget_thumbnails"
        }
      }
    },
    "/v1/groups/icons": {
      "get": {
        "tags": ["Groups", "Thumbnails"],
        "summary": "Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.",
        "parameters": [
          {
            "in": "query",
            "name": "groupIds",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["150x150", "420x420"],
              "default": "150x150"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/groups#/default/get_v1_groups_icons"
        }
      }
    },
    "/v1/places/gameicons": {
      "get": {
        "tags": ["Thumbnails", "Universes"],
        "summary": "Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.",
        "parameters": [
          {
            "in": "query",
            "name": "placeIds",
            "description": "The place ids.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "returnPolicy",
            "description": "Optional policy to use in selecting game icon to return (default = PlaceHolder).",
            "schema": {
              "type": "string",
              "enum": [
                "PlaceHolder",
                "ForcePlaceHolder",
                "AutoGenerated",
                "ForceAutoGenerated"
              ],
              "default": "PlaceHolder"
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": [
                "50x50",
                "128x128",
                "150x150",
                "256x256",
                "420x420",
                "512x512"
              ],
              "default": "50x50"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Jpeg", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n8: The requested return policy is invalid (must be PlaceHolder, AutoGenerated or ForceAutoGenerated).\r\n10: Circular thumbnail requests are not allowed"
          },
          "403": {
            "description": "9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_places_gameicons"
        }
      }
    },
    "/v1/users/avatar": {
      "get": {
        "tags": ["Avatars", "Thumbnails"],
        "summary": "Get Avatar Full body shots for the given CSV of userIds",
        "parameters": [
          {
            "in": "query",
            "name": "userIds",
            "description": "CSV for the userIds to get avatar full body shots",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": [
                "30x30",
                "48x48",
                "60x60",
                "75x75",
                "100x100",
                "110x110",
                "140x140",
                "150x150",
                "150x200",
                "180x180",
                "250x250",
                "352x352",
                "420x420",
                "720x720"
              ],
              "default": "30x30"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Jpeg", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_users_avatar"
        }
      }
    },
    "/v1/users/avatar-3d": {
      "get": {
        "tags": ["Avatars", "Thumbnails"],
        "summary": "Get Avatar 3d object for a user",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "user Id for avatar",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              }
            }
          },
          "400": {
            "description": "4: The requested Ids are invalid, of an invalid type or missing."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_users_avatar_3d"
        }
      }
    },
    "/v1/users/avatar-bust": {
      "get": {
        "tags": ["Avatars", "Thumbnails"],
        "summary": "Get Avatar Busts for the given CSV of userIds",
        "parameters": [
          {
            "in": "query",
            "name": "userIds",
            "description": "CSV for the userIds to get avatar headshots",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": [
                "48x48",
                "50x50",
                "60x60",
                "75x75",
                "100x100",
                "150x150",
                "180x180",
                "352x352",
                "420x420"
              ],
              "default": "48x48"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_users_avatar_bust"
        }
      }
    },
    "/v1/users/avatar-headshot": {
      "get": {
        "tags": ["Avatars", "Thumbnails"],
        "summary": "Get Avatar Headshots for the given CSV of userIds",
        "parameters": [
          {
            "in": "query",
            "name": "userIds",
            "description": "CSV for the userIds to get avatar headshots",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": [
                "48x48",
                "50x50",
                "60x60",
                "75x75",
                "100x100",
                "110x110",
                "150x150",
                "180x180",
                "352x352",
                "420x420",
                "720x720"
              ],
              "default": "48x48"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Jpeg", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/avatars#/default/get_v1_users_avatar_headshot"
        }
      }
    },
    "/v1/users/outfit-3d": {
      "get": {
        "tags": ["Thumbnails"],
        "summary": "Get 3d object for an outfit",
        "parameters": [
          {
            "in": "query",
            "name": "outfitId",
            "description": "CSV for the userIds to get user outfits",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_users_outfit_3d"
        }
      }
    },
    "/v1/users/outfits": {
      "get": {
        "tags": ["Thumbnails"],
        "summary": "Get outfits for the given CSV of userOutfitIds",
        "parameters": [
          {
            "in": "query",
            "name": "userOutfitIds",
            "description": "CSV for the userOutfitIds to get user outfits",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The thumbnail size, formatted widthxheight",
            "schema": {
              "type": "string",
              "enum": ["150x150", "420x420"],
              "default": "150x150"
            }
          },
          {
            "in": "query",
            "name": "format",
            "description": "The thumbnail format",
            "schema": {
              "type": "string",
              "enum": ["Png", "Webp"],
              "default": "Png"
            }
          },
          {
            "in": "query",
            "name": "isCircular",
            "description": "The circle thumbnail output parameter, true or false",
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n10: Circular thumbnail requests are not allowed"
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_users_outfits"
        }
      }
    },
    "/v1/batch": {
      "post": {
        "tags": ["Thumbnails"],
        "summary": "Returns a list of thumbnails with varying types and sizes",
        "parameters": [
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "description": "(optional) placeid",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.Thumbnails.Apis.Models.ThumbnailBatchRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Roblox.Thumbnails.Apis.Models.ThumbnailBatchRequest"
                }
              }
            }
          },
          "description": "List of ThumbnailBatchRequest objects, may contain the following request types:\r\n            1. Avatar\r\n            2. AvatarHeadShot\r\n            3. GameIcon\r\n            4. BadgeIcon\r\n            5. GameThumbnail\r\n            6. GamePass\r\n            7. Asset\r\n            8. BundleThumbnail\r\n            9. Outfit\r\n            10. GroupIcon\r\n            11. DeveloperProduct\r\n            12. AutoGeneratedAsset\r\n            13. AvatarBust\r\n            14. PlaceIcon\r\n            15. AutoGeneratedGameIcon\r\n            16. ForceAutoGeneratedGameIcon\r\n            17. Look\r\n            18. CreatorContextAsset\r\n            19. Screenshot",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailBatchResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailBatchResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: There are too many requested Ids.\r\n2: The requested image format is invalid. Please see documentation for valid thumbnail format parameter name and values.\r\n3: The requested size is invalid. Please see documentation for valid thumbnail size parameter name and format.\r\n4: The requested Ids are invalid, of an invalid type or missing.\r\n7: The specified type is not supported by the batch endpoint"
          },
          "403": {
            "description": "9: User not authorized to use AutoGenerated or ForceAutoGenerated return policies."
          }
        },
        "servers": [
          {
            "url": "https://thumbnails.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/post_v1_batch"
        }
      }
    },
    "/v1/resize/{hash}/{width}/{height}/{type}/{format}/{filterType}": {
      "get": {
        "tags": ["Thumbnails"],
        "summary": "Resizes larger thumbnails to specified size and format",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "description": "Hash of larger thumbnail",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "width",
            "description": "Desired width of thumbnail",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "height",
            "description": "Desired height of thumbnail",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "type",
            "description": "Thumbnail Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "format",
            "description": "Desired image format of the thumbnail",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filterType",
            "description": "E.g. is output circular",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "shouldModify",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://thumbnailsresizer.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_resize__hash___width___height___type___format___filterType_"
        }
      }
    },
    "/v1/secureresize/{thumbPrint}/{hash}/{width}/{height}/{type}/{format}/{filterType}": {
      "get": {
        "tags": ["Thumbnails"],
        "summary": "Decrypts and Resizes larger thumbnails to specified size and format",
        "parameters": [
          {
            "in": "path",
            "name": "thumbPrint",
            "description": "The thumbPrint that represents the key version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "hash",
            "description": "Hash of larger thumbnail",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "width",
            "description": "Desired width of thumbnail",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "height",
            "description": "Desired height of thumbnail",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "type",
            "description": "Thumbnail Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "format",
            "description": "Desired image format of the thumbnail",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filterType",
            "description": "E.g. is output circular",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://thumbnailsresizer.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [{}],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/thumbnails#/default/get_v1_secureresize__thumbPrint___hash___width___height___type___format___filterType_"
        }
      }
    },
    "/v1/trades/{tradeId}": {
      "get": {
        "tags": ["Trades"],
        "summary": "Gets detailed information about a trade.",
        "parameters": [
          {
            "in": "path",
            "name": "tradeId",
            "description": "The trade id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.TradeDetailResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.TradeDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The trade cannot be found or you are not authorized to view it."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n4: You are not authorized to modify this trade."
          },
          "404": {
            "description": "2: The trade cannot be found or you are not authorized to view it."
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/get_v1_trades__tradeId_"
        }
      }
    },
    "/v1/trades/{tradeStatusType}": {
      "get": {
        "tags": ["Trades"],
        "summary": "Fetches a list of the authenticated user's trades.",
        "parameters": [
          {
            "in": "path",
            "name": "tradeStatusType",
            "description": "The trade status type.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "pattern": "^[A-Za-z]*$",
              "enum": [1, 2, 3, 4]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by trade creation date",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Trades.Api.TradeResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Trades.Api.TradeResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid trade status type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/get_v1_trades__tradeStatusType_"
        }
      }
    },
    "/v1/trades/{tradeStatusType}/count": {
      "get": {
        "tags": ["Trades"],
        "summary": "Gets the total number of pending trades for the authenticated user.\r\nInbound is the only accepted tradeStatusType.",
        "parameters": [
          {
            "in": "path",
            "name": "tradeStatusType",
            "description": "The trade status type to fetch a total count for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2, 3, 4]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.TradeCountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.TradeCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid trade status type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/get_v1_trades__tradeStatusType__count"
        }
      }
    },
    "/v1/trades/metadata": {
      "get": {
        "tags": ["Trades"],
        "summary": "Gets metadata about the trade system.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.TradeMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.TradeMetadata"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/get_v1_trades_metadata"
        }
      }
    },
    "/v1/users/{userId}/can-trade-with": {
      "get": {
        "tags": ["Trades"],
        "summary": "Returns whether you can trade with another user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The other user's id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.CanTradeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.CanTradeResponse"
                }
              }
            }
          },
          "400": {
            "description": "10: Invalid trade partner. See field for whether the invalid partner is the sender or receiver."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/get_v1_users__userId__can_trade_with"
        }
      }
    },
    "/v1/trades/{tradeId}/decline": {
      "post": {
        "tags": ["Trades"],
        "summary": "Declines a trade.",
        "parameters": [
          {
            "in": "path",
            "name": "tradeId",
            "description": "The trade id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: The trade cannot be found or you are not authorized to view it.\r\n3: The trade is inactive.\r\n4: You are not authorized to modify this trade.\r\n7: The user cannot trade. See field for whether the user who cannot trade is the sender or receiver."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "5: Trading system is unavailable"
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/post_v1_trades__tradeId__decline"
        }
      }
    },
    "/v1/trades/expire-outdated": {
      "post": {
        "tags": ["Trades"],
        "summary": "Deprecated. TradeSession are automatically set to expire while the inbound/outbound trades are fetched.\r\nExpires Outdated Inbound Trades for User",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/post_v1_trades_expire_outdated"
        }
      }
    },
    "/v2/trades/{tradeId}": {
      "get": {
        "tags": ["Trades"],
        "summary": "Gets the details of a trade.",
        "parameters": [
          {
            "in": "path",
            "name": "tradeId",
            "description": "The id of the trade.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.TradeDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.TradeDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "0: An unknown error occured."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n4: You are not authorized to modify this trade."
          },
          "403": {
            "description": "4: You are not authorized to modify this trade."
          },
          "404": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/get_v2_trades__tradeId_"
        }
      }
    },
    "/v2/users/{userId}/tradableItems": {
      "get": {
        "tags": ["Trades"],
        "summary": "Gets tradable items for a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "search",
            "description": "Optional search query to filter items by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemTargetTypes",
            "description": "Optional list of item target types to filter by.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "description": "The type of the underlying of a tradable item. ['Unknown' = 0, 'HatAccessory' = 1, 'HairAccessory' = 2, 'FaceAccessory' = 3, 'NeckAccessory' = 4, 'ShoulderAccessory' = 5, 'FrontAccessory' = 6, 'BackAccessory' = 7, 'WaistAccessory' = 8, 'Gear' = 9, 'Face' = 10, 'JacketAccessory' = 11, 'SweaterAccessory' = 12, 'DressSkirtAccessory' = 13, 'Character' = 14, 'DynamicHead' = 15, 'Shoes' = 16, 'Animation' = 17]",
                "enum": [
                  "Unknown",
                  "HatAccessory",
                  "HairAccessory",
                  "FaceAccessory",
                  "NeckAccessory",
                  "ShoulderAccessory",
                  "FrontAccessory",
                  "BackAccessory",
                  "WaistAccessory",
                  "Gear",
                  "Face",
                  "JacketAccessory",
                  "SweaterAccessory",
                  "DressSkirtAccessory",
                  "Character",
                  "DynamicHead",
                  "Shoes",
                  "Animation"
                ],
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "description": "The key to sort tradable items by.",
            "schema": {
              "type": "string",
              "enum": ["Unknown", "CreationTime", "AcquisitionTime"],
              "default": "CreationTime"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The sort order for the tradable items.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2],
              "default": 2
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The pagination cursor.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.GetUserTradableItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.GetUserTradableItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "25: The cursor provided is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n4: You are not authorized to modify this trade."
          },
          "403": {
            "description": "4: You are not authorized to modify this trade."
          },
          "404": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://trades.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/trades#/default/get_v2_users__userId__tradableItems"
        }
      }
    },
    "/v1/game-localization-roles/games/{gameId}/current-user/roles": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Retrieves the list of roles granted to current logged-in user",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_System.String_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_System.String_"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "2: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://translationroles.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_game_localization_roles_games__gameId__current_user_roles"
        }
      }
    },
    "/v1/game-localization-roles/games/{gameId}/roles/{role}/assignees": {
      "get": {
        "tags": ["Localization", "Universes", "Users"],
        "summary": "Gets list of users assigned a specific role in a game.",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "role",
            "description": "The Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["translator"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.TranslationRoles.Api.Assignee_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.TranslationRoles.Api.Assignee_"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid game id"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "1: You must be authorized to use this endpoint"
          },
          "503": {
            "description": "2: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://translationroles.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_game_localization_roles_games__gameId__roles__role__assignees"
        }
      }
    },
    "/v1/game-localization-roles/roles/{role}/current-user": {
      "get": {
        "tags": ["Localization", "Universes"],
        "summary": "Gets the list of games and associated role assignment info for the requested user and role.",
        "parameters": [
          {
            "in": "path",
            "name": "role",
            "description": "The Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["translator"]
            }
          },
          {
            "in": "query",
            "name": "exclusiveStartKey",
            "description": "Part of pagination. Last primary key of returned items in previous operation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Part of pagination. Maximum number of items that might be returned in the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "groupId",
            "description": "Optional seleted groupId of resources requested for the user and role.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TranslationRoles.Api.GetGameLocalizationRoleAssignmentsForUserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TranslationRoles.Api.GetGameLocalizationRoleAssignmentsForUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "10: Invalid page size\r\n11: Maximum page size exceeded\r\n12: Invalid exclusive start key"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "500": {
            "description": "0: An unknown error occurred"
          },
          "503": {
            "description": "2: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://translationroles.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/get_v1_game_localization_roles_roles__role__current_user"
        }
      }
    },
    "/v1/game-localization-roles/games/{gameId}": {
      "patch": {
        "tags": ["Localization", "Universes"],
        "summary": "Assigns or revokes a role",
        "parameters": [
          {
            "in": "path",
            "name": "gameId",
            "description": "The id of the game",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TranslationRoles.Api.UpdateRoleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TranslationRoles.Api.UpdateRoleRequest"
              }
            }
          },
          "description": "The request body"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "3: Invalid game id\r\n4: Invalid assignee id\r\n6: Request body can't be null\r\n7: The role you are assigning has reached max limit"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: You must be authorized to use this endpoint"
          },
          "429": {
            "description": "5: Too many attempts. Please try again later."
          },
          "503": {
            "description": "2: Feature is disabled"
          }
        },
        "servers": [
          {
            "url": "https://translationroles.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/localization#/default/patch_v1_game_localization_roles_games__gameId_"
        }
      }
    },
    "/v1/metadata#TwoStepVerificationApi": {
      "get": {
        "tags": ["Accounts", "Metadata"],
        "summary": "Gets two step verification system metadata.",
        "description": "The metadata endpoint takes in optional request parameters to output additional context\r\nfor when the user is unauthenticated but attempting to login with two step verification.\r\n\r\nWhen supplied, all three request parameters must be sent and match up.",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "The user ID.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "challengeId",
            "description": "The active two step verification challenge ID if there is one.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "actionType",
            "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType associated with the challenge.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.MetadataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.MetadataResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_metadata"
        }
      }
    },
    "/v1/users/{userId}/configuration": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets two step verification configuration for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The Id of the user to get the configuration for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "challengeId",
            "description": "The active challenge for the user (as an alternative when the user is unauthenticated).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "actionType",
            "description": "The action type the challengeId is associated with.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.UserConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.UserConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID."
          },
          "403": {
            "description": "2: The user ID is invalid."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_users__userId__configuration"
        }
      }
    },
    "/v1/users/{userId}/recovery-codes": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Gets the current status of recovery codes for a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RecoveryCodesStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RecoveryCodesStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/get_v1_users__userId__recovery_codes"
        }
      }
    },
    "/v1/users/{userId}/challenges/authenticator/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verifies a two step verification challenge code via authenticator app.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.VerifyCodeRequest2"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid.\r\n10: The two step verification challenge code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_authenticator_verify"
        }
      }
    },
    "/v1/users/{userId}/challenges/cross-device/retract": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Reverts a user's dialog state from ACTIVE to PENDING.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetractDialogRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetractDialogRequest"
              }
            }
          },
          "description": "The Roblox.TwoStepVerification.Api.RetractDialogRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetractDialogResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetractDialogResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n19: Challenge denied."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_cross_device_retract"
        }
      }
    },
    "/v1/users/{userId}/challenges/cross-device/retry": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Retry a Cross Device two step verification approval.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetryApprovalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetryApprovalRequest"
              }
            }
          },
          "description": "The Roblox.TwoStepVerification.Api.RetryApprovalRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetryApprovalResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RetryApprovalResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n19: Challenge denied."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_cross_device_retry"
        }
      }
    },
    "/v1/users/{userId}/challenges/cross-device/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verifies a two step verification approval via Cross Device. Cross Device approval does not use a verification code.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyApprovalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyApprovalRequest"
              }
            }
          },
          "description": "The Roblox.TwoStepVerification.Api.VerifyApprovalRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyApprovalResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyApprovalResponse"
                }
              }
            }
          },
          "400": {
            "description": "0: An unknown error occurred with the request.\r\n1: Invalid challenge ID.\r\n2: The user ID is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n19: Challenge denied."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_cross_device_verify"
        }
      }
    },
    "/v1/users/{userId}/challenges/email/send-code": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Sends a two step verification challenge code via email.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.SendCodeRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid."
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_email_send_code"
        }
      }
    },
    "/v1/users/{userId}/challenges/email/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verifies a two step verification challenge with a code sent via email.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.VerifyCodeRequest3"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n10: The two step verification challenge code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid."
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_email_verify"
        }
      }
    },
    "/v1/users/{userId}/challenges/passkey/verify-finish": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Validates the assertion data returned by the passkey.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid.\r\n10: The two step verification challenge code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_passkey_verify_finish"
        }
      }
    },
    "/v1/users/{userId}/challenges/passkey/verify-start": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Provides a challenge for the passkey to authenticate.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.SendCodeRequest2"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyStartPasskeyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyStartPasskeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The user is not allowed to perform the requested action."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_passkey_verify_start"
        }
      }
    },
    "/v1/users/{userId}/challenges/password/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verifies a two step verification challenge with a password (code).",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.VerifyCodeRequest3"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n4: The password is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid."
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_password_verify"
        }
      }
    },
    "/v1/users/{userId}/challenges/recovery-codes/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verifies a two step verification challenge via a recovery code.",
        "description": "Once a recovery code has been used to verify a challenge it cannot be used again.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.VerifyCodeRequest2"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid.\r\n10: The two step verification challenge code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_recovery_codes_verify"
        }
      }
    },
    "/v1/users/{userId}/challenges/security-key/verify-finish": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Validates the assertion data returned by the security key.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid.\r\n10: The two step verification challenge code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_security_key_verify_finish"
        }
      }
    },
    "/v1/users/{userId}/challenges/security-key/verify-start": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Provides a challenge for the security key to authenticate.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.SendCodeRequest2"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyStartSecurityKeyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyStartSecurityKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The user is not allowed to perform the requested action."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_security_key_verify_start"
        }
      }
    },
    "/v1/users/{userId}/challenges/sms/send-code": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Sends a two step verification code via SMS for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.SendCodeRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid."
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_sms_send_code"
        }
      }
    },
    "/v1/users/{userId}/challenges/sms/verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Verifies a two step verification challenge with a code sent via SMS.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.VerifyCodeRequest3"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: Invalid challenge ID.\r\n2: The user ID is invalid.\r\n10: The two step verification challenge code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__challenges_sms_verify"
        }
      }
    },
    "/v1/users/{userId}/configuration/authenticator/disable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Disables two step verification via authenticator for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid.\r\n4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The user is not allowed to perform the requested action."
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_authenticator_disable"
        }
      }
    },
    "/v1/users/{userId}/configuration/authenticator/enable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Initiates enabling authenticator-based two step verification for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
              }
            }
          },
          "description": "The Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableAuthenticatorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableAuthenticatorResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid.\r\n3: The email is invalid.\r\n4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: The two step verification configuration is already enabled."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_authenticator_enable"
        }
      }
    },
    "/v1/users/{userId}/configuration/authenticator/enable-verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Finishes enabling authenticator-based two step verification for the specified user.",
        "description": "Enabling authenticator-based two step verification requires two parts to help ensure\r\nthe user has properly stored the authenticator key in their authenticator app.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableVerifyAuthenticatorRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableVerifyAuthenticatorRequest"
              }
            }
          },
          "description": "The Roblox.TwoStepVerification.Api.EnableVerifyAuthenticatorRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableVerifyAuthenticatorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableVerifyAuthenticatorResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid.\r\n4: The password is invalid.\r\n10: The two step verification challenge code is invalid.\r\n12: Invalid setup token."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: The two step verification configuration is already enabled."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_authenticator_enable_verify"
        }
      }
    },
    "/v1/users/{userId}/configuration/email/disable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Disables two step verification via email for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid.\r\n8: The user is not allowed to perform the requested action."
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_email_disable"
        }
      }
    },
    "/v1/users/{userId}/configuration/email/enable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Enables two step verification via email for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
              }
            }
          },
          "description": "The request body.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "3: The email is invalid.\r\n4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_email_enable"
        }
      }
    },
    "/v1/users/{userId}/configuration/security-key/disable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Disables a batch of credentials for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.DisableSecurityKeyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.DisableSecurityKeyRequest"
              }
            }
          },
          "description": "The request bodyRoblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The user is not allowed to perform the requested action."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_security_key_disable"
        }
      }
    },
    "/v1/users/{userId}/configuration/security-key/enable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Initiates security key registration by providing credential creation options.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableSecurityKeyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableSecurityKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid.\r\n4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: The two step verification configuration is invalid for this action.\r\n16: Reached limit of security keys registered."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_security_key_enable"
        }
      }
    },
    "/v1/users/{userId}/configuration/security-key/enable-verify": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Finishes security key registration and stores credential. Enables security key as a 2sv media type if it is a user's first key.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableVerifySecurityKeyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableVerifySecurityKeyRequest"
              }
            }
          },
          "description": "The request body.Roblox.TwoStepVerification.Api.EnableVerifySecurityKeyRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid.\r\n17: Invalid security key nickname."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n17: Invalid security key nickname."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_security_key_enable_verify"
        }
      }
    },
    "/v1/users/{userId}/configuration/security-key/list": {
      "post": {
        "tags": ["Accounts"],
        "summary": "List a user's registered security keys.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.ListSecurityKeyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.ListSecurityKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_security_key_list"
        }
      }
    },
    "/v1/users/{userId}/configuration/sms/disable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Disables two step verification via SMS for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest"
              }
            }
          },
          "description": "The request body.Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid.\r\n8: The user is not allowed to perform the requested action."
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_sms_disable"
        }
      }
    },
    "/v1/users/{userId}/configuration/sms/enable": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Enables two step verification via SMS for the specified user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "4: The password is invalid.\r\n15: The phone number is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The user ID is invalid."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance.\r\n8: The user is not allowed to perform the requested action."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__configuration_sms_enable"
        }
      }
    },
    "/v1/users/{userId}/recovery-codes/clear": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Clears any existing recovery codes for the user.",
        "description": "Clearing recovery codes voids any recovery codes previously generated for the user.\r\nNew recovery codes will have to be generated to pass two step verification via recovery code.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.ClearRecoveryCodesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.ClearRecoveryCodesRequest"
              }
            }
          },
          "description": "The Roblox.TwoStepVerification.Api.ClearRecoveryCodesRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid.\r\n4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__recovery_codes_clear"
        }
      }
    },
    "/v1/users/{userId}/recovery-codes/regenerate": {
      "post": {
        "tags": ["Accounts"],
        "summary": "Clears any existing recovery codes and generates a new batch of recovery codes.",
        "description": "Two step verification recovery codes do not enforce that two step verification must be passed when logging in.\r\nAt least one two step verification media type must be enabled to trigger the two step verification flow.\r\nRecovery codes are intended to be used to pass two step verification when the enabled media type is unavailable.\r\n\r\nRecovery codes generated by this endpoint do not have an expiration.\r\n\r\nOnce a recovery code generated by this endpoint has been used it cannot be used again.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user ID to generate recovery codes for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RegenerateRecoveryCodesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RegenerateRecoveryCodesRequest"
              }
            }
          },
          "description": "The Roblox.TwoStepVerification.Api.RegenerateRecoveryCodesRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RegenerateRecoveryCodesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.RegenerateRecoveryCodesResponse"
                }
              }
            }
          },
          "400": {
            "description": "2: The user ID is invalid.\r\n4: The password is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "5: Too many requests."
          },
          "503": {
            "description": "7: Two step verification is currently under maintenance."
          }
        },
        "servers": [
          {
            "url": "https://twostepverification.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/accounts#/default/post_v1_users__userId__recovery_codes_regenerate"
        }
      }
    },
    "/v1/birthdate#UsersApi": {
      "get": {
        "summary": "Get the user's birthdate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.BirthdateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.BirthdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "post": {
        "summary": "Update the user's birthdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.BirthdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.BirthdateRequest"
              }
            }
          },
          "description": "The Roblox.Users.Api.BirthdateRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found.\r\n4: The birthdate provided is invalid.\r\n8: Password is incorrect."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: PIN is locked.\r\n5: Invalid birthdate change."
          },
          "500": {
            "description": "0: An unknown error occured.\r\n5: Invalid birthdate change."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/description#UsersApi": {
      "get": {
        "summary": "Get the user's description",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.DescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.DescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "post": {
        "summary": "Update the user's description",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.DescriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.DescriptionRequest"
              }
            }
          },
          "description": "The Roblox.Users.Api.DescriptionRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.DescriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.DescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: PIN is locked."
          },
          "500": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "3: This feature is currently disabled. Please try again later."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/display-names/validate": {
      "get": {
        "summary": "Validate a display name for a new user.",
        "parameters": [
          {
            "in": "query",
            "name": "displayName",
            "description": "The display name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "birthdate",
            "description": "The new user's birthdate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Display name is too short\r\n2: Display name is too long\r\n3: Display name contains invalid characters\r\n4: Display name has been moderated\r\n6: Request must contain a birthdate\r\n8: Display name has too many combinations of character sets"
          },
          "429": {
            "description": "5: Display name updates for this user have been throttled"
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/gender#UsersApi": {
      "get": {
        "summary": "Get the user's gender",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.GenderResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.GenderResponse"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      },
      "post": {
        "summary": "Update the user's gender",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.GenderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.GenderRequest"
              }
            }
          },
          "description": "The Roblox.Users.Api.GenderRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: User not found.\r\n6: The gender provided is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: PIN is locked."
          },
          "500": {
            "description": "0: An unknown error occured."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": ["User profiles", "Users"],
        "summary": "Gets detailed user information by id.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.GetUserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.GetUserResponse"
                }
              }
            }
          },
          "404": {
            "description": "3: The user id is invalid."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/user-profiles#/default/get_v1_users__userId_"
        }
      }
    },
    "/v1/users/{userId}/display-names/validate": {
      "get": {
        "tags": ["Users"],
        "summary": "Validate a display name for an existing user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "displayName",
            "description": "The display name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Display name is too short\r\n2: Display name is too long\r\n3: Display name contains invalid characters\r\n4: Display name has been moderated\r\n8: Display name has too many combinations of character sets"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "7: The user id is invalid."
          },
          "429": {
            "description": "5: Display name updates for this user have been throttled"
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/get_v1_users__userId__display_names_validate"
        }
      }
    },
    "/v1/users/{userId}/username-history": {
      "get": {
        "tags": ["User profiles", "Users"],
        "summary": "Retrieves the username history for a particular user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "The order the results are sorted in.",
            "schema": {
              "type": "string",
              "enum": ["Asc", "Desc"],
              "default": "Asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Users.Api.UsernameHistoryResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Users.Api.UsernameHistoryResponse_"
                }
              }
            }
          },
          "400": {
            "description": "3: The user id is invalid."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/user-profiles#/default/get_v1_users__userId__username_history"
        }
      }
    },
    "/v1/users/authenticated": {
      "get": {
        "summary": "Gets the minimal authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.AuthenticatedGetUserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.AuthenticatedGetUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/authenticated/age-bracket": {
      "get": {
        "summary": "Gets the age bracket of the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.UserAgeBracketResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.UserAgeBracketResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/authenticated/country-code": {
      "get": {
        "summary": "Gets the country code of the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.UserCountryCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.UserCountryCodeResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/authenticated/roles": {
      "get": {
        "summary": "Gets the (public) roles of the authenticated user, such as `\"Soothsayer\"` and `\"BetaTester\"`.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.UserRolesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Users.Api.UserRolesResponse"
                }
              }
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ]
      }
    },
    "/v1/users/search": {
      "get": {
        "tags": ["Users"],
        "summary": "Searches for users by keyword.",
        "parameters": [
          {
            "in": "query",
            "name": "keyword",
            "description": "The search keyword.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sessionId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [10, 25, 50, 100],
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Users.Api.SearchGetUserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Users.Api.SearchGetUserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "5: The keyword was filtered.\r\n6: The keyword is too short."
          },
          "429": {
            "description": "4: Too many requests."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/get_v1_users_search"
        }
      }
    },
    "/v1/usernames/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Get users by usernames.",
        "description": "This endpoint will also check previous usernames.\r\nDoes not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.MultiGetByUsernameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.MultiGetByUsernameRequest"
              }
            }
          },
          "description": "The Roblox.Users.Api.MultiGetByUsernameRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Users.Api.MultiGetUserByNameResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Users.Api.MultiGetUserByNameResponse_"
                }
              }
            }
          },
          "400": {
            "description": "2: Too many usernames."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/post_v1_usernames_users"
        }
      }
    },
    "/v1/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Get users by ids.",
        "description": "Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.MultiGetByUserIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.MultiGetByUserIdRequest"
              }
            }
          },
          "description": "The Roblox.Users.Api.MultiGetByUserIdRequest.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Users.Api.MultiGetUserResponse_"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Users.Api.MultiGetUserResponse_"
                }
              }
            }
          },
          "400": {
            "description": "1: Too many ids."
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {},
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/users#/default/post_v1_users"
        }
      }
    },
    "/v1/users/{userId}/display-names": {
      "patch": {
        "tags": ["User profiles", "Users"],
        "summary": "Set the display name for the authorized user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "the user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.SetDisplayNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Roblox.Users.Api.SetDisplayNameRequest"
              }
            }
          },
          "description": "Roblox.Users.Api.SetDisplayNameRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roblox.Web.WebAPI.ApiEmptyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "1: Display name is too short\r\n2: Display name is too long\r\n3: Display name contains invalid characters\r\n4: Display name has been moderated\r\n8: Display name has too many combinations of character sets"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n7: The user id is invalid."
          },
          "429": {
            "description": "5: Display name updates for this user have been throttled"
          }
        },
        "servers": [
          {
            "url": "https://users.roblox.com"
          }
        ],
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": false
        },
        "security": [
          {
            "roblox-legacy-cookie": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/user-profiles#/default/patch_v1_users__userId__display_names"
        }
      }
    },
    "/toolbox-service/v2/assets:search": {
      "get": {
        "tags": ["Assets", "Creator Store"],
        "summary": "Search Creator Store Assets",
        "description": "Search Creator Store for assets.",
        "parameters": [
          {
            "name": "searchCategoryType",
            "in": "query",
            "description": "The asset type to search within.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchCategoryType"
                }
              ],
              "description": "This represents a \"subset\" of Toolbox.Service.CategoryType options and represent the full set\r\nof \"categories\" (or asset types) that can be searched upon from the toolbox search API."
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The search terms used to filter the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelSubTypes",
            "in": "query",
            "description": "When searching for models, the subtypes associated with the search results.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModelSubType"
              },
              "nullable": true
            }
          },
          {
            "name": "excludedModelSubTypes",
            "in": "query",
            "description": "When searching for models, the subtypes not associated with the search results.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModelSubType"
              },
              "nullable": true
            }
          },
          {
            "name": "creator",
            "in": "query",
            "description": "Deprecated: Please refer to the 'userId' and 'groupId' properties instead. The creator type and ID. E.g. \"user/123\" or \"group/456\"",
            "schema": {
              "pattern": "^(user|group)/\\d+$",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The User ID of the creator. Only one of 'userId' and 'groupId' can be present in a query.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "The Group ID of the creator. Only one of 'userId' and 'groupId' can be present in a query.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The identifier for the desired search results page. Only one of 'pageNumber' and 'pageToken' can be present in a query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve, starting from 0. Only one of 'pageNumber' and 'pageToken' can be present in a query.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The number of assets to be returned. Cannot be larger than 100.",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The sort direction of the search results.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortDirection"
                }
              ],
              "description": "Represents the direction in which to sort the results",
              "default": "None"
            }
          },
          {
            "name": "sortCategory",
            "in": "query",
            "description": "The category to sort the search results by.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortCategory"
                }
              ],
              "description": "The category to sort the search results by.",
              "default": "Relevance"
            }
          },
          {
            "name": "audioMinDurationSeconds",
            "in": "query",
            "description": "When searching for audio, the minimum duration of the audio assets. If included, must be greater than or equal to 0.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "audioMaxDurationSeconds",
            "in": "query",
            "description": "When searching for audio, the maximum duration of the audio assets. If included, must be greater than or equal to 0.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "audioArtist",
            "in": "query",
            "description": "When searching for audio, the artist name of the audio assets.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audioAlbum",
            "in": "query",
            "description": "When searching for audio, the album name of the audio assets.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeTopCharts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false,
              "nullable": true
            }
          },
          {
            "name": "audioTypes",
            "in": "query",
            "description": "When searching for audio, the type of the audio assets.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchAudioTypeModel"
              },
              "nullable": true
            }
          },
          {
            "name": "includedInstanceTypes",
            "in": "query",
            "description": "When searching for models, this filters that the following [Instance](https://create.roblox.com/docs/reference/engine/classes/Instance) types are included in the model.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModelInstanceType"
              },
              "nullable": true
            }
          },
          {
            "name": "includeOnlyVerifiedCreators",
            "in": "query",
            "description": "Whether the results should only include assets created by verified creators.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "minPriceCents",
            "in": "query",
            "description": "The minimum price of the asset in cents. If included, must be greater than or equal to 0.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "maxPriceCents",
            "in": "query",
            "description": "The maximum price of the asset in cents. If included, must be greater than or equal to 0.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "facets",
            "in": "query",
            "description": "Additional keywords to query by.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          {
            "name": "searchView",
            "in": "query",
            "description": "Indicates which fields will be populated in the response.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchView"
                }
              ],
              "description": "This view controls which fields are populated in the search response. A lighter\r\nview will result in faster response times and higher reliability.",
              "default": "Core"
            }
          },
          {
            "name": "musicChartType",
            "in": "query",
            "description": "Indicates which music charts to filter from.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MusicChartType"
                }
              ],
              "description": "Represents which music chart to pull entries from, if any",
              "default": "None"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchCreatorStoreAssetsResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProblemDetails"
                    },
                    {
                      "$ref": "#/components/schemas/HttpValidationProblemDetails"
                    }
                  ],
                  "nullable": true
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-scopes": [
          {
            "name": "creator-store-product:read"
          }
        ],
        "security": [
          {
            "roblox-legacy-cookie": []
          },
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_toolbox_service_v2_assets_search"
        }
      }
    },
    "/toolbox-service/v2/assets/{id}": {
      "get": {
        "tags": ["Assets", "Creator Store"],
        "summary": "Get Creator Store Asset Details",
        "description": "Get details for a single Creator Store asset.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The asset ID to retrieve details for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatorStoreAsset"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProblemDetails"
                    },
                    {
                      "$ref": "#/components/schemas/HttpValidationProblemDetails"
                    }
                  ],
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProblemDetails"
                    },
                    {
                      "$ref": "#/components/schemas/HttpValidationProblemDetails"
                    }
                  ],
                  "nullable": true
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProblemDetails"
                    },
                    {
                      "$ref": "#/components/schemas/HttpValidationProblemDetails"
                    }
                  ],
                  "nullable": true
                }
              }
            }
          }
        },
        "x-roblox-engine-usability": {
          "apiKeyWithHttpService": true
        },
        "x-roblox-stability": "BETA",
        "x-roblox-rate-limits": {
          "perApiKeyOwner": {
            "period": "MINUTE",
            "maxInPeriod": 1000
          }
        },
        "x-roblox-scopes": [
          {
            "name": "creator-store-product:read"
          }
        ],
        "security": [
          {
            "roblox-legacy-cookie": []
          },
          {
            "roblox-api-key": []
          }
        ],
        "externalDocs": {
          "url": "https://create.roblox.com/docs/cloud/features/assets#/default/get_toolbox_service_v2_assets__id_"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptGroupJoinRequestRequest": {
        "type": "object",
        "properties": {},
        "description": "A join request ID."
      },
      "AssetQuota": {
        "type": "object",
        "properties": {
          "path": {
            "example": "users/123/asset-quotas/some-asset-quota",
            "type": "string",
            "description": "The resource path of the asset quota.\n\nFormat: `users/{user_id}/asset-quotas/{asset_quota_id}`"
          },
          "quotaType": {
            "example": "QUOTA_TYPE_UNSPECIFIED",
            "enum": [
              "QUOTA_TYPE_UNSPECIFIED",
              "RATE_LIMIT_UPLOAD",
              "RATE_LIMIT_CREATOR_STORE_DISTRIBUTE"
            ],
            "type": "string",
            "description": "Type of quota.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | QUOTA_TYPE_UNSPECIFIED | The default quota type. |\n  | RATE_LIMIT_UPLOAD | Rate limit on how often one can upload an asset. |\n  | RATE_LIMIT_CREATOR_STORE_DISTRIBUTE | Rate limit on how often one can distribute an asset on the Creator Store. |",
            "format": "enum"
          },
          "assetType": {
            "example": "ASSET_TYPE_UNSPECIFIED",
            "enum": [
              "ASSET_TYPE_UNSPECIFIED",
              "IMAGE",
              "TSHIRT",
              "AUDIO",
              "MESH",
              "LUA",
              "HAT",
              "PLACE",
              "MODEL",
              "SHIRT",
              "PANTS",
              "DECAL",
              "HEAD",
              "FACE",
              "GEAR",
              "ANIMATION",
              "TORSO",
              "RIGHT_ARM",
              "LEFT_ARM",
              "LEFT_LEG",
              "RIGHT_LEG",
              "YOUTUBE_VIDEO",
              "APP",
              "CODE",
              "PLUGIN",
              "SOLID_MODEL",
              "MESH_PART",
              "HAIR_ACCESSORY",
              "FACE_ACCESSORY",
              "NECK_ACCESSORY",
              "SHOULDER_ACCESSORY",
              "FRONT_ACCESSORY",
              "BACK_ACCESSORY",
              "WAIST_ACCESSORY",
              "CLIMB_ANIMATION",
              "DEATH_ANIMATION",
              "FALL_ANIMATION",
              "IDLE_ANIMATION",
              "JUMP_ANIMATION",
              "RUN_ANIMATION",
              "SWIM_ANIMATION",
              "WALK_ANIMATION",
              "POSE_ANIMATION",
              "LOCALIZATION_TABLE_MANIFEST",
              "LOCALIZATION_TABLE_TRANSLATION",
              "EMOTE_ANIMATION",
              "VIDEO",
              "TEXTURE_PACK",
              "TSHIRT_ACCESSORY",
              "SHIRT_ACCESSORY",
              "PANTS_ACCESSORY",
              "JACKET_ACCESSORY",
              "SWEATER_ACCESSORY",
              "SHORTS_ACCESSORY",
              "LEFT_SHOE_ACCESSORY",
              "RIGHT_SHOE_ACCESSORY",
              "DRESS_SKIRT_ACCESSORY",
              "FONT_FAMILY",
              "FONT_FACE",
              "MESH_HIDDEN_SURFACE_REMOVAL",
              "EYEBROW_ACCESSORY",
              "EYELASH_ACCESSORY",
              "MOOD_ANIMATION",
              "DYNAMIC_HEAD",
              "CODE_SNIPPET",
              "ADS_VIDEO"
            ],
            "type": "string",
            "description": "The asset type the quota is for.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | ASSET_TYPE_UNSPECIFIED | The default asset type. |\n  | IMAGE | Image |\n  | TSHIRT | Tshirt |\n  | AUDIO | Audio |\n  | MESH | Mesh |\n  | LUA | Lua |\n  | HAT | Hat |\n  | PLACE | Place |\n  | MODEL | Model |\n  | SHIRT | Classic Shirt |\n  | PANTS | Classic Pants |\n  | DECAL | Decal |\n  | HEAD | Head |\n  | FACE | Face |\n  | GEAR | Gear |\n  | ANIMATION | Animation |\n  | TORSO | Torso |\n  | RIGHT_ARM | Right Arm |\n  | LEFT_ARM | Left Arm |\n  | LEFT_LEG | Left Leg |\n  | RIGHT_LEG | Right Leg |\n  | YOUTUBE_VIDEO | YouTube Video |\n  | APP | App |\n  | CODE | Code |\n  | PLUGIN | Plugin |\n  | SOLID_MODEL | Solid Model |\n  | MESH_PART | Mesh Part |\n  | HAIR_ACCESSORY | Hair Accessory |\n  | FACE_ACCESSORY | Face Accessory |\n  | NECK_ACCESSORY | Neck Accessory |\n  | SHOULDER_ACCESSORY | Shoulder Accessory |\n  | FRONT_ACCESSORY | Front Accessory |\n  | BACK_ACCESSORY | Back Accessory |\n  | WAIST_ACCESSORY | Waist Accessory |\n  | CLIMB_ANIMATION | Climb Animation |\n  | DEATH_ANIMATION | Death Animation |\n  | FALL_ANIMATION | Fall Animation |\n  | IDLE_ANIMATION | Idle Animation |\n  | JUMP_ANIMATION | Jump Animation |\n  | RUN_ANIMATION | Run Animation |\n  | SWIM_ANIMATION | Swim Animation |\n  | WALK_ANIMATION | Walk Animation |\n  | POSE_ANIMATION | Pose Animation |\n  | LOCALIZATION_TABLE_MANIFEST | Localization Table Manifest |\n  | LOCALIZATION_TABLE_TRANSLATION | Localization Table Translation |\n  | EMOTE_ANIMATION | Emote Animation |\n  | VIDEO | Video |\n  | TEXTURE_PACK | Texture Pack |\n  | TSHIRT_ACCESSORY | Tshirt Accessory |\n  | SHIRT_ACCESSORY | Shirt Accessory |\n  | PANTS_ACCESSORY | Pants Accessory |\n  | JACKET_ACCESSORY | Jacket Accessory |\n  | SWEATER_ACCESSORY | Sweater Accessory |\n  | SHORTS_ACCESSORY | Shorts Accessory |\n  | LEFT_SHOE_ACCESSORY | Left Shoe Accessory |\n  | RIGHT_SHOE_ACCESSORY | Right Shoe Accessory |\n  | DRESS_SKIRT_ACCESSORY | Dress Skirt Accessory |\n  | FONT_FAMILY | Font Family |\n  | FONT_FACE | Font Face |\n  | MESH_HIDDEN_SURFACE_REMOVAL | Mesh Hidden Surface Removal |\n  | EYEBROW_ACCESSORY | Eyebrow Accessory |\n  | EYELASH_ACCESSORY | Eyelash Accessory |\n  | MOOD_ANIMATION | Mood Animation |\n  | DYNAMIC_HEAD | Dynamic Head |\n  | CODE_SNIPPET | Code Snippet |\n  | ADS_VIDEO | Ads Video |",
            "format": "enum"
          },
          "usage": {
            "type": "integer",
            "description": "The current usage of the quota.",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "description": "The capacity of the quota.",
            "format": "int64"
          },
          "period": {
            "example": "PERIOD_UNSPECIFIED",
            "enum": ["PERIOD_UNSPECIFIED", "MONTH", "DAY"],
            "type": "string",
            "description": "The period of time the quota is for.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | PERIOD_UNSPECIFIED | The default period, which is invalid. Specify another value. |\n  | MONTH | Month |\n  | DAY | Day |",
            "format": "enum"
          },
          "usageResetTime": {
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The time the usage will reset for this quota.",
            "format": "date-time"
          }
        },
        "description": "Represents a quota for an asset-related action.\n\nFor example, a user might be able to upload 100 audio files per month and\nhave uploaded 15 already. In this example:\n- `quotaType` is `RATE_LIMIT_UPLOAD`\n- `assetType` is `AUDIO`\n- `usage` is `15`\n- `capacity` is `100`\n- `period` is `MONTH`\n`usageResetTime` indicates when a new period begins and usage resets to 0.\nThis value **doesn't** necessarily correlate with the first day of a\ncalendar month or midnight on a given day. For more information on the\nupload process, see the\n[usage\nguide](https://create.roblox.com/docs/en-us/cloud/open-cloud/usage-assets).",
        "x-aep-resource": {
          "patterns": ["users/{user_id}/asset-quotas/{asset_quota_id}"],
          "plural": "asset-quotas",
          "singular": "asset-quota"
        },
        "x-resource": true
      },
      "CreatorStoreProduct": {
        "type": "object",
        "properties": {
          "path": {
            "example": "creator-store-products/123",
            "type": "string",
            "description": "The resource path of the creator store product.\n\nFormat: `creator-store-products/{creator_store_product_id}`"
          },
          "basePrice": {
            "$ref": "#/components/schemas/Money",
            "description": "The base price of the product. For more information, see\n[Money](../../cloud/reference/types.md#money). Each product type (such as\n`pluginAssetId`) supports a set of specific prices. Currently, only setting\na base price in USD is supported.\n\nDepending on type, each Creator Store product has a fixed set of supported\nprices; see the `productType` attribute for the full list. For example, to\nset the price of a plugin to $4.99, use the following base price:\n```\n\"basePrice\": {\n  \"currencyCode\": \"USD\",\n  \"quantity\": {\n    \"significand\": 4990000000,\n    \"exponent\": -9\n  }\n}\n```\n\nNote: The exponent **must** be -9, and the significand must be in this\nformat. The corresponding [Decimal](../../cloud/reference/types.md#decimal)\nformat is `significand * 10^exponent`.\n\nIf you want to set the price of a plugin to $0 (i.e. free), use the\nfollowing `base_price`\n\n```\n\"basePrice\": {\n  \"currencyCode\": \"USD\",\n  \"quantity\": {\n    \"significand\": 0,\n    \"exponent\": 0\n  }\n}\n```\n\nNote: You must still set the `currencyCode` to USD, even for\nfree products.\n\nThe actual purchase price is based on this base price, but often differs\nslightly due to locale-specific considerations.\n\nSet this to zero to make the product free."
          },
          "purchasePrice": {
            "$ref": "#/components/schemas/Money",
            "description": "The effective purchase price for the user, after factoring in\nlocale-specific considerations."
          },
          "published": {
            "example": true,
            "type": "boolean",
            "description": "Whether the seller intends to distribute the Creator Store product on\nthe Creator Store. A seller might intend to distribute a product, but due\nto some restrictions on the seller or underlying Creator Store product, the\nproduct may not be available for purchase. See\n`restrictions` and `purchasable` for more details."
          },
          "restrictions": {
            "readOnly": true,
            "type": "array",
            "items": {
              "example": "RESTRICTION_UNSPECIFIED",
              "enum": [
                "RESTRICTION_UNSPECIFIED",
                "SOLD_ITEM_RESTRICTED",
                "SELLER_TEMPORARILY_RESTRICTED",
                "SELLER_PERMANENTLY_RESTRICTED",
                "SELLER_NO_LONGER_ACTIVE"
              ],
              "type": "string",
              "format": "enum"
            },
            "description": "Restrictions applied to the product. A product can have multiple\nrestrictions active at one time.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | RESTRICTION_UNSPECIFIED | Unspecified restriction. |\n  | SOLD_ITEM_RESTRICTED | The item being sold has been restricted by Roblox  Details may be available by looking up that item directly. |\n  | SELLER_TEMPORARILY_RESTRICTED | The product is restricted because the seller's account is temporarily restricted by Roblox. |\n  | SELLER_PERMANENTLY_RESTRICTED | The product is restricted because the seller's account is permanently restricted by Roblox. |\n  | SELLER_NO_LONGER_ACTIVE | The product is restricted because the seller's account was deleted or is otherwise no longer active. |"
          },
          "purchasable": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "Whether the product is purchasable.\n\nFor this value to be true, `published` must be true and `restrictions` must\nbe empty. If this value is false, the product may not be acquired by any\nuser."
          },
          "userSeller": {
            "readOnly": true,
            "type": "string",
            "description": "The Roblox user selling the product."
          },
          "groupSeller": {
            "readOnly": true,
            "type": "string",
            "description": "The Roblox group selling the product."
          },
          "modelAssetId": {
            "type": "string",
            "description": "The Creator Store product is a model with this asset ID.",
            "x-immutable": true
          },
          "pluginAssetId": {
            "type": "string",
            "description": "The Creator Store product is a plugin with this asset ID.\n\nSupported base prices in USD: $0, $4.99, $5.99, $6.99, $7.99, $8.99,\n$9.99, $10.99, $11.99, $12.99, $13.99, $14.99, $15.99, $16.99, $17.99,\n$18.99, $19.99, $24.99, $29.99, $34.99, $39.99, $44.99, $49.99, $59.99,\n$69.99, $79.99, $89.99, $99.99, $149.99, $199.99, $249.99",
            "x-immutable": true
          },
          "audioAssetId": {
            "type": "string",
            "description": "The Creator Store product is an audio file with this asset ID.",
            "x-immutable": true
          },
          "decalAssetId": {
            "type": "string",
            "description": "The Creator Store product is a decal with this asset ID.",
            "x-immutable": true
          },
          "meshPartAssetId": {
            "type": "string",
            "description": "The Creator Store product is a mesh part with this asset ID.",
            "x-immutable": true
          },
          "videoAssetId": {
            "type": "string",
            "description": "The Creator Store product is a video with this asset ID.",
            "x-immutable": true
          },
          "fontFamilyAssetId": {
            "type": "string",
            "description": "The Creator Store product is a font family with this asset ID.",
            "x-immutable": true
          }
        },
        "description": "Represents a product in the Creator Store. This resource is used to manage\ndistribution and pricing of assets on the Creator Store.",
        "x-aep-resource": {
          "patterns": ["creator-store-products/{creator_store_product_id}"],
          "plural": "creator-store-products",
          "singular": "creator-store-product"
        },
        "x-resource": true,
        "x-oneOf": {
          "productType": [
            "modelAssetId",
            "pluginAssetId",
            "audioAssetId",
            "decalAssetId",
            "meshPartAssetId",
            "videoAssetId",
            "fontFamilyAssetId"
          ],
          "seller": ["userSeller", "groupSeller"]
        }
      },
      "DataStore": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/data-stores/some-data-store",
            "type": "string",
            "description": "The resource path of the data store.\n\nFormat: `universes/{universe_id}/data-stores/{data_store_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the data store was created.",
            "format": "date-time"
          },
          "expireTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the data store will expire (or did expire).\n\nThis field is set when the data store is soft-deleted and indicates\nwhen it will be permanently removed.",
            "format": "date-time"
          },
          "state": {
            "readOnly": true,
            "example": "STATE_UNSPECIFIED",
            "enum": ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"],
            "type": "string",
            "description": "The state of the data store.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | STATE_UNSPECIFIED | The default value. This value is used if the state is omitted. |\n  | ACTIVE | The data store is active. |\n  | DELETED | The data store is deleted.  After the expiration time passes, it will be permanently deleted. |",
            "format": "enum"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "The ID of the data store. Matches the last segment of the path."
          }
        },
        "description": "Represents a data store.",
        "x-aep-resource": {
          "patterns": ["universes/{universe_id}/data-stores/{data_store_id}"],
          "plural": "data-stores",
          "singular": "data-store"
        },
        "x-resource": true
      },
      "DataStoreEntry": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/data-stores/some-data-store/entries/some-data-store-entry",
            "type": "string",
            "description": "The resource path of the data store entry.\n\nFormats:\n* `universes/{universe_id}/data-stores/{data_store_id}/entries/{data_store_entry_id}`\n* `universes/{universe_id}/data-stores/{data_store_id}/scopes/{data_store_scope_id}/entries/{data_store_entry_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the data store entry was created.",
            "format": "date-time"
          },
          "revisionId": {
            "readOnly": true,
            "type": "string",
            "description": "The revision ID of the data store entry.\n\nA new revision is committed whenever the data store entry is changed in any\nway.\n\nThe format is an arbitrary string.\nExample: \"foo\"",
            "x-immutable": true
          },
          "revisionCreateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the revision was created.",
            "format": "date-time"
          },
          "state": {
            "readOnly": true,
            "example": "STATE_UNSPECIFIED",
            "enum": ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"],
            "type": "string",
            "description": "The state of the data store entry.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | STATE_UNSPECIFIED | The default value. This value is used if the state is omitted. |\n  | ACTIVE | The default state of a newly created data store entry. |\n  | DELETED | The data store entry is marked as deleted.  At some point in the future, it will be permanently deleted. |",
            "format": "enum"
          },
          "etag": {
            "type": "string",
            "description": "This checksum is computed by the server based on the value of other\nfields, and may be sent on update and delete requests (and potentially\non certain custom methods) to ensure the client has an up-to-date\nvalue before proceeding."
          },
          "value": {
            "$ref": "#/components/schemas/GoogleProtobufValue",
            "description": "The value of the entry."
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "The resource ID of the entry.\n\nThis matches the last segment of the resource path, and is provided\nonly for convenience."
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Users associated with the entry."
          },
          "attributes": {
            "type": "object",
            "description": "An arbitrary set of attributes associated with the entry."
          }
        },
        "description": "A key-value entry in a data store.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/data-stores/{data_store_id}/entries/{data_store_entry_id}",
            "universes/{universe_id}/data-stores/{data_store_id}/scopes/{data_store_scope_id}/entries/{data_store_entry_id}"
          ],
          "plural": "data-store-entries",
          "singular": "data-store-entry"
        },
        "x-resource": true
      },
      "Decimal": {
        "type": "object",
        "properties": {
          "significand": {
            "type": "integer",
            "description": "The significant digits of the number.",
            "format": "int64"
          },
          "exponent": {
            "type": "integer",
            "description": "Represents the position of the decimal point within the significand.\n\nWhen the exponent is 0, the value of the Decimal is simply the value of\n`significand`.\n\nWhen the exponent is greater than 0, represents the number of trailing\nzeroes after the significant digits.\n\nWhen the exponent is less than 0, represents how many of the significant\ndigits (and implicit leading zeroes, as needed) come after the decmial\npoint.",
            "format": "int32"
          }
        },
        "description": "Represents a decimal number in a form similar to scientific notation.\n\nExamples:\n - 17            === `{significand: 17   exponent: 0} (or just {significand:\n   17})`\n - -0.005        === `{significand: -5   exponent: -3}`\n - 33.5 million  === `{significand: 335  exponent: 5}`\n - 11/8 (1.375)  === `{significand: 1375 exponent: -3}`\n\nNote that the range of a Decimal exceeds that of a JSON `number` (double), as\nwell as that of a `decimal64`."
      },
      "DeclineGroupJoinRequestRequest": {
        "type": "object",
        "properties": {},
        "description": "A join request ID."
      },
      "DiscardMemoryStoreQueueItemsRequest": {
        "type": "object",
        "properties": {
          "readId": {
            "type": "string",
            "description": "The `readId` of the previous read operation for which to discard read\nitems."
          }
        },
        "description": "Discards read items from the front of the queue."
      },
      "FlushMemoryStoreMetadata": {
        "type": "object",
        "properties": {},
        "description": "Represents metadata about the long-running operation corresponding to a\nFlushMemoryStore request.\n\nThis is the type of the `Operation.metadata` field in the response to\n`GetOperation` requests for FlushMemoryStore operations."
      },
      "FlushMemoryStoreRequest": {
        "type": "object",
        "properties": {},
        "description": "Request body not required."
      },
      "FlushMemoryStoreResponse": {
        "type": "object",
        "properties": {},
        "description": "Returns a FlushMemoryStoreResponse object."
      },
      "GenerateSpeechAssetMetadata": {
        "type": "object",
        "properties": {},
        "description": "Represents metadata about the long-running operation corresponding to a\nGenerateSpeechAsset request.\n\nThis is the type of the `Operation.metadata` field in the response to\n`GetOperation` requests for GenerateSpeechAsset operations."
      },
      "GenerateSpeechAssetRequest": {
        "required": ["text"],
        "type": "object",
        "properties": {
          "text": {
            "example": "Hello",
            "type": "string",
            "description": "The text to be translated."
          },
          "speechStyle": {
            "$ref": "#/components/schemas/GeneratedSpeechStyle",
            "description": "The style of the generated speech."
          }
        },
        "description": "Specifies the text from which to generate speech and the voice style."
      },
      "GenerateSpeechAssetResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The generated audio asset ID."
          },
          "remainingQuota": {
            "type": "integer",
            "description": "The remaining quota (the remaining number of requests available\nto the user this calendar month).",
            "format": "int32"
          }
        },
        "description": "Contains a generated audio asset in MPEG-2 Audio Layer III (MP3) format."
      },
      "GenerateSpeechRequest": {
        "required": ["text"],
        "type": "object",
        "properties": {
          "text": {
            "example": "Hello",
            "type": "string",
            "description": "The text to be translated."
          },
          "speechStyle": {
            "$ref": "#/components/schemas/GeneratedSpeechStyle",
            "description": "The style of generated speech."
          }
        },
        "description": "Specifies the text from which to generate speech and the voice style."
      },
      "GenerateSpeechResponse": {
        "type": "object",
        "properties": {
          "audio": {
            "type": "string",
            "description": "The generated audio."
          },
          "remainingQuota": {
            "type": "integer",
            "description": "The remaining quota (remaining number of requests available\nto the user this calendar month).",
            "format": "int32"
          }
        },
        "description": "Contains the generated audio bytes in RFC 6716 (Opus) format."
      },
      "GenerateUserThumbnailMetadata": {
        "type": "object",
        "properties": {},
        "description": "Represents metadata about the long-running operation corresponding to a\nGenerateUserThumbnail request.\n\nThis is the type of the `Operation.metadata` field in the response to\n`GetOperation` requests for GenerateUserThumbnail operations."
      },
      "GenerateUserThumbnailResponse": {
        "type": "object",
        "properties": {
          "imageUri": {
            "type": "string",
            "description": "URI for the generated thumbnail."
          }
        },
        "description": "Returns the URL for the user's avatar thumbnail."
      },
      "GeneratedSpeechStyle": {
        "type": "object",
        "properties": {
          "voiceId": {
            "example": "1",
            "type": "string",
            "description": "An ID corresponding to the voice type specified. A mapping of voice type to\nID number is available in the documentation."
          },
          "pitch": {
            "type": "number",
            "description": "The pitch of the generated speech.",
            "format": "double"
          },
          "speed": {
            "type": "number",
            "description": "The speed of the generated speech.",
            "format": "double"
          }
        },
        "description": "Information about the style of generated speech."
      },
      "GetInstanceMetadata": {
        "type": "object",
        "properties": {},
        "description": "Represents metadata about the long-running operation corresponding to a\nGetInstance request.\n\nThis is the type of the `Operation.metadata` field in the response to\n`GetOperation` requests for GetInstance operations."
      },
      "GoogleProtobufAny": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The type of the serialized message."
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
      },
      "GoogleProtobufValue": {
        "description": "Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values."
      },
      "Group": {
        "type": "object",
        "properties": {
          "path": {
            "example": "groups/123",
            "type": "string",
            "description": "The resource path of the group.\n\nFormat: `groups/{group_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group was last updated.",
            "format": "date-time"
          },
          "id": {
            "readOnly": true,
            "example": "7",
            "type": "string",
            "description": "A unique ID that identifies the group."
          },
          "displayName": {
            "example": "Roblox",
            "type": "string",
            "description": "The name of the group.\n\nMust be non-empty. Has a maximum limit of 50 characters."
          },
          "description": {
            "example": "Official fan club of Roblox!",
            "type": "string",
            "description": "The description of the group.\n\nHas a maximum limit of 1000 characters."
          },
          "owner": {
            "readOnly": true,
            "example": "users/21557",
            "type": "string",
            "description": "The resource path of the owner.\n\nIf the group is abandoned and has no owner, this field is not returned."
          },
          "memberCount": {
            "readOnly": true,
            "example": 10196297,
            "type": "integer",
            "description": "The total number of members within a group.",
            "format": "int32"
          },
          "publicEntryAllowed": {
            "example": true,
            "type": "boolean",
            "description": "Whether the group allows public entry."
          },
          "locked": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "Whether the group is locked.\n\nA locked group is a group that has been\nmoderated/banned by Roblox."
          },
          "verified": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "Whether the group has the verified badge."
          }
        },
        "description": "A mini-community within Roblox for communication, discussions, and more.",
        "x-aep-resource": {
          "patterns": ["groups/{group_id}"],
          "plural": "groups",
          "singular": "group"
        },
        "x-resource": true,
        "x-oneOf": {
          "Owner": ["owner"]
        }
      },
      "GroupJoinRequest": {
        "type": "object",
        "properties": {
          "path": {
            "example": "groups/123/join-requests/123",
            "type": "string",
            "description": "The resource path of the group join request.\n\nFormat: `groups/{group_id}/join-requests/{group_join_request_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group join request was created.",
            "format": "date-time"
          },
          "user": {
            "readOnly": true,
            "example": "users/156",
            "type": "string",
            "description": "The resource path of the user."
          }
        },
        "description": "A request to join a group.\n\nThe `acceptRequests` permission is required.",
        "x-aep-resource": {
          "patterns": [
            "groups/{group_id}/join-requests/{group_join_request_id}"
          ],
          "plural": "group-join-requests",
          "singular": "group-join-request"
        },
        "x-resource": true
      },
      "GroupMembership": {
        "type": "object",
        "properties": {
          "path": {
            "example": "groups/123/memberships/123",
            "type": "string",
            "description": "The resource path of the group membership.\n\nFormat: `groups/{group_id}/memberships/{group_membership_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group membership was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group membership was last updated.",
            "format": "date-time"
          },
          "user": {
            "example": "users/21557",
            "type": "string",
            "description": "The resource path of a member of the group.",
            "x-immutable": true
          },
          "role": {
            "example": "groups/7/roles/99513316",
            "type": "string",
            "description": "The resource path for the role of the group member."
          }
        },
        "description": "A membership to a group. A user ID can be used in place of a membership ID.",
        "x-aep-resource": {
          "patterns": ["groups/{group_id}/memberships/{group_membership_id}"],
          "plural": "group-memberships",
          "singular": "group-membership"
        },
        "x-resource": true
      },
      "GroupRole": {
        "type": "object",
        "properties": {
          "path": {
            "example": "groups/123/roles/123",
            "type": "string",
            "description": "The resource path of the group role.\n\nFormat: `groups/{group_id}/roles/{group_role_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp for when the group role was last updated.\n\nVisible only to owners of the group.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group role was last updated.\n\nVisible only to owners of the group.",
            "format": "date-time"
          },
          "id": {
            "readOnly": true,
            "example": "200",
            "type": "string",
            "description": "A unique ID that identifies a role.\n\nDistinct from a role's rank, which is only unique within the group."
          },
          "displayName": {
            "example": "Member",
            "type": "string",
            "description": "The name of the role.\n\nHas a maximum limit of 100 characters. Names above the limit are\nrejected."
          },
          "description": {
            "example": "This is a description for the role",
            "type": "string",
            "description": "The description of the role.\n\nHas a maximum limit of 1000 characters. Strings above the limit are\nrejected. Visible only to owners of the group."
          },
          "rank": {
            "example": 1,
            "type": "integer",
            "description": "The rank of the role.\n\nThe minimum value is 0. The maximum value is 255.",
            "format": "int32"
          },
          "memberCount": {
            "readOnly": true,
            "example": 10223136,
            "type": "integer",
            "description": "Total number of members within a role.\n\nThis field is not returned for guest roles.",
            "format": "int32"
          },
          "permissions": {
            "$ref": "#/components/schemas/GroupRole_RolePermissions",
            "description": "The permissions granted for this role.\n\nThis value is populated based on the read scope and role of the authorized\nuser or API key creator. If the user or creator is the owner of the parent\ngroup, they are able to view all role permissions in the group. If the user\nor creator is a member of the parent group, they are able to view their\nrole's permissions in the group. Anyone can view guest permissions. In\nthe case that someone can't view the permissions, this field is not\nreturned."
          }
        },
        "description": "A configurable property to grant specific privileges for members within a\ngroup.",
        "x-aep-resource": {
          "patterns": ["groups/{group_id}/roles/{group_role_id}"],
          "plural": "group-roles",
          "singular": "group-role"
        },
        "x-resource": true,
        "x-oneOf": {
          "Description": ["description"],
          "MemberCount": ["memberCount"]
        }
      },
      "GroupRole_RolePermissions": {
        "type": "object",
        "properties": {
          "viewWallPosts": {
            "example": true,
            "type": "boolean",
            "description": "View group wall."
          },
          "createWallPosts": {
            "example": true,
            "type": "boolean",
            "description": "Post on group wall."
          },
          "deleteWallPosts": {
            "example": true,
            "type": "boolean",
            "description": "Delete group wall posts."
          },
          "viewGroupShout": {
            "example": true,
            "type": "boolean",
            "description": "View group shout."
          },
          "createGroupShout": {
            "example": true,
            "type": "boolean",
            "description": "Post group shout."
          },
          "changeRank": {
            "example": true,
            "type": "boolean",
            "description": "Manage lower-ranked member ranks."
          },
          "acceptRequests": {
            "example": true,
            "type": "boolean",
            "description": "Accept join requests."
          },
          "exileMembers": {
            "example": true,
            "type": "boolean",
            "description": "Kick lower-ranked members."
          },
          "manageRelationships": {
            "example": true,
            "type": "boolean",
            "description": "Manage allies and enemies."
          },
          "viewAuditLog": {
            "example": true,
            "type": "boolean",
            "description": "View audit log."
          },
          "spendGroupFunds": {
            "example": true,
            "type": "boolean",
            "description": "Spend group funds."
          },
          "advertiseGroup": {
            "example": true,
            "type": "boolean",
            "description": "Advertise group."
          },
          "createAvatarItems": {
            "example": true,
            "type": "boolean",
            "description": "Create avatar items."
          },
          "manageAvatarItems": {
            "example": true,
            "type": "boolean",
            "description": "Manage avatar items."
          },
          "manageGroupUniverses": {
            "example": true,
            "type": "boolean",
            "description": "Manage group universes."
          },
          "viewUniverseAnalytics": {
            "example": true,
            "type": "boolean",
            "description": "View universe analytics."
          },
          "createApiKeys": {
            "example": true,
            "type": "boolean",
            "description": "Create group API Keys."
          },
          "manageApiKeys": {
            "example": true,
            "type": "boolean",
            "description": "Manage all group API keys."
          },
          "banMembers": {
            "example": true,
            "type": "boolean",
            "description": "Ban lower-ranked members."
          },
          "viewForums": {
            "example": true,
            "type": "boolean",
            "description": "Can view forums"
          },
          "manageCategories": {
            "example": true,
            "type": "boolean",
            "description": "Can change forum categories"
          },
          "createPosts": {
            "example": true,
            "type": "boolean",
            "description": "Can create forum post"
          },
          "lockPosts": {
            "example": true,
            "type": "boolean",
            "description": "Can lock forum post"
          },
          "pinPosts": {
            "example": true,
            "type": "boolean",
            "description": "Can pin forum post"
          },
          "removePosts": {
            "example": true,
            "type": "boolean",
            "description": "Can remove forum post"
          },
          "createComments": {
            "example": true,
            "type": "boolean",
            "description": "Can create forum comment"
          },
          "removeComments": {
            "example": true,
            "type": "boolean",
            "description": "Can remove forum comment"
          },
          "manageBlockedWords": {
            "example": true,
            "type": "boolean",
            "description": "Can manage blocked words"
          },
          "viewBlockedWords": {
            "example": true,
            "type": "boolean",
            "description": "Can view blocked words"
          }
        },
        "description": "Represents the permissions on a role."
      },
      "GroupShout": {
        "type": "object",
        "properties": {
          "path": {
            "example": "groups/123/shout",
            "type": "string",
            "description": "The resource path of the group shout.\n\nFormat: `groups/{group_id}/shout`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group shout was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the group shout was last updated.",
            "format": "date-time"
          },
          "content": {
            "example": "This is the group shout content to share with everyone.",
            "type": "string",
            "description": "The shout content.\n\nHas a maximum limit of 255 characters."
          },
          "poster": {
            "readOnly": true,
            "example": "users/21557",
            "type": "string",
            "description": "The resource path for the poster of the group shout.\n\nIf the group is abandoned, has no owner, and has never had a shout, this\nfield is not returned."
          }
        },
        "description": "A single status post on a group that can hold important group updates or\nother information.",
        "x-aep-resource": {
          "patterns": ["groups/{group_id}/shout"],
          "plural": "group-shouts",
          "singular": "group-shout"
        },
        "x-resource": true,
        "x-oneOf": {
          "Poster": ["poster"]
        }
      },
      "IncrementDataStoreEntryRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount by which to increment the entry value. Both the existing value\nand the increment amount must be integers.",
            "format": "double"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Users associated with the entry.\n\nIf this is not provided, existing user IDs are cleared."
          },
          "attributes": {
            "type": "object",
            "description": "An arbitrary set of attributes associated with the entry.\n\nIf this is not provided, existing attributes are cleared."
          }
        },
        "description": "Increments the entry value.\n\nIf the value is not numeric, this request fails.",
        "x-oneOf": {
          "Amount": ["amount"]
        }
      },
      "IncrementOrderedDataStoreEntryRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount by which to increment the entry value. Both the existing value\nand the increment amount must be integers.",
            "format": "double"
          }
        },
        "description": "Increments the entry value.",
        "x-oneOf": {
          "Amount": ["amount"]
        }
      },
      "Instance": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/places/123/instances/0123456789abcdef0123456789abcdef",
            "type": "string",
            "description": "The resource path of the instance.\n\nFormat: `universes/{universe_id}/places/{place_id}/instances/{instance_id}`"
          },
          "hasChildren": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "whether the instance has any children instance"
          },
          "engineInstance": {
            "$ref": "#/components/schemas/roblox.engine.Instance",
            "description": "the property details of the instance"
          }
        },
        "description": "Represents a data model instance.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/places/{place_id}/instances/{instance_id}"
          ],
          "plural": "instances",
          "singular": "instance"
        },
        "x-resource": true
      },
      "InventoryItem": {
        "type": "object",
        "properties": {
          "path": {
            "example": "users/123/inventory-items/some-inventory-item-id",
            "type": "string",
            "description": "The resource path of the inventory item.\n\nFormat: `users/{user_id}/inventory-items/{inventory_item_id}`"
          },
          "assetDetails": {
            "$ref": "#/components/schemas/InventoryItem_AssetDetails",
            "description": "Populated if this item is an asset."
          },
          "badgeDetails": {
            "$ref": "#/components/schemas/InventoryItem_BadgeDetails",
            "description": "Populated if this item is a badge."
          },
          "gamePassDetails": {
            "$ref": "#/components/schemas/InventoryItem_GamePassDetails",
            "description": "Populated if this item is a game pass."
          },
          "privateServerDetails": {
            "$ref": "#/components/schemas/InventoryItem_PrivateServerDetails",
            "description": "Populated if this item is a private server."
          },
          "addTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The time when the item was added to the user's inventory. For example, the\ntime when the user purchased a private server or was awarded a badge.\n\nThis field is currently not populated for passes.",
            "format": "date-time"
          }
        },
        "description": "Represents an item in a user's inventory.",
        "x-aep-resource": {
          "patterns": ["users/{user_id}/inventory-items/{inventory_item_id}"],
          "plural": "inventory-items",
          "singular": "inventory-item"
        },
        "x-resource": true,
        "x-oneOf": {
          "details": [
            "assetDetails",
            "badgeDetails",
            "gamePassDetails",
            "privateServerDetails"
          ]
        }
      },
      "InventoryItem_AssetDetails": {
        "type": "object",
        "properties": {
          "assetId": {
            "example": "12928981934",
            "type": "string",
            "description": "A unique ID that identifies an asset."
          },
          "inventoryItemAssetType": {
            "example": "INVENTORY_ITEM_ASSET_TYPE_UNSPECIFIED",
            "enum": [
              "INVENTORY_ITEM_ASSET_TYPE_UNSPECIFIED",
              "CLASSIC_TSHIRT",
              "AUDIO",
              "HAT",
              "MODEL",
              "CLASSIC_SHIRT",
              "CLASSIC_PANTS",
              "DECAL",
              "CLASSIC_HEAD",
              "FACE",
              "GEAR",
              "ANIMATION",
              "TORSO",
              "RIGHT_ARM",
              "LEFT_ARM",
              "LEFT_LEG",
              "RIGHT_LEG",
              "PACKAGE",
              "PLUGIN",
              "MESH_PART",
              "HAIR_ACCESSORY",
              "FACE_ACCESSORY",
              "NECK_ACCESSORY",
              "SHOULDER_ACCESSORY",
              "FRONT_ACCESSORY",
              "BACK_ACCESSORY",
              "WAIST_ACCESSORY",
              "CLIMB_ANIMATION",
              "DEATH_ANIMATION",
              "FALL_ANIMATION",
              "IDLE_ANIMATION",
              "JUMP_ANIMATION",
              "RUN_ANIMATION",
              "SWIM_ANIMATION",
              "WALK_ANIMATION",
              "POSE_ANIMATION",
              "EMOTE_ANIMATION",
              "VIDEO",
              "TSHIRT_ACCESSORY",
              "SHIRT_ACCESSORY",
              "PANTS_ACCESSORY",
              "JACKET_ACCESSORY",
              "SWEATER_ACCESSORY",
              "SHORTS_ACCESSORY",
              "LEFT_SHOE_ACCESSORY",
              "RIGHT_SHOE_ACCESSORY",
              "DRESS_SKIRT_ACCESSORY",
              "EYEBROW_ACCESSORY",
              "EYELASH_ACCESSORY",
              "MOOD_ANIMATION",
              "DYNAMIC_HEAD",
              "CREATED_PLACE",
              "PURCHASED_PLACE"
            ],
            "type": "string",
            "description": "The specific asset type of this item.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | INVENTORY_ITEM_ASSET_TYPE_UNSPECIFIED | Default InventoryItemAssetType |\n  | CLASSIC_TSHIRT | Classic Tshirt |\n  | AUDIO | Audio |\n  | HAT | Hat |\n  | MODEL | Model |\n  | CLASSIC_SHIRT | Classic Shirt |\n  | CLASSIC_PANTS | Classic Pants |\n  | DECAL | Decal |\n  | CLASSIC_HEAD | Classic Head |\n  | FACE | Face |\n  | GEAR | Gear |\n  | ANIMATION | Animation |\n  | TORSO | Torso |\n  | RIGHT_ARM | Right Arm |\n  | LEFT_ARM | Left Arm |\n  | LEFT_LEG | Left Leg |\n  | RIGHT_LEG | Right Leg |\n  | PACKAGE | Package |\n  | PLUGIN | Plugin |\n  | MESH_PART | Mesh Part |\n  | HAIR_ACCESSORY | Hair Accessory |\n  | FACE_ACCESSORY | Face Accessory |\n  | NECK_ACCESSORY | Neck Accessory |\n  | SHOULDER_ACCESSORY | Shoulder Accessory |\n  | FRONT_ACCESSORY | Front Accessory |\n  | BACK_ACCESSORY | Back Accessory |\n  | WAIST_ACCESSORY | Waist Accessory |\n  | CLIMB_ANIMATION | Climb Animation |\n  | DEATH_ANIMATION | Death Animation |\n  | FALL_ANIMATION | Fall Animation |\n  | IDLE_ANIMATION | Idle Animation |\n  | JUMP_ANIMATION | Jump Animation |\n  | RUN_ANIMATION | Run Animation |\n  | SWIM_ANIMATION | Swim Animation |\n  | WALK_ANIMATION | Walk Animation |\n  | POSE_ANIMATION | Pose Animation |\n  | EMOTE_ANIMATION | Emote Animation |\n  | VIDEO | Video |\n  | TSHIRT_ACCESSORY | Tshirt Accessory |\n  | SHIRT_ACCESSORY | Shirt Accessory |\n  | PANTS_ACCESSORY | Pants Accessory |\n  | JACKET_ACCESSORY | Jacket Accessory |\n  | SWEATER_ACCESSORY | Sweater Accessory |\n  | SHORTS_ACCESSORY | Shorts Accessory |\n  | LEFT_SHOE_ACCESSORY | Left Shoe Accessory |\n  | RIGHT_SHOE_ACCESSORY | Right Shoe Accessory |\n  | DRESS_SKIRT_ACCESSORY | Dress Skirt Accessory |\n  | EYEBROW_ACCESSORY | Eyebrow Accessory |\n  | EYELASH_ACCESSORY | Eyelash Accessory |\n  | MOOD_ANIMATION | Mood Animation |\n  | DYNAMIC_HEAD | Dynamic Head |\n  | CREATED_PLACE | Created Place |\n  | PURCHASED_PLACE | Purchased Place |",
            "format": "enum"
          },
          "instanceId": {
            "example": "173413781720",
            "type": "string",
            "description": "A unique ID that identifies an instance or \"copy\" of the asset that's\nowned by a user."
          },
          "collectibleDetails": {
            "$ref": "#/components/schemas/InventoryItem_CollectibleDetails",
            "description": "Additional details if this asset is a collectible. Otherwise, this\nattribute will be omitted."
          }
        },
        "description": "Specific fields only applicable to assets",
        "x-oneOf": {
          "CollectibleDetails": ["collectibleDetails"]
        }
      },
      "InventoryItem_BadgeDetails": {
        "type": "object",
        "properties": {
          "badgeId": {
            "example": "119925991",
            "type": "string",
            "description": "A unique ID that identifies a badge."
          }
        },
        "description": "Specific fields that are applicable to a badge."
      },
      "InventoryItem_CollectibleDetails": {
        "type": "object",
        "properties": {
          "itemId": {
            "example": "521cca19-75bb-4e05-a0af-633b1532c24d",
            "type": "string",
            "description": "A unique ID of a Roblox item that is a collectible."
          },
          "instanceId": {
            "example": "a8a27d38-ee51-4cf4-8b0a-485d0dfd8607",
            "type": "string",
            "description": "A unique ID of an individual copy of a collectible with ownership tied\nto a group or user."
          },
          "instanceState": {
            "example": "COLLECTIBLE_ITEM_INSTANCE_STATE_UNSPECIFIED",
            "enum": [
              "COLLECTIBLE_ITEM_INSTANCE_STATE_UNSPECIFIED",
              "AVAILABLE",
              "HOLD"
            ],
            "type": "string",
            "description": "The instance state of this specific Collectible Item Instance which\naffects whether it can be resold or traded.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | COLLECTIBLE_ITEM_INSTANCE_STATE_UNSPECIFIED | Default CollectibleItemInstanceState |\n  | AVAILABLE | Collectible item is available for all actions |\n  | HOLD | Collectible item is on hold (can't be resold or traded) |",
            "format": "enum"
          },
          "serialNumber": {
            "example": 160,
            "type": "integer",
            "description": "If the asset is a Limited, a user-visible number that shows this item is\nthe nth replica of the asset. Otherwise, this attribute will be omitted.",
            "format": "int64"
          }
        },
        "description": "Specific fields that are applicable to a collectible.",
        "x-oneOf": {
          "InstanceId": ["instanceId"],
          "InstanceState": ["instanceState"],
          "ItemId": ["itemId"],
          "SerialNumber": ["serialNumber"]
        }
      },
      "InventoryItem_GamePassDetails": {
        "type": "object",
        "properties": {
          "gamePassId": {
            "example": "83167572",
            "type": "string",
            "description": "A unique ID that identifies a game pass."
          }
        },
        "description": "Specific fields that are applicable to a game pass."
      },
      "InventoryItem_PrivateServerDetails": {
        "type": "object",
        "properties": {
          "privateServerId": {
            "example": "175156",
            "type": "string",
            "description": "A unique ID that identifies a private server."
          }
        },
        "description": "Specific fields that are applicable to a private server."
      },
      "ListAssetQuotasResponse": {
        "type": "object",
        "properties": {
          "assetQuotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetQuota"
            },
            "description": "The AssetQuotas from the specified User."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of AssetQuotas in the parent collection."
      },
      "ListDataStoreEntriesResponse": {
        "type": "object",
        "properties": {
          "dataStoreEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataStoreEntry"
            },
            "description": "The DataStoreEntries from the specified DataStore or DataStoreScope."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of DataStoreEntries in the parent collection."
      },
      "ListDataStoreEntryRevisionsResponse": {
        "type": "object",
        "properties": {
          "dataStoreEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataStoreEntry"
            },
            "description": "The revisions of the data_store_entry."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you send as a `pageToken` parameter to retrieve the next page.\nIf this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of revisions of a data store entry."
      },
      "ListDataStoresResponse": {
        "type": "object",
        "properties": {
          "dataStores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataStore"
            },
            "description": "The DataStores from the specified Universe."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of DataStores in the parent collection."
      },
      "ListGroupJoinRequestsResponse": {
        "type": "object",
        "properties": {
          "groupJoinRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupJoinRequest"
            },
            "description": "The GroupJoinRequests from the specified Group."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of GroupJoinRequests in the parent collection."
      },
      "ListGroupMembershipsResponse": {
        "type": "object",
        "properties": {
          "groupMemberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            },
            "description": "The GroupMemberships from the specified Group."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of GroupMemberships in the parent collection."
      },
      "ListGroupRolesResponse": {
        "type": "object",
        "properties": {
          "groupRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRole"
            },
            "description": "The GroupRoles from the specified Group."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of GroupRoles in the parent collection."
      },
      "ListInstanceChildrenMetadata": {
        "type": "object",
        "properties": {},
        "description": "Represents metadata about the long-running operation corresponding to a\nListInstanceChildren request.\n\nThis is the type of the `Operation.metadata` field in the response to\n`GetOperation` requests for ListInstanceChildren operations."
      },
      "ListInstanceChildrenResponse": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instance"
            },
            "description": "A list of children instances.\n\n"
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `page_token` to retrieve the next page.\nIf this field is omitted, there are no subsequent pages."
          }
        },
        "description": "Returns a list of the instance's children."
      },
      "ListInventoryItemsResponse": {
        "type": "object",
        "properties": {
          "inventoryItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            },
            "description": "The InventoryItems from the specified User."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of InventoryItems in the parent collection."
      },
      "ListLuauExecutionSessionTaskLogsResponse": {
        "type": "object",
        "properties": {
          "luauExecutionSessionTaskLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LuauExecutionSessionTaskLog"
            },
            "description": "The LuauExecutionSessionTaskLogs from the specified\nLuauExecutionSessionTask."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of LuauExecutionSessionTaskLogs in the parent collection."
      },
      "ListMemoryStoreSortedMapItemsResponse": {
        "type": "object",
        "properties": {
          "memoryStoreSortedMapItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemoryStoreSortedMapItem"
            },
            "description": "The MemoryStoreSortedMapItems from the specified MemoryStoreSortedMap."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of MemoryStoreSortedMapItems in the parent collection."
      },
      "ListOrderedDataStoreEntriesResponse": {
        "type": "object",
        "properties": {
          "orderedDataStoreEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedDataStoreEntry"
            },
            "description": "The OrderedDataStoreEntries from the specified OrderedDataStoreScope."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of OrderedDataStoreEntries in the parent collection."
      },
      "ListUserRestrictionLogsResponse": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRestrictionLog"
            },
            "description": "The UserRestrictionLogs from the specified Universe."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "Returns a list of change logs applied to UserRestriction resources."
      },
      "ListUserRestrictionsResponse": {
        "type": "object",
        "properties": {
          "userRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRestriction"
            },
            "description": "The UserRestrictions from the specified Universe or Place."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that you can send as a `pageToken` parameter to retrieve the next\npage. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of UserRestrictions in the parent collection."
      },
      "LuauExecutionSessionTask": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/places/123/luau-execution-session-tasks/123e4567-e89b-12d3-a456-426655440000",
            "type": "string",
            "description": "The resource path of the luau execution session task.\n\nFormats:\n* `universes/{universe_id}/places/{place_id}/luau-execution-session-tasks/{luau_execution_session_task_id}`\n* `universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-session-tasks/{luau_execution_session_task_id}`\n* `universes/{universe_id}/places/{place_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}`\n* `universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "Time when this task was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "Time when this task's state last changed.",
            "format": "date-time"
          },
          "user": {
            "readOnly": true,
            "type": "string",
            "description": "The user that created the API key that was used to create this task."
          },
          "state": {
            "readOnly": true,
            "example": "STATE_UNSPECIFIED",
            "enum": [
              "STATE_UNSPECIFIED",
              "QUEUED",
              "PROCESSING",
              "CANCELLED",
              "COMPLETE",
              "FAILED"
            ],
            "type": "string",
            "description": "The task's state. See the State enum for information about each possible\nvalue.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | STATE_UNSPECIFIED | UNSPECIFIED |\n  | QUEUED | The Task is waiting to be processed. |\n  | PROCESSING | The Task has been picked up for processing. |\n  | CANCELLED | The Task has been stopped by the user. |\n  | COMPLETE | The Task has finished processing. The output field contains the output. |\n  | FAILED | The Task failed. The error field contains details about the error. |",
            "format": "enum"
          },
          "script": {
            "type": "string",
            "description": "The script to be run as part of this task.\n\nFor example:\n\n```luau\nlocal x = 3\nlocal y = 4\nreturn x + y\n```",
            "x-immutable": true
          },
          "timeout": {
            "example": "3s",
            "type": "string",
            "description": "Limit for how long the script can run.\n\nThe task fails if the script does not complete within the\nspecified duration.\n\nDefaults to 5 minutes.",
            "format": "duration",
            "x-immutable": true
          },
          "error": {
            "$ref": "#/components/schemas/LuauExecutionSessionTask_Error",
            "description": "Present when the task execution fails. Contains details about the error\nthat caused the failure."
          },
          "output": {
            "$ref": "#/components/schemas/LuauExecutionSessionTask_Output",
            "description": "Present when the task execution succeeds. Contains the output of the\nexecution."
          },
          "binaryInput": {
            "type": "string",
            "description": "Resource path of the binary input to this task. See the documentation for\nthe\n`LuauExecutionSessionTaskBinaryInput` resource for usage details."
          },
          "enableBinaryOutput": {
            "example": true,
            "type": "boolean",
            "description": "If set to true, allows the task to output a large binary object in addition\nto standard return values.\n\nIf `enable_binary_output` is set to true, the task script must return a\n`LuauExecutionTaskOutput` (or equivalent table) and no other return values.\n\nBelow is example code for doing so:\n\n```luau\nlocal buf: buffer = buffer.create(10)\nlocal result: LuauExecutionTaskOutput = {\n  BinaryOutput = buf,\n  ReturnValues = { \"hello world\", 123 }\n}\nreturn result\n```\n\nThe `BinaryOutput` buffer must be no larger than 256 MiB in size.\n\nThe `ReturnValues` array, if given, will be serialized to JSON and made\navailable in the `output` field of the `LuauExecutionSessionTask` resource,\nsimilar to regular return values when not using `enable_binary_output`.\n\nThe binary output can be fetched from the URI in the `binaryOutputUri`\nfield after the task completes. The `binaryOutputUri` is valid for 15\nminutes after task completion.",
            "x-immutable": true
          },
          "binaryOutputUri": {
            "readOnly": true,
            "type": "string",
            "description": "URI for the binary output of this task. See the `enableBinaryOutput` field\nfor usage details."
          }
        },
        "description": "A `LuauExecutionSessionTask` (\"task\" for short) executes a given Luau script\nin the context of a specific version of a place.\n\nIn a task, physics simulation does not run. Server and local scripts within\nthe place also do not automatically run.\n\nThe script may access and update the data model of the place, including\ninvoking any module scripts. However, data model changes are local to the\ntask and cannot be persisted.\n\nThe script can also invoke engine APIs that read and/or modify data stored in\nthe cloud, such as those for DataStores. Exercise caution when using these\nAPIs.\n\nScripts can be up to 4 MB in size and run for up to 5 minutes. Scripts that\nrun for longer than the time limit terminate with an error.\n\nScripts are executed as-is and do not need to be wrapped in a function.\n\nScripts can return values (using the Luau `return` keyword). Return values\nare serialized to JSON and can be retrieved with the `Get\nLuauExecutionSessionTask` API after the task completes. The total size of the\nreturn values after JSON serialization must not exceed 4 MB. If the limit is\nexceeded, the task terminates with an error.\n\nIf the script raises an unhandled error, the task terminates. The error\ninformation can be retrieved with the `GetLuauExecutionSessionTask` API.\n\nStandard output (generated by the Luau `print` function) can be retrieved\nwith the `ListLuauExecutionSessionTaskLogs` method after the task completes.\nA maximum of 450 KB of logs are retained. If the amount of logs exceeds the\nlimit, older logs are discarded.\n\nInformation about a task is retained for 24 hours after task completion.\n\nAt most ten incomplete tasks are allowed per place. Attempting to create more\ntasks while the first ten are incomplete results in a HTTP 429 response.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/places/{place_id}/luau-execution-session-tasks/{luau_execution_session_task_id}",
            "universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-session-tasks/{luau_execution_session_task_id}",
            "universes/{universe_id}/places/{place_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}",
            "universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}"
          ],
          "plural": "luau-execution-session-tasks",
          "singular": "luau-execution-session-task"
        },
        "x-resource": true,
        "x-oneOf": {
          "result": ["error", "output"]
        }
      },
      "LuauExecutionSessionTaskBinaryInput": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/luau-execution-session-task-binary-inputs/123e4567-e89b-12d3-a456-426655440000",
            "type": "string",
            "description": "The resource path of the luau execution session task binary input.\n\nFormat:\n`universes/{universe_id}/luau-execution-session-task-binary-inputs/{luau_execution_session_task_binary_input_id}`"
          },
          "size": {
            "type": "integer",
            "description": "The size of the binary input object to be uploaded.\n\nThe maximum allowed size is 100 MiB.",
            "format": "int64",
            "x-immutable": true
          },
          "uploadUri": {
            "readOnly": true,
            "type": "string",
            "description": "Upload the binary input object using this URI."
          }
        },
        "description": "Represents a large binary input that can be given to a\n`LuauExecutionSessionTask`.\n\nEach `LuauExecutionSessionTaskBinaryInput` is associated with a presigned URL\nwhich can be used to upload an arbitrary object. After uploading the object,\nthe path of the `LuauExecutionSessionTaskBinaryInput` can be passed when\ncreating a `LuauExecutionSessionTask` to make the object available to the\ntask.\n\nWithin the task, the contents of the object are made available within a table\npassed as the first agument to the script, with the key `BinaryInput`. The\nfollowing example demonstrates how to retrieve the data:\n\n```\nlocal taskInput: LuauExecutionTaskInput = ({...})[1]\nlocal buf: buffer = taskInput.BinaryInput\n```\n\nEach `LuauExecutionSessionTaskBinaryInput` is valid for 15 minutes from the\ntime of creation. Within that time, in desired, you can use it to create\nmultiple tasks for the same universe.\n\nThe uploaded binary object must be no larger than 100 MiB.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/luau-execution-session-task-binary-inputs/{luau_execution_session_task_binary_input_id}"
          ],
          "plural": "luau-execution-session-task-binary-inputs",
          "singular": "luau-execution-session-task-binary-input"
        },
        "x-resource": true
      },
      "LuauExecutionSessionTaskLog": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/places/123/luau-execution-session-tasks/123e4567-e89b-12d3-a456-426655440000/logs/123",
            "type": "string",
            "description": "The resource path of the luau execution session task log.\n\nFormats:\n* `universes/{universe_id}/places/{place_id}/luau-execution-session-tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}`\n* `universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-session-tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}`\n* `universes/{universe_id}/places/{place_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}`\n* `universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}`"
          },
          "messages": {
            "readOnly": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of log messages generated by the task execution.\nEach call to the Luau `print()` function from the task's script's code\nresults in a single list item here, even if the message itself contains\nnewlines. This field is populated when the View is FLAT (which is the default)."
          },
          "structuredMessages": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LuauExecutionSessionTaskLog_LogMessage"
            },
            "description": "A list of log messages generated by the task execution and associated metadata.\nEach call to the Luau `print()` function from the task's script's code\nresults in a single list item here, even if the message itself contains\nnewlines. This field is populated when the View is STRUCTURED."
          }
        },
        "description": "Represents a chunk of log messages generated by a\n`LuauExecutionSessionTask`.\n\nThe amount of logs that is retained is limited. See the documentation of the\n`LuauExecutionSessionTask` resource for more details.\n\nLogs have the same retention time as the parent task.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/places/{place_id}/luau-execution-session-tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}",
            "universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-session-tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}",
            "universes/{universe_id}/places/{place_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}",
            "universes/{universe_id}/places/{place_id}/versions/{place_version_id}/luau-execution-sessions/{luau_execution_session_id}/tasks/{luau_execution_session_task_id}/logs/{luau_execution_session_task_log_id}"
          ],
          "plural": "luau-execution-session-task-logs",
          "singular": "luau-execution-session-task-log"
        },
        "x-resource": true
      },
      "LuauExecutionSessionTaskLog_LogMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The log message"
          },
          "createTime": {
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The time at which the log message was produced",
            "format": "date-time"
          },
          "messageType": {
            "example": "MESSAGE_TYPE_UNSPECIFIED",
            "enum": [
              "MESSAGE_TYPE_UNSPECIFIED",
              "OUTPUT",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "type": "string",
            "description": "The `MessageType` of the log message.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | MESSAGE_TYPE_UNSPECIFIED | UNSPECIFIED |\n  | OUTPUT | Corresponds to the `MessageOutput` enum value of the engine API. |\n  | INFO | Corresponds to the `MessageInfo` enum value of the engine API. |\n  | WARNING | Corresponds to the `MessageWarning` enum value of the engine API. |\n  | ERROR | Corresponds to the `MessageError` enum value of the engine API. |",
            "format": "enum"
          }
        },
        "description": "A single log message along with its associated metadata"
      },
      "LuauExecutionSessionTask_Error": {
        "type": "object",
        "properties": {
          "code": {
            "readOnly": true,
            "example": "ERROR_CODE_UNSPECIFIED",
            "enum": [
              "ERROR_CODE_UNSPECIFIED",
              "SCRIPT_ERROR",
              "DEADLINE_EXCEEDED",
              "OUTPUT_SIZE_LIMIT_EXCEEDED",
              "INTERNAL_ERROR"
            ],
            "type": "string",
            "description": "An error code indicating the category of the error.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | ERROR_CODE_UNSPECIFIED | UNSPECIFIED |\n  | SCRIPT_ERROR | The task's script raised an unhandled error. |\n  | DEADLINE_EXCEEDED | The task exceeded the maximum allowed execution duration. |\n  | OUTPUT_SIZE_LIMIT_EXCEEDED | The task's outputs were too large. |\n  | INTERNAL_ERROR | The Task failed due to an internal system error. |",
            "format": "enum"
          },
          "message": {
            "readOnly": true,
            "type": "string",
            "description": "An error message containing more details about the error."
          }
        },
        "description": "Contains error details in case of failed execution."
      },
      "LuauExecutionSessionTask_Output": {
        "type": "object",
        "properties": {
          "results": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufValue"
            },
            "description": "Return values from the script that was run. Return values that are not\nJSON serializable (such as Data Model Instances) will be returned as\nnulls."
          }
        },
        "description": "Contains the output of a task's execution."
      },
      "MemoryStore": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/memory-store",
            "type": "string",
            "description": "The resource path of the memory store.\n\nFormat: `universes/{universe_id}/memory-store`"
          }
        },
        "description": "Represents the memory store of the universe.",
        "x-aep-resource": {
          "patterns": ["universes/{universe_id}/memory-store"],
          "plural": "memory-stores",
          "singular": "memory-store"
        },
        "x-resource": true
      },
      "MemoryStoreQueueItem": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/memory-store/queues/some-memory-store-queue-id/items/some-memory-store-queue-item-id",
            "type": "string",
            "description": "The resource path of the memory store queue item.\n\nFormat:\n`universes/{universe_id}/memory-store/queues/{memory_store_queue_id}/items/{memory_store_queue_item_id}`"
          },
          "data": {
            "$ref": "#/components/schemas/GoogleProtobufValue",
            "description": "The value of the queue item."
          },
          "priority": {
            "type": "number",
            "description": "The priority of the queue item.",
            "format": "double"
          },
          "ttl": {
            "writeOnly": true,
            "example": "3s",
            "type": "string",
            "description": "The TTL for the item.",
            "format": "duration"
          },
          "expireTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The expiration time of the item.",
            "format": "date-time"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "The name of the item."
          }
        },
        "description": "Represents an item within a queue structure.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/memory-store/queues/{memory_store_queue_id}/items/{memory_store_queue_item_id}"
          ],
          "plural": "memory-store-queue-items",
          "singular": "memory-store-queue-item"
        },
        "x-resource": true,
        "x-oneOf": {
          "expiration": ["ttl", "expireTime"]
        }
      },
      "MemoryStoreSortedMapItem": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/memory-store/sorted-maps/some-memory-store-sorted-map-id/items/some-memory-store-sorted-map-item-id",
            "type": "string",
            "description": "The resource path of the memory store sorted map item.\n\nFormat:\n`universes/{universe_id}/memory-store/sorted-maps/{memory_store_sorted_map_id}/items/{memory_store_sorted_map_item_id}`"
          },
          "value": {
            "$ref": "#/components/schemas/GoogleProtobufValue",
            "description": "The value of the item."
          },
          "etag": {
            "readOnly": true,
            "type": "string",
            "description": "The server generated tag of an item."
          },
          "ttl": {
            "writeOnly": true,
            "example": "3s",
            "type": "string",
            "description": "The TTL for the item.",
            "format": "duration"
          },
          "expireTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The expiration time of the item.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "The name of the item."
          },
          "stringSortKey": {
            "type": "string",
            "description": "The item will be sorted lexicographically according to this string."
          },
          "numericSortKey": {
            "type": "number",
            "description": "The item will be sorted according to this number.",
            "format": "double"
          }
        },
        "description": "Represents an item within a sorted map structure.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/memory-store/sorted-maps/{memory_store_sorted_map_id}/items/{memory_store_sorted_map_item_id}"
          ],
          "plural": "memory-store-sorted-map-items",
          "singular": "memory-store-sorted-map-item"
        },
        "x-resource": true,
        "x-oneOf": {
          "expiration": ["ttl", "expireTime"],
          "sortKey": ["stringSortKey", "numericSortKey"]
        }
      },
      "Money": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "A currency code.\n\nThis may be a three-letter currency code defined in ISO 4217.\n\nAPIs may define additional currency codes that are not included in the ISO\n4217 standard (for example, virtual currencies or cryptocurrencies). These\nmust start with `X-`, in order to distinguish them from potential future\nISO 4217 codes. For example, `\"USD\"` is the ISO 4217 code for United States\ndollar."
          },
          "quantity": {
            "$ref": "#/components/schemas/Decimal",
            "description": "The quantity of currency."
          }
        },
        "description": "Represents an amount of money with its currency type.\n\nExamples:\n - Five US dollars === `{currency_code: \"USD\" quantity: {significand: 5}}`"
      },
      "Operation": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The server-assigned path, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`path` should be a resource path ending with `operations/{unique_id}`."
          },
          "metadata": {
            "$ref": "#/components/schemas/GoogleProtobufAny",
            "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
          },
          "done": {
            "example": true,
            "type": "boolean",
            "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
          },
          "error": {
            "$ref": "#/components/schemas/Status",
            "description": "The error result of the operation in case of failure or cancellation."
          },
          "response": {
            "$ref": "#/components/schemas/GoogleProtobufAny",
            "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
          }
        },
        "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
        "x-resource": true,
        "x-oneOf": {
          "result": ["error", "response"]
        }
      },
      "OrderedDataStoreEntry": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/ordered-data-stores/some-ordered-data-store-id/scopes/some-ordered-data-store-scope-id/entries/some-ordered-data-store-entry-id",
            "type": "string",
            "description": "The resource path of the ordered data store entry.\n\nFormat:\n`universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{ordered_data_store_scope_id}/entries/{ordered_data_store_entry_id}`"
          },
          "value": {
            "type": "number",
            "description": "The value of the entry.\n\nAlways rounded to the nearest integer.",
            "format": "double"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "The name of the entry."
          }
        },
        "description": "A key-value entry in an ordered data store.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/ordered-data-stores/{ordered_data_store_id}/scopes/{ordered_data_store_scope_id}/entries/{ordered_data_store_entry_id}"
          ],
          "plural": "ordered-data-store-entries",
          "singular": "ordered-data-store-entry"
        },
        "x-resource": true,
        "x-oneOf": {
          "Value": ["value"]
        }
      },
      "Place": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/places/123",
            "type": "string",
            "description": "The resource path of the place.\n\nFormat: `universes/{universe_id}/places/{place_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp at which the place was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp at which the place was updated.",
            "format": "date-time"
          },
          "displayName": {
            "example": "ROBLOX Battle [OPEN]",
            "type": "string",
            "description": "The name of the place."
          },
          "description": {
            "example": "OPEN SOURCE! \n Feel free to check out how we made this game and ask us about it!",
            "type": "string",
            "description": "The description of the place."
          },
          "serverSize": {
            "type": "integer",
            "description": "The maximum number of allowed users in a single server.",
            "format": "int32"
          }
        },
        "description": "Represents a Roblox place.",
        "x-aep-resource": {
          "patterns": ["universes/{universe_id}/places/{place_id}"],
          "plural": "places",
          "singular": "place"
        },
        "x-resource": true,
        "x-oneOf": {
          "Description": ["description"],
          "DisplayName": ["displayName"],
          "ServerSize": ["serverSize"]
        }
      },
      "PublishUniverseMessageRequest": {
        "required": ["topic", "message"],
        "type": "object",
        "properties": {
          "topic": {
            "example": "my-topic",
            "type": "string",
            "description": "The topic on which to publish the message."
          },
          "message": {
            "example": "Hello, world!",
            "type": "string",
            "description": "The message to publish."
          }
        },
        "description": "Publish a message on the specified topic."
      },
      "ReadMemoryStoreQueueItemsResponse": {
        "type": "object",
        "properties": {
          "readId": {
            "type": "string",
            "description": "An identifier of the read operation\n\nThis can be passed to `:discard` in order to mark the items as processed."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemoryStoreQueueItem"
            },
            "description": "The items read from the queue"
          }
        },
        "description": "Returns the specified number of items at the front of the queue."
      },
      "RestartUniverseServersRequest": {
        "type": "object",
        "properties": {},
        "description": "Restarts all of the universe's servers."
      },
      "RestartUniverseServersResponse": {
        "type": "object",
        "properties": {},
        "description": "Empty response. May later contain a status."
      },
      "SnapshotDataStoresRequest": {
        "type": "object",
        "properties": {},
        "description": "Takes a new snapshot for the given experience."
      },
      "SnapshotDataStoresResponse": {
        "type": "object",
        "properties": {
          "newSnapshotTaken": {
            "example": true,
            "type": "boolean",
            "description": "Whether a new snapshot was taken by this operation.\n(Only one snapshot can be taken per experience per UTC day.)"
          },
          "latestSnapshotTime": {
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The time of the latest snapshot after the operation (regardless of\nwhether a new snapshot was created). This time is always returned in UTC.",
            "format": "date-time"
          }
        },
        "description": "Returns whether a new snapshot was taken and the time of the latest snapshot\nafter the operation (regardless of whether a new snapshot was taken).",
        "x-oneOf": {
          "NewSnapshotTaken": ["newSnapshotTaken"]
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "A list of messages that carry the error details.  There is a common set of message types for APIs to use."
          }
        },
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/subscription-products/some-subscription-product-id/subscriptions/some-subscription-id",
            "type": "string",
            "description": "The resource path of the subscription.\n\nFormat:\n`universes/{universe_id}/subscription-products/{subscription_product_id}/subscriptions/{subscription_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the subscription was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the subscription was last updated.",
            "format": "date-time"
          },
          "active": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "Whether the subscription is active.\n\nThis is equivalent  to whether `state` is equal to SUBSCRIBED_WILL_RENEW,\nSUBSCRIBED_WILL_NOT_RENEW, or SUBSCRIBED_RENEWAL_PAYMENT_PENDING."
          },
          "willRenew": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "Whether the subscription will renew.\n\nThis is equivalent to whether `state` is equal to SUBSCRIBED_WILL_RENEW or\nSUBSCRIBED_RENEWAL_PAYMENT_PENDING."
          },
          "lastBillingTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the subscription was last billed.",
            "format": "date-time"
          },
          "nextRenewTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the subscription will next be automatically renewed.",
            "format": "date-time"
          },
          "expireTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the subscription will, or did, expire.",
            "format": "date-time"
          },
          "state": {
            "readOnly": true,
            "example": "STATE_UNSPECIFIED",
            "enum": [
              "STATE_UNSPECIFIED",
              "SUBSCRIBED_WILL_RENEW",
              "SUBSCRIBED_WILL_NOT_RENEW",
              "SUBSCRIBED_RENEWAL_PAYMENT_PENDING",
              "EXPIRED"
            ],
            "type": "string",
            "description": "The state of the subscription.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | STATE_UNSPECIFIED | The subscription state is unspecified. |\n  | SUBSCRIBED_WILL_RENEW | The subscription is active and will be automatically renewed at `next_renew_time`. |\n  | SUBSCRIBED_WILL_NOT_RENEW | The subscription is active but will not be automatically renewed. |\n  | SUBSCRIBED_RENEWAL_PAYMENT_PENDING | The subscription is active and within the renewal grace period pending payment confirmation. |\n  | EXPIRED | The subscription has expired.  See `expiration_details` for more information. |",
            "format": "enum"
          },
          "expirationDetails": {
            "$ref": "#/components/schemas/Subscription_ExpirationDetails",
            "description": "Information about the expiration of the subscription."
          },
          "purchasePlatform": {
            "readOnly": true,
            "example": "PURCHASE_PLATFORM_UNSPECIFIED",
            "enum": ["PURCHASE_PLATFORM_UNSPECIFIED", "DESKTOP", "MOBILE"],
            "type": "string",
            "description": "The platform on which the subscription was purchased.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | PURCHASE_PLATFORM_UNSPECIFIED | The purchase platform is unspecified. |\n  | DESKTOP | The subscription was purchased on the Roblox website. |\n  | MOBILE | The subscription was purchased on the Roblox mobile app. |",
            "format": "enum"
          },
          "paymentProvider": {
            "readOnly": true,
            "example": "PAYMENT_PROVIDER_UNSPECIFIED",
            "enum": [
              "PAYMENT_PROVIDER_UNSPECIFIED",
              "STRIPE",
              "APPLE",
              "GOOGLE",
              "ROBLOX_CREDIT"
            ],
            "type": "string",
            "description": "The payment provider used to purchase the subscription.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | PAYMENT_PROVIDER_UNSPECIFIED | The payment provider is unspecified. |\n  | STRIPE | The subscription was purchased using Stripe. |\n  | APPLE | The subscription was purchased using Apple. |\n  | GOOGLE | The subscription was purchased using Google. |\n  | ROBLOX_CREDIT | The subscription was purchased using Roblox Credit. |",
            "format": "enum"
          },
          "user": {
            "example": "users/123",
            "type": "string",
            "description": "The user who subscribed to the subscription.",
            "x-immutable": true
          }
        },
        "description": "Represents a user's subscription to a subscription product. The\nsubscription ID is the same as the user ID of the user who subscribed.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/subscription-products/{subscription_product_id}/subscriptions/{subscription_id}"
          ],
          "plural": "subscriptions",
          "singular": "subscription"
        },
        "x-resource": true,
        "x-oneOf": {
          "subscriber": ["user"]
        }
      },
      "Subscription_ExpirationDetails": {
        "type": "object",
        "properties": {
          "reason": {
            "example": "EXPIRATION_REASON_UNSPECIFIED",
            "enum": [
              "EXPIRATION_REASON_UNSPECIFIED",
              "PRODUCT_INACTIVE",
              "PRODUCT_DELETED",
              "SUBSCRIBER_CANCELLED",
              "SUBSCRIBER_REFUNDED",
              "LAPSED"
            ],
            "type": "string",
            "description": "The reason the subscription expired.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | EXPIRATION_REASON_UNSPECIFIED | The expiration reason is unspecified. |\n  | PRODUCT_INACTIVE | The subscription product is inactive. |\n  | PRODUCT_DELETED | The subscription product is deleted. |\n  | SUBSCRIBER_CANCELLED | The subscriber cancelled the subscription. |\n  | SUBSCRIBER_REFUNDED | The subscriber requested a refund. |\n  | LAPSED | The subscriber’s payment was not received. |",
            "format": "enum"
          }
        },
        "description": "Information about the expiration of a subscription."
      },
      "Universe": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123",
            "type": "string",
            "description": "The resource path of the universe.\n\nFormat: `universes/{universe_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the universe was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the universe was last updated.",
            "format": "date-time"
          },
          "displayName": {
            "readOnly": true,
            "example": "ROBLOX Battle [OPEN]",
            "type": "string",
            "description": "The name of the universe.\n\nThis field can be updated by updating the root place's name."
          },
          "description": {
            "readOnly": true,
            "example": "OPEN SOURCE! \n Feel free to check out how we made this game and ask us about it!",
            "type": "string",
            "description": "The description of the universe.\n\nThis field can be updated by updating the root place's description."
          },
          "user": {
            "readOnly": true,
            "type": "string",
            "description": "The universe is user-owned."
          },
          "group": {
            "readOnly": true,
            "type": "string",
            "description": "The universe is group-owned."
          },
          "visibility": {
            "readOnly": true,
            "example": "VISIBILITY_UNSPECIFIED",
            "enum": ["VISIBILITY_UNSPECIFIED", "PUBLIC", "PRIVATE"],
            "type": "string",
            "description": "Whether or not the universe is publicly accessible.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | VISIBILITY_UNSPECIFIED | Updates using this value will throw an error on the backend. |\n  | PUBLIC | The universe is public. |\n  | PRIVATE | The universe is private.  If a universe's visibility is set to PRIVATE, all active players will immediately be removed from all running servers. |",
            "format": "enum"
          },
          "facebookSocialLink": {
            "$ref": "#/components/schemas/Universe_SocialLink",
            "description": "The Facebook social link."
          },
          "twitterSocialLink": {
            "$ref": "#/components/schemas/Universe_SocialLink",
            "description": "The Twitter social link."
          },
          "youtubeSocialLink": {
            "$ref": "#/components/schemas/Universe_SocialLink",
            "description": "The Youtube social link."
          },
          "twitchSocialLink": {
            "$ref": "#/components/schemas/Universe_SocialLink",
            "description": "The Twitch social link."
          },
          "discordSocialLink": {
            "$ref": "#/components/schemas/Universe_SocialLink",
            "description": "The Discord social link."
          },
          "robloxGroupSocialLink": {
            "$ref": "#/components/schemas/Universe_SocialLink",
            "description": "The Roblox group social link."
          },
          "guildedSocialLink": {
            "$ref": "#/components/schemas/Universe_SocialLink",
            "description": "The Guilded social link."
          },
          "voiceChatEnabled": {
            "example": true,
            "type": "boolean",
            "description": "Whether or not voice chat is enabled for users in the Experience.\n\nUpdating this value will not affect active servers."
          },
          "ageRating": {
            "readOnly": true,
            "example": "AGE_RATING_UNSPECIFIED",
            "enum": [
              "AGE_RATING_UNSPECIFIED",
              "AGE_RATING_ALL",
              "AGE_RATING_9_PLUS",
              "AGE_RATING_13_PLUS",
              "AGE_RATING_17_PLUS"
            ],
            "type": "string",
            "description": "The age rating of this universe.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | AGE_RATING_UNSPECIFIED | The age rating is not set. |\n  | AGE_RATING_ALL | Supported for all users. |\n  | AGE_RATING_9_PLUS | Supported for users aged 9 and up. |\n  | AGE_RATING_13_PLUS | Supported for users aged 13 and up. |\n  | AGE_RATING_17_PLUS | Supported for users aged 17 and up. |",
            "format": "enum"
          },
          "privateServerPriceRobux": {
            "type": "integer",
            "description": "Represents the price in Robux of private servers.\n\nIf unset, private servers are not supported for this universe.\n\nCan only be disabled when using a field mask.\n\nSetting to null will disable all active private servers.\n\nChanging the price will cancel all private server subscriptions.",
            "format": "int32"
          },
          "desktopEnabled": {
            "example": true,
            "type": "boolean",
            "description": "Whether or not players can join the Experience via Desktop."
          },
          "mobileEnabled": {
            "example": true,
            "type": "boolean",
            "description": "Whether or not players can join the Experience via Mobile."
          },
          "tabletEnabled": {
            "example": true,
            "type": "boolean",
            "description": "Whether or not players can join the Experience via Tablet."
          },
          "consoleEnabled": {
            "example": true,
            "type": "boolean",
            "description": "Whether or not players can join the Experience via Console."
          },
          "vrEnabled": {
            "example": true,
            "type": "boolean",
            "description": "Whether or not players can join the Experience via VR."
          }
        },
        "description": "Represents a Roblox experience.",
        "x-aep-resource": {
          "patterns": ["universes/{universe_id}"],
          "plural": "universes",
          "singular": "universe"
        },
        "x-resource": true,
        "x-oneOf": {
          "ConsoleEnabled": ["consoleEnabled"],
          "DesktopEnabled": ["desktopEnabled"],
          "MobileEnabled": ["mobileEnabled"],
          "PrivateServerPriceRobux": ["privateServerPriceRobux"],
          "TabletEnabled": ["tabletEnabled"],
          "VoiceChatEnabled": ["voiceChatEnabled"],
          "VrEnabled": ["vrEnabled"],
          "owner": ["user", "group"]
        }
      },
      "Universe_SocialLink": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the social link."
          },
          "uri": {
            "type": "string",
            "description": "The uri of the social link."
          }
        },
        "description": "A social link that may be associated with the universe.\n\nCan only be removed when using a field mask."
      },
      "UpdateInstanceMetadata": {
        "type": "object",
        "properties": {},
        "description": "Represents metadata about the long-running operation corresponding to a\nUpdateInstance request.\n\nThis is the type of the `Operation.metadata` field in the response to\n`GetOperation` requests for UpdateInstance operations."
      },
      "User": {
        "type": "object",
        "properties": {
          "path": {
            "example": "users/123",
            "type": "string",
            "description": "The resource path of the user.\n\nFormat: `users/{user_id}`"
          },
          "createTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp at which the user was created.",
            "format": "date-time"
          },
          "id": {
            "readOnly": true,
            "example": "123456",
            "type": "string",
            "description": "Unique ID that identifies a user in Roblox."
          },
          "name": {
            "example": "exampleUser",
            "type": "string",
            "description": "Unique username for a user in Roblox."
          },
          "displayName": {
            "example": "userDefinedName",
            "type": "string",
            "description": "Display name for the user."
          },
          "about": {
            "example": "Example User's bio",
            "type": "string",
            "description": "User-defined information about themselves."
          },
          "locale": {
            "example": "en-US",
            "type": "string",
            "description": "Current locale selected by the user. Returns IETF language code."
          },
          "premium": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "Whether the user is a premium user."
          },
          "idVerified": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "Specifies if the user is identity-verified. Verification includes, but\nisn't limited to, non-VoIP phone numbers or government IDs.\n\nTo access this data, you need an API key / OAuth token with the following\nscope: user.advanced:read"
          },
          "socialNetworkProfiles": {
            "$ref": "#/components/schemas/User_SocialNetworkProfiles",
            "description": "User's social network profiles and visibility."
          }
        },
        "description": "Represents any registered user of Roblox.",
        "x-aep-resource": {
          "patterns": ["users/{user_id}"],
          "plural": "users",
          "singular": "user"
        },
        "x-resource": true
      },
      "UserNotification": {
        "type": "object",
        "properties": {
          "path": {
            "example": "users/123/notifications/01234567-ABCD-1234-ABCD-0123456789AB",
            "type": "string",
            "description": "The resource path of the user notification.\n\nFormat: `users/{user_id}/notifications/{user_notification_id}`"
          },
          "id": {
            "readOnly": true,
            "example": "a6746f2e-2cc6-11ee-be56-0242ac120002",
            "type": "string",
            "description": "A unique UUID of the user notification."
          },
          "source": {
            "$ref": "#/components/schemas/UserNotification_Source",
            "description": "The source of the notification."
          },
          "payload": {
            "$ref": "#/components/schemas/UserNotification_Payload",
            "description": "The notification payload."
          }
        },
        "description": "Represents a notification sent to a user.",
        "x-aep-resource": {
          "patterns": ["users/{user_id}/notifications/{user_notification_id}"],
          "plural": "user-notifications",
          "singular": "user-notification"
        },
        "x-resource": true
      },
      "UserNotification_Payload": {
        "type": "object",
        "properties": {
          "type": {
            "writeOnly": true,
            "example": "TYPE_UNSPECIFIED",
            "enum": ["TYPE_UNSPECIFIED", "MOMENT"],
            "type": "string",
            "description": "The type of notification.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | TYPE_UNSPECIFIED | The default value. This value is unused. |\n  | MOMENT | A notification type representing a moment. |",
            "format": "enum"
          },
          "messageId": {
            "writeOnly": true,
            "example": "5dd7024b-68e3-ac4d-8232-4217f86ca244",
            "type": "string",
            "description": "An ID that represents a customizable notification message template\nthat you create in Creator Dashboard.\n\nThe message can contain customizable parameters that you can specify\nvalues for. For example, `Your {egg_name} just hatched` has an\n`egg_name` parameter. See the `parameters` field for more\ninformation."
          },
          "parameters": {
            "writeOnly": true,
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/UserNotification_Payload_ParameterValue"
            },
            "description": "A map of parameters used to render a notification message template.\n\nFor example, given a template of `Your {egg_name} just hatched.` with\nparameters of `[{\"egg_name\": {\"string_value\": \"royal egg\"}}]`, the\nrendered notification message is: `Your royal egg just hatched.`"
          },
          "joinExperience": {
            "$ref": "#/components/schemas/UserNotification_Payload_JoinExperience",
            "description": "Call-to-action that represents joining an experience."
          },
          "analyticsData": {
            "$ref": "#/components/schemas/UserNotification_Payload_AnalyticsData",
            "description": "Data for how analytics are reported."
          }
        },
        "description": "Details about the notification.",
        "x-oneOf": {
          "callToAction": ["joinExperience"]
        }
      },
      "UserNotification_Payload_AnalyticsData": {
        "type": "object",
        "properties": {
          "category": {
            "writeOnly": true,
            "example": "Bronze egg hatched",
            "type": "string",
            "description": "Category of the notification, used to group analytics data.\n\nFor example, \"Golden egg hatched\", \"Bronze egg hatched\", \"Volcano\neruptions\"."
          }
        },
        "description": "Data for how analytics are reported."
      },
      "UserNotification_Payload_JoinExperience": {
        "type": "object",
        "properties": {
          "launchData": {
            "writeOnly": true,
            "example": "Launch Data",
            "type": "string",
            "description": "Arbitrary data that is available to an experience\nwhen a user joins the experience with the notification.\n\nThis value is limited to a maximum of 200 bytes."
          }
        },
        "description": "A call-to-action that represents joining an experience."
      },
      "UserNotification_Payload_ParameterValue": {
        "type": "object",
        "properties": {
          "stringValue": {
            "example": "bronze egg",
            "type": "string",
            "description": "A string value."
          },
          "int64Value": {
            "example": 10101010,
            "type": "integer",
            "description": "An int64 value.",
            "format": "int64"
          }
        },
        "description": "A parameter value that a template uses to render a notification message.",
        "x-oneOf": {
          "value": ["stringValue", "int64Value"]
        }
      },
      "UserNotification_Source": {
        "type": "object",
        "properties": {
          "universe": {
            "writeOnly": true,
            "example": "universes/96623001",
            "type": "string",
            "description": "The universe from which the user notification is sent."
          }
        },
        "description": "The source of the notification.",
        "x-oneOf": {
          "source": ["universe"]
        }
      },
      "UserRestriction": {
        "type": "object",
        "properties": {
          "path": {
            "example": "universes/123/user-restrictions/123",
            "type": "string",
            "description": "The resource path of the user restriction.\n\nFormats:\n* `universes/{universe_id}/user-restrictions/{user_restriction_id}`\n* `universes/{universe_id}/places/{place_id}/user-restrictions/{user_restriction_id}`"
          },
          "updateTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The timestamp when the user restriction was last updated.",
            "format": "date-time"
          },
          "user": {
            "readOnly": true,
            "example": "users/156",
            "type": "string",
            "description": "The affected user."
          },
          "gameJoinRestriction": {
            "$ref": "#/components/schemas/UserRestriction_GameJoinRestriction",
            "description": "The user is banned from the parent universe or place."
          }
        },
        "description": "Represents a restriction on a user.",
        "x-aep-resource": {
          "patterns": [
            "universes/{universe_id}/user-restrictions/{user_restriction_id}",
            "universes/{universe_id}/places/{place_id}/user-restrictions/{user_restriction_id}"
          ],
          "plural": "user-restrictions",
          "singular": "user-restriction"
        },
        "x-resource": true
      },
      "UserRestrictionLog": {
        "type": "object",
        "properties": {
          "user": {
            "example": "users/156",
            "type": "string",
            "description": "The user to which this restriction update is applied."
          },
          "place": {
            "example": "places/456",
            "type": "string",
            "description": "The place in which a user restriction was explicitly updated.\nThis field is empty if the log captures a state change applied on the\nuniverse level."
          },
          "moderator": {
            "$ref": "#/components/schemas/UserRestrictionLog_Moderator",
            "description": "The moderator who issued the state change."
          },
          "createTime": {
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "When the change happened.",
            "format": "date-time"
          },
          "active": {
            "example": true,
            "type": "boolean",
            "description": "Whether the restriction was active after the action\nrepresented by this log."
          },
          "startTime": {
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The start time of the restriction.",
            "format": "date-time"
          },
          "duration": {
            "example": "3s",
            "type": "string",
            "description": "The duration of the restriction.\n\nIf not specified, the restriction is permanent.",
            "format": "duration"
          },
          "privateReason": {
            "example": "some private reason",
            "type": "string",
            "description": "The reason the restriction was created.\n\nThis field *is not* displayed to the user."
          },
          "displayReason": {
            "example": "some display reason",
            "type": "string",
            "description": "The user-facing reason the restriction was created.\n\nThis field *is* displayed to the user."
          },
          "restrictionType": {
            "$ref": "#/components/schemas/UserRestrictionLog_RestrictionType",
            "description": "The type of restriction for this log."
          },
          "excludeAltAccounts": {
            "example": true,
            "type": "boolean",
            "description": "When true, the restriction will not be be propagated to alt accounts.\n\nDefaults to false."
          }
        },
        "description": "An entity capturing a state change on a type of restriction."
      },
      "UserRestrictionLog_Moderator": {
        "type": "object",
        "properties": {
          "robloxUser": {
            "example": "users/156",
            "type": "string",
            "description": "A moderator identified by the User resource."
          },
          "gameServerScript": {
            "$ref": "#/components/schemas/UserRestrictionLog_Moderator_GameServerScript",
            "description": "A moderator identified as a Lua script on game server."
          }
        },
        "description": "An entity capturing the author of a state change.",
        "x-oneOf": {
          "kind": ["robloxUser", "gameServerScript"]
        }
      },
      "UserRestrictionLog_Moderator_GameServerScript": {
        "type": "object",
        "properties": {},
        "description": "Represents a user-written Lua script executed on game server."
      },
      "UserRestrictionLog_RestrictionType": {
        "type": "object",
        "properties": {
          "gameJoinRestriction": {
            "$ref": "#/components/schemas/UserRestrictionLog_RestrictionType_GameJoinRestriction",
            "description": "Represents game join restriction as one of the restriction type."
          }
        },
        "description": "The type of restriction.",
        "x-oneOf": {
          "kind": ["gameJoinRestriction"]
        }
      },
      "UserRestrictionLog_RestrictionType_GameJoinRestriction": {
        "type": "object",
        "properties": {},
        "description": "Represents game join restriction."
      },
      "UserRestriction_GameJoinRestriction": {
        "type": "object",
        "properties": {
          "active": {
            "example": true,
            "type": "boolean",
            "description": "By default, this is false since a user's access to an experience\nis not restricted to begin with.\n\nIf this is set to true at the experience level, this becomes true\nautomatically at the place level for all places in the experience."
          },
          "startTime": {
            "readOnly": true,
            "example": "2023-07-05T12:34:56Z",
            "type": "string",
            "description": "The start time of the restriction.",
            "format": "date-time"
          },
          "duration": {
            "example": "3s",
            "type": "string",
            "description": "The duration of the restriction.\n\nIf not specified, the restriction is permanent. If specified, the range\nmust be from 1 second to 315,576,000,000 seconds, inclusive. Durations\nwith sub-second precision are not permitted.",
            "format": "duration"
          },
          "privateReason": {
            "example": "some private reason",
            "type": "string",
            "description": "The reason the restriction was created.\n\nThis field *is not* displayed to the user. 1,000 character maximum."
          },
          "displayReason": {
            "example": "some display reason",
            "type": "string",
            "description": "The user-facing reason the restriction was created.\n\nThis field *is* displayed to the user. 400 character maximum."
          },
          "excludeAltAccounts": {
            "example": true,
            "type": "boolean",
            "description": "When true, the restriction will not be be propagated to alt accounts.\n\nDefaults to false."
          },
          "inherited": {
            "readOnly": true,
            "example": true,
            "type": "boolean",
            "description": "This is true when the restriction doesn't directly apply to the parent\nresource, but to some other ancestor resource.\n\nFor example, if a user restriction exists on universes/123, then any\nplaces within that universe from which the user was not explicitly\nrestricted will have an inherited restriction and this field will be\n`true`."
          }
        },
        "description": "A restriction means the affected user will not be able to join the parent\nuniverse or place, and will be kicked if currently joined."
      },
      "User_SocialNetworkProfiles": {
        "type": "object",
        "properties": {
          "facebook": {
            "type": "string",
            "description": "Facebook profile URI."
          },
          "twitter": {
            "type": "string",
            "description": "Twitter profile URI."
          },
          "youtube": {
            "type": "string",
            "description": "YouTube profile URI."
          },
          "twitch": {
            "type": "string",
            "description": "Twitch profile URI."
          },
          "guilded": {
            "type": "string",
            "description": "Guilded profile URI."
          },
          "visibility": {
            "example": "SOCIAL_NETWORK_VISIBILITY_UNSPECIFIED",
            "enum": [
              "SOCIAL_NETWORK_VISIBILITY_UNSPECIFIED",
              "NO_ONE",
              "FRIENDS",
              "FRIENDS_AND_FOLLOWING",
              "FRIENDS_FOLLOWING_AND_FOLLOWERS",
              "EVERYONE"
            ],
            "type": "string",
            "description": "Visibility of the social network profiles.\n\nTo access this data, you need an API key / OAuth token with the following\nscope: user.social:read\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | SOCIAL_NETWORK_VISIBILITY_UNSPECIFIED | Default SocialNetworkVisibility. |\n  | NO_ONE | No one |\n  | FRIENDS | Friends only |\n  | FRIENDS_AND_FOLLOWING | Friends and other users the user follows |\n  | FRIENDS_FOLLOWING_AND_FOLLOWERS | Friends, other users the user follows, and other users who follow the user |\n  | EVERYONE | Everyone |",
            "format": "enum"
          }
        },
        "description": "Social network profiles of a user."
      },
      "roblox.engine.Folder": {
        "type": "object",
        "properties": {},
        "description": "A simple container used to hold and organize Roblox instances."
      },
      "roblox.engine.Instance": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The unique identifier for an instance. \nFormat: lower-case hexadecimal characters\nExample: 44b188da-ce63-2b47-02e9-c68d004b5664"
          },
          "Parent": {
            "type": "string",
            "description": "The parent of the Instance.\nFormat: lower-case hexadecimal characters\nExample: 44b188da-ce63-2b47-02e9-c68d004b5664"
          },
          "Name": {
            "type": "string",
            "description": "A non-unique identifier of the Instance."
          },
          "Details": {
            "$ref": "#/components/schemas/roblox.engine.InstanceDetails",
            "description": "Properties specific to the type of the instance."
          }
        },
        "description": "Instance is the base class for all classes in the Roblox class hierarchy.",
        "x-oneOf": {
          "Details": ["Details"],
          "Name": ["Name"]
        }
      },
      "roblox.engine.InstanceDetails": {
        "type": "object",
        "properties": {
          "Folder": {
            "$ref": "#/components/schemas/roblox.engine.Folder",
            "description": "A simple container used to hold and organize Roblox instances."
          },
          "LocalScript": {
            "$ref": "#/components/schemas/roblox.engine.LocalScript",
            "description": "A LocalScript is a Lua code container that runs its contents on the client (player's device) instead of the server."
          },
          "ModuleScript": {
            "$ref": "#/components/schemas/roblox.engine.ModuleScript",
            "description": "A ModuleScript is a type of Lua source container that runs once and must return exactly one value."
          },
          "Script": {
            "$ref": "#/components/schemas/roblox.engine.Script",
            "description": "A Script is a Lua code container that can access server-side objects, properties, and events, such as to award badges to players using BadgeService, while LocalScripts on the client cannot."
          }
        },
        "description": "Contains instance type-specific details about a data model instance.",
        "x-oneOf": {
          "kind": ["Folder", "LocalScript", "ModuleScript", "Script"]
        }
      },
      "roblox.engine.LocalScript": {
        "type": "object",
        "properties": {
          "Enabled": {
            "example": true,
            "type": "boolean",
            "description": "Determines whether a BaseScript will run or not."
          },
          "RunContext": {
            "example": "Legacy",
            "enum": ["Legacy", "Server", "Client", "Plugin"],
            "type": "string",
            "description": "Determines the context under which the script will run.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | Legacy | Runs in legacy script containers dependent on the type of script used, such as LocalScript or Script. |\n  | Server | Runs on the server. |\n  | Client | Runs on the client. |\n  | Plugin | Runs as a descendant of Plugin instances. |",
            "format": "enum"
          },
          "Source": {
            "type": "string",
            "description": "The code to be executed."
          }
        },
        "description": "A LocalScript is a Lua code container that runs its contents on the client (player's device) instead of the server.",
        "x-oneOf": {
          "Enabled": ["Enabled"],
          "RunContext": ["RunContext"],
          "Source": ["Source"]
        }
      },
      "roblox.engine.ModuleScript": {
        "type": "object",
        "properties": {
          "Source": {
            "type": "string",
            "description": "The code to be executed."
          }
        },
        "description": "A ModuleScript is a type of Lua source container that runs once and must return exactly one value.",
        "x-oneOf": {
          "Source": ["Source"]
        }
      },
      "roblox.engine.Script": {
        "type": "object",
        "properties": {
          "Enabled": {
            "example": true,
            "type": "boolean",
            "description": "Determines whether the BaseScript will run or not."
          },
          "RunContext": {
            "example": "Legacy",
            "enum": ["Legacy", "Server", "Client", "Plugin"],
            "type": "string",
            "description": "Determines the context in which the script will run.\n\nPossible values:\n\n  | Value | Description |\n  | --- | --- |\n  | Legacy | Runs in legacy script containers dependent on the type of script used, such as LocalScript or Script. |\n  | Server | Runs on the server. |\n  | Client | Runs on the client. |\n  | Plugin | Runs as a descendant of Plugin instances. |",
            "format": "enum"
          },
          "Source": {
            "type": "string",
            "description": "The code to be executed."
          }
        },
        "description": "A Script is a Lua code container that can access server-side objects, properties, and events, such as to award badges to players using BadgeService, while LocalScripts on the client cannot.",
        "x-oneOf": {
          "Enabled": ["Enabled"],
          "RunContext": ["RunContext"],
          "Source": ["Source"]
        }
      },
      "OCV1.DataStores.DataStore": {
        "type": "object",
        "description": "The data store object with its name and created time.",
        "properties": {
          "name": {
            "type": "string",
            "format": "binary",
            "description": "The name of your data store."
          },
          "createdTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The timestamp of when the data store was created in the ISO time format."
          }
        },
        "additionalProperties": false
      },
      "EntryVersion": {
        "type": "object",
        "description": "The entry version object returned by the `List Entry Versions` method.",
        "properties": {
          "version": {
            "type": "string",
            "format": "binary",
            "description": "The version name of the qualifying entry."
          },
          "deleted": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the entry has been deleted."
          },
          "contentLength": {
            "type": "number",
            "description": "The length of the content."
          },
          "createdTime": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of when the version was created in the ISO time format."
          },
          "objectCreatedTime": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of when the data store was created in the ISO time format."
          }
        },
        "additionalProperties": false
      },
      "Entry": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The resource path of the request."
          },
          "id": {
            "type": "string",
            "description": "The name of the entry"
          },
          "value": {
            "type": "integer",
            "description": "The value of the entry.",
            "format": "int64"
          }
        },
        "description": "Represents an entry."
      },
      "IncrementEntryRequest": {
        "required": ["amount"],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount to increment by the entry value. If the input value exceeds the maximum value supported by int64, which is 9,223,372,036,854,775,807, the request fails with a 400 Bad Request error.",
            "format": "int64"
          }
        },
        "description": "Increments entry value."
      },
      "UpdateEntryRequest": {
        "required": ["value"],
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "The value to update the entry. If the input value exceeds the maximum value supported by int64, which is 9,223,372,036,854,775,807, the request fails with a 400 Bad Request error.",
            "format": "int64"
          }
        },
        "description": "Updates the entry provided with a new value."
      },
      "CreateEntryRequest": {
        "required": ["value"],
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "The value to set the new entry. If the input value exceeds the maximum value supported by int64, which is 9,223,372,036,854,775,807, the request fails with a 400 Bad Request error.",
            "format": "int64"
          }
        },
        "description": "Creates a new entry with the value provided."
      },
      "ListEntriesResponse": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entry"
            },
            "description": "The Entries from the specified Scope."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "A list of Entries in the parent collection."
      },
      "Any": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The type of the serialized message."
          }
        },
        "description": "Contains an arbitrary serialized message along with a `@type` that describes the type of the serialized message."
      },
      "Asset": {
        "type": "object",
        "properties": {
          "assetType": {
            "type": "string",
            "description": "The asset type. Can only be `Audio`, `Decal`, or `Model`. Required for [Create Asset](#POST-v1-assets).",
            "format": "enum"
          },
          "assetId": {
            "type": "integer",
            "description": "The unique identifier of the asset. Required for [Update Asset](#PATCH-v1-assets-_asset_).",
            "format": "int64",
            "readOnly": true
          },
          "creationContext": {
            "$ref": "#/components/schemas/CreationContext"
          },
          "description": {
            "type": "string",
            "description": "The description of the asset. Limit to 1000 characters. Required for [Create Asset](#POST-v1-assets)."
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the asset. Required for [Create Asset](#POST-v1-assets)."
          },
          "path": {
            "type": "string",
            "description": "The returned resource path of the asset. Format: `assets/{assetId}`. Example: `assets/2205400862`."
          },
          "revisionId": {
            "type": "string",
            "description": "Revision ID of the asset. Equivalent to `versionNumber`. Every change of the asset automatically commits a new version. The format is an integer string. Example: `1`.",
            "readOnly": true
          },
          "revisionCreateTime": {
            "type": "string",
            "description": "The creation timestamp of the current revision.",
            "format": "date-time",
            "readOnly": true
          },
          "moderationResult": {
            "$ref": "#/components/schemas/ModerationResult"
          },
          "icon": {
            "type": "string",
            "description": "The resource path for the icon."
          },
          "previews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Preview"
            },
            "description": "A list of previews, each with an asset path and alt text. Previews must be **Image** assets."
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "socialLink": {
            "$ref": "#/components/schemas/SocialLink"
          }
        },
        "description": "Represents an asset."
      },
      "AssetVersion": {
        "type": "object",
        "properties": {
          "creationContext": {
            "$ref": "#/components/schemas/CreationContext"
          },
          "path": {
            "type": "string",
            "description": "The returned resource path of the asset version. Format: `assets/{assetId}/versions/{version}`. Example: `assets/2205400862/versions/1`."
          },
          "moderationResult": {
            "$ref": "#/components/schemas/ModerationResult"
          },
          "published": {
            "type": "boolean",
            "description": "Only applies to place asset types. Indicates if the place has been published or not."
          }
        },
        "description": "An asset version."
      },
      "CreationContext": {
        "type": "object",
        "properties": {
          "creator": {
            "$ref": "#/components/schemas/Creator",
            "required": true
          },
          "expectedPrice": {
            "type": "integer",
            "description": "Expected asset upload fee in Robux. When the actual price is more than expected, the operation fails with a 400 error.",
            "format": "int64",
            "writeOnly": true
          }
        },
        "description": "The context of creation that is not part of the asset content, such as metadata and creator information. Required for [Create Asset](#POST-v1-assets)."
      },
      "Creator": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The User ID the creator. Required if the asset is individual-user-owned.",
            "format": "int64"
          },
          "groupId": {
            "type": "integer",
            "description": "The Group ID. Required if the asset is group-owned.",
            "format": "int64"
          }
        },
        "description": "Represents a creator."
      },
      "ModerationResult": {
        "type": "object",
        "properties": {
          "moderationState": {
            "type": "string",
            "description": "The moderation state of the asset. Can be `Reviewing`, `Rejected`, or `Approved`."
          }
        },
        "description": "The moderation result of the asset. "
      },
      "OCV1.Assets.Operation": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The server-assigned resource path. The default format is `operations/{operation_id}`."
          },
          "metadata": {
            "$ref": "#/components/schemas/Any"
          },
          "done": {
            "type": "boolean",
            "description": "If `false`, the operation is still in progress. If `true`, the operation is completed."
          },
          "error": {
            "$ref": "#/components/schemas/OCV1.Assets.Status"
          },
          "response": {
            "$ref": "#/components/schemas/Any"
          }
        },
        "description": "This resource represents a long-running operation that is the result of a network API call."
      },
      "Preview": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "string",
            "description": "The preview asset path."
          },
          "altText": {
            "type": "string",
            "description": "Alt text for the preview asset."
          }
        },
        "description": "An asset preview."
      },
      "SocialLink": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "An optional title for the social media link. Not used on the Creator Hub."
          },
          "uri": {
            "type": "string",
            "description": "The URI for the social media link. Must match the expected format for the type of link. For example, the title for a `twitchSocialLink` object must be of the format `https://twitch.tv/your-channel`."
          }
        },
        "description": "A social media link for the asset. Maximum of three per asset. Object name can be any of: <ul><li>`facebookSocialLink`</li><li>`twitterSocialLink`</li><li>`youtubeSocialLink`</li><li>`twitchSocialLink`</li><li>`discordSocialLink`</li><li>`githubSocialLink`</li><li>`robloxSocialLink`</li><li>`guildedSocialLink`</li><li>`devForumSocialLink`</li></ul>For syntax, see the sample request under [Update Asset](#PATCH-v1-assets-_assetId_)."
      },
      "State": {
        "type": "string",
        "description": "Whether the asset is active or archived. Unspecified isn't used.",
        "enum": ["Unspecified", "Active", "Archived"]
      },
      "OCV1.Assets.Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The HTTP status code.",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "The error message."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Any"
            },
            "description": "A list of messages carrying error details."
          }
        },
        "description": "The logical error model explaining the error status."
      },
      "PublishRequest": {
        "type": "object",
        "description": "The request body object with the message string that you want to publish to the live server.",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true,
            "description": "The message content that you want to publish to the live server."
          }
        },
        "additionalProperties": false
      },
      "Roblox.AccountInformation.Api.Models.BirthdateRequest": {
        "description": "The birthdate request",
        "type": "object",
        "properties": {
          "birthMonth": {
            "format": "int32",
            "description": "The birth month",
            "type": "integer"
          },
          "birthDay": {
            "format": "int32",
            "description": "The birth day",
            "type": "integer"
          },
          "birthYear": {
            "format": "int32",
            "description": "The birth year",
            "type": "integer"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.BirthdateResponse": {
        "description": "The birthdate response",
        "type": "object",
        "properties": {
          "birthMonth": {
            "format": "int32",
            "description": "The birth month",
            "type": "integer"
          },
          "birthDay": {
            "format": "int32",
            "description": "The birth day",
            "type": "integer"
          },
          "birthYear": {
            "format": "int32",
            "description": "The birth year",
            "type": "integer"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.ConsecutiveLoginDaysResponse": {
        "description": "The consecutive login days response",
        "type": "object",
        "properties": {
          "count": {
            "format": "int32",
            "description": "Consecutive login days",
            "type": "integer"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.DescriptionRequest": {
        "description": "The description request",
        "type": "object",
        "properties": {
          "description": {
            "description": "The description",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.DescriptionResponse": {
        "description": "The description response",
        "type": "object",
        "properties": {
          "description": {
            "description": "The description",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.EmptyRequest": {
        "description": "For API calls without a request body.",
        "type": "object"
      },
      "Roblox.AccountInformation.Api.Models.GenderRequest": {
        "description": "The gender request",
        "type": "object",
        "properties": {
          "gender": {
            "description": "The gender",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.GenderResponse": {
        "description": "The gender response",
        "type": "object",
        "properties": {
          "gender": {
            "format": "int32",
            "description": "The gender",
            "type": "integer"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.MetadataResponse": {
        "description": "The metadata response",
        "type": "object",
        "properties": {
          "isAllowedNotificationsEndpointDisabled": {
            "description": "Switch for account/settings/allowed-notification-destinations endpoint",
            "type": "boolean"
          },
          "isAccountSettingsPolicyEnabled": {
            "description": "The account settings policy enabled setting",
            "type": "boolean"
          },
          "isPhoneNumberEnabled": {
            "description": "Switch for phone endpoints",
            "type": "boolean"
          },
          "MaxUserDescriptionLength": {
            "format": "int32",
            "description": "The limit on the length used for description",
            "type": "integer"
          },
          "isUserDescriptionEnabled": {
            "description": "Switch for determining if user description is enabled",
            "type": "boolean"
          },
          "isUserBlockEndpointsUpdated": {
            "description": "Switch for determining block endpoints to use for the user",
            "type": "boolean"
          },
          "shouldUsePersonaForIdVerification": {
            "description": "Whether to use Persona for ID verification.",
            "type": "boolean"
          },
          "shouldDisplaySessionManagement": {
            "description": "Whether to display Session Management.",
            "type": "boolean"
          },
          "isPasswordRequiredForAgingDown": {
            "description": "Switch for requiring password to change age below 13.",
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.PhoneRequest": {
        "description": "The phone request",
        "type": "object",
        "properties": {
          "countryCode": {
            "description": "The country Code",
            "type": "string"
          },
          "prefix": {
            "description": "The Phone Prefix",
            "type": "string"
          },
          "phone": {
            "description": "The Phone number",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          },
          "verificationChannel": {
            "description": "Verification Channel",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.PhoneResponse": {
        "description": "The phone response",
        "type": "object",
        "properties": {
          "countryCode": {
            "description": "The country Code",
            "type": "string"
          },
          "prefix": {
            "description": "The Phone Prefix",
            "type": "string"
          },
          "phone": {
            "description": "The Phone number",
            "type": "string"
          },
          "isVerified": {
            "description": "Is the phone verified",
            "type": "boolean"
          },
          "verificationCodeLength": {
            "format": "int32",
            "description": "Verification Code Length",
            "type": "integer"
          },
          "canBypassPasswordForPhoneUpdate": {
            "description": "Whether user needs to provide password to update their phone numbers",
            "type": "boolean"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.PromotionChannelsByUserIdResponse": {
        "description": "The promotion channels response",
        "type": "object",
        "properties": {
          "facebook": {
            "description": "The Facebook channel",
            "type": "string"
          },
          "twitter": {
            "description": "The Twitter channel",
            "type": "string"
          },
          "youtube": {
            "description": "The YouTube channel",
            "type": "string"
          },
          "twitch": {
            "description": "The Twitch channel",
            "type": "string"
          },
          "guilded": {
            "description": "The Guilded channel",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.PromotionChannelsRequest": {
        "description": "The promotion channels request",
        "type": "object",
        "properties": {
          "facebook": {
            "description": "The Facebook channel",
            "type": "string"
          },
          "twitter": {
            "description": "The Twitter channel",
            "type": "string"
          },
          "youtube": {
            "description": "The YouTube channel",
            "type": "string"
          },
          "twitch": {
            "description": "The Twitch channel",
            "type": "string"
          },
          "guilded": {
            "description": "The Guilded channel",
            "type": "string"
          },
          "promotionChannelsVisibilityPrivacy": {
            "description": "The promotion channels visibility privacy level",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.PromotionChannelsResponse": {
        "description": "The promotion channels response",
        "type": "object",
        "properties": {
          "promotionChannelsVisibilityPrivacy": {
            "description": "The promotion channels visibility privacy level",
            "type": "string"
          },
          "facebook": {
            "description": "The Facebook channel",
            "type": "string"
          },
          "twitter": {
            "description": "The Twitter channel",
            "type": "string"
          },
          "youtube": {
            "description": "The YouTube channel",
            "type": "string"
          },
          "twitch": {
            "description": "The Twitch channel",
            "type": "string"
          },
          "guilded": {
            "description": "The Guilded channel",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.StarCodeAffiliateRequest": {
        "description": "The star code affiliate request",
        "type": "object",
        "properties": {
          "code": {
            "description": "The star code affiliate code",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.StarCodeAffiliateResponse": {
        "description": "The star code affiliate response",
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "description": "The star code affiliate user id",
            "type": "integer"
          },
          "name": {
            "description": "The star code affiliate name",
            "type": "string"
          },
          "code": {
            "description": "The star code affiliate code",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.VerifyEmailRequest": {
        "description": "Verify Email Request",
        "type": "object",
        "properties": {
          "ticket": {
            "description": "Ticket to verify email",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.VerifyEmailResponse": {
        "description": "The verify email response",
        "type": "object",
        "properties": {
          "verifiedUserHatAssetId": {
            "format": "int32",
            "description": "Free item id after email verification",
            "type": "integer"
          }
        }
      },
      "Roblox.AccountInformation.Api.Models.VerifyPhoneRequest": {
        "description": "Verify Phone Request",
        "type": "object",
        "properties": {
          "code": {
            "description": "Code to verify phone",
            "type": "string"
          }
        }
      },
      "Roblox.AccountInformation.Api.RobloxBadgeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "description": "The ID belonging to this Roblox badge.",
            "type": "integer"
          },
          "name": {
            "description": "The name of this Roblox badge.",
            "type": "string"
          },
          "description": {
            "description": "The description belonging to this Roblox badge.",
            "type": "string"
          },
          "imageUrl": {
            "description": "The URL corresponding to the image which represents this Roblox badge.",
            "type": "string"
          }
        }
      },
      "Roblox.Platform.UserPhoneNumberVerification.Models.PendingVerificationResponse": {
        "type": "object",
        "properties": {
          "verificationChannel": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
        "type": "object"
      },
      "Roblox.AccountSettings.Api.EmailResponse": {
        "description": "Response model for getting the user's email address and verified status",
        "type": "object",
        "properties": {
          "emailAddress": {
            "description": "The masked and formatted email address",
            "type": "string"
          },
          "verified": {
            "description": "The verified status of the email",
            "type": "boolean"
          },
          "canBypassPasswordForEmailUpdate": {
            "description": "Whether password is required for updating email",
            "type": "boolean"
          }
        }
      },
      "Roblox.AccountSettings.Api.Models.AccountsSettingsMetadataModel": {
        "description": "A model containing website metadata for avatars",
        "type": "object",
        "properties": {
          "IsAccountsRestrictionsSpamBugFixEnabled": {
            "description": "Whether or not account restrictions spam bug fix is enabled",
            "type": "boolean"
          },
          "MaximumParentalControlsMonthlySpendLimitInUSD": {
            "format": "int32",
            "description": "The max amount a user can enter as their monthly spending limit in USD",
            "type": "integer"
          },
          "IsParentalMonthlyLimitInUIEnabled": {
            "description": "Enables/disables the section in the account parental controls page where you can set the monthly spend limit",
            "type": "boolean"
          },
          "IsParentalNotificationSettingsInUIEnabled": {
            "description": "Enables/disables the section in the account parental controls page where you can set the parental notifications settings",
            "type": "boolean"
          },
          "IsContentControlsEnabled": {
            "description": "Enables/disables the section in the account parental controls page where you can set the content control settings",
            "type": "boolean"
          }
        }
      },
      "Roblox.AccountSettings.Api.Models.Response.AccountCountrySettingsResponse": {
        "description": "",
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Roblox.AccountSettings.Api.Models.Response.UserAccountCountry"
          }
        }
      },
      "Roblox.AccountSettings.Api.Models.Response.UpdateAccountCountryResponse": {
        "type": "object"
      },
      "Roblox.AccountSettings.Api.Models.Response.UserAccountCountry": {
        "description": "",
        "type": "object",
        "properties": {
          "countryName": {
            "description": "",
            "type": "string"
          },
          "subdivisionIso": {
            "description": "",
            "type": "string"
          },
          "localizedSubdivision": {
            "description": "",
            "type": "string"
          },
          "localizedName": {
            "description": "",
            "type": "string"
          },
          "countryId": {
            "format": "int32",
            "description": "",
            "type": "integer"
          }
        }
      },
      "Roblox.AccountSettings.Api.SendVerifyEmailRequest": {
        "description": "Request model for sending a verify email request",
        "type": "object",
        "properties": {
          "freeItem": {
            "description": "Whether the user will see messaging that they received a free item after verifying their email",
            "type": "boolean"
          },
          "isAdsAccount": {
            "description": "Whether the request is coming from ads site",
            "type": "boolean"
          }
        }
      },
      "Roblox.AccountSettings.Api.ThemeConfigurationRequest": {
        "description": "Response model for get user's theme type",
        "type": "object",
        "properties": {
          "themeType": {
            "description": "theme Type",
            "type": "string"
          }
        }
      },
      "Roblox.AccountSettings.Api.ThemeConfigurationResponse": {
        "description": "Response model for get user's theme type",
        "type": "object",
        "properties": {
          "themeType": {
            "description": "theme Type",
            "type": "string"
          }
        }
      },
      "Roblox.AccountSettings.Api.TradePrivacyResponse": {
        "description": "Response model for getting the user's trade privacy settings",
        "type": "object",
        "properties": {
          "tradePrivacy": {
            "description": "The current trade privacy setting for the current user",
            "type": "string"
          }
        }
      },
      "Roblox.AccountSettings.Api.TradePrivacyUpdateResponse": {
        "description": "Response model for updating the user's trade privacy settings",
        "type": "object",
        "properties": {
          "tradePrivacy": {
            "format": "int32",
            "description": "The trade privacy setting after updating ['Undefined' = 0, 'Disabled' = 1, 'NoOne' = 2, 'Friends' = 3, 'TopFriends' = 4, 'Following' = 5, 'Followers' = 6, 'All' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          },
          "inventoryPrivacy": {
            "format": "int32",
            "description": "The inventory privacy setting after updating ['NoOne' = 1, 'Friends' = 2, 'FriendsAndFollowing' = 3, 'FriendsFollowingAndFollowers' = 4, 'AllAuthenticatedUsers' = 5, 'AllUsers' = 6]",
            "enum": [1, 2, 3, 4, 5, 6],
            "type": "integer"
          },
          "privacySettingResponse": {
            "format": "int32",
            "description": "The response state after updating trade privacy ['Success' = 0, 'Conflict' = 1]",
            "enum": [0, 1],
            "type": "integer"
          }
        }
      },
      "Roblox.AccountSettings.Api.TradeValueRequest": {
        "description": "Request model for trade value setting update",
        "type": "object",
        "properties": {
          "tradeValue": {
            "format": "int32",
            "description": "The desired trade value setting for the active user ['Undefined' = 0, 'None' = 1, 'Low' = 2, 'Medium' = 3, 'High' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.AccountSettings.Api.TradeValueResponse": {
        "description": "Response model for getting the user's trade value settings",
        "type": "object",
        "properties": {
          "tradeValue": {
            "description": "The current trade value setting for the current user",
            "type": "string"
          }
        }
      },
      "Roblox.AccountSettings.Api.UpdateAccountCountryRequest": {
        "description": "Request Model for updating a user's account country",
        "type": "object",
        "properties": {
          "targetCountryId": {
            "format": "int32",
            "description": "The targetCountryId",
            "type": "integer"
          }
        }
      },
      "Roblox.AccountSettings.Api.UpdateEmailRequest": {
        "description": "Request model for updating an email",
        "type": "object",
        "properties": {
          "password": {
            "description": "The user's password.",
            "type": "string"
          },
          "emailAddress": {
            "description": "The new email address to set.",
            "type": "string"
          },
          "skipVerificationEmail": {
            "description": "Should the email controller skip sending the verification email.",
            "type": "boolean"
          },
          "isAdsAccount": {
            "description": "Whether the request is coming from ads site.",
            "type": "boolean"
          }
        }
      },
      "Roblox.AccountSettings.Api.UpdateTradePrivacyRequest": {
        "description": "Request model for trade privacy setting update",
        "type": "object",
        "properties": {
          "tradePrivacy": {
            "format": "int32",
            "description": "The desired trade privacy setting for the active user ['Undefined' = 0, 'Disabled' = 1, 'NoOne' = 2, 'Friends' = 3, 'TopFriends' = 4, 'Following' = 5, 'Followers' = 6, 'All' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_System.String_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.AdConfiguration.Api.CreateSponsoredGameV2Request": {
        "description": "A request model for creating a sponsored game",
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "description": "The target universe id",
            "type": "integer"
          },
          "targetGender": {
            "format": "int32",
            "description": "Targeting gender(s) of the ad set ['Undefined' = 1, 'Male' = 2, 'Female' = 4]",
            "enum": [1, 2, 4],
            "type": "integer"
          },
          "targetAgeBracket": {
            "format": "int32",
            "description": "Targeting age bracket(s) of the ad set ['Undefined' = 1, 'AgeUnder13' = 2, 'Age13OrOver' = 4, 'Age13To16' = 8, 'Age17OrOver' = 16]",
            "enum": [1, 2, 4, 8, 16],
            "type": "integer"
          },
          "budgetInRobux": {
            "format": "int64",
            "description": "The budget in Robux",
            "type": "integer"
          },
          "startDate": {
            "format": "date-time",
            "description": "The start date of the ad set",
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "description": "The end date of the ad set",
            "type": "string"
          },
          "targetDeviceType": {
            "format": "int32",
            "description": "Targeting device type(s) of the ad set ['Undefined' = 1, 'Computer' = 2, 'Phone' = 4, 'Tablet' = 8, 'Console' = 16, 'VR' = 32]",
            "enum": [1, 2, 4, 8, 16, 32],
            "type": "integer"
          },
          "adName": {
            "description": "The name of the Ad",
            "type": "string"
          },
          "bidAmountInRobux": {
            "format": "int64",
            "description": "The bid amount of the Ad in Robux",
            "type": "integer"
          }
        }
      },
      "Roblox.AdConfiguration.Api.CreativeModel": {
        "description": "A model representing an Ad Creative (for example, an ad thumbnail).",
        "type": "object",
        "properties": {
          "creativeId": {
            "format": "int64",
            "description": "The ID of the creative. Typically, a thumbnail's imageId.",
            "type": "integer",
            "example": 1
          },
          "creativeType": {
            "format": "int32",
            "description": "The type of the ad creative. Typically, CreativeType.Image. ['Undefined' = 0, 'Image' = 1, 'Video' = 2]",
            "enum": [0, 1, 2],
            "type": "integer",
            "example": 1
          }
        }
      },
      "Roblox.AdConfiguration.Api.GetSponsoredCampaignsResponse": {
        "description": "A response model for retrieving a page of Roblox.AdConfiguration.Api.SponsoredCampaignModel.",
        "type": "object",
        "properties": {
          "sponsoredCampaigns": {
            "description": "A collection of Roblox.AdConfiguration.Api.SponsoredCampaignModel.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.SponsoredCampaignModel"
            }
          },
          "previousPageCursor": {
            "description": "The cursor for retrieving the previous page, if present.",
            "type": "string"
          },
          "nextPageCursor": {
            "description": "The cursor for retrieving the next page, if present.",
            "type": "string"
          }
        }
      },
      "Roblox.AdConfiguration.Api.GetSponsoredGamesResponse": {
        "description": "A response model for retrieving a page of Roblox.AdConfiguration.Api.SponsoredGameV2Model.",
        "type": "object",
        "properties": {
          "sponsoredGames": {
            "description": "A collection of Roblox.AdConfiguration.Api.SponsoredGameV2Model.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.SponsoredGameV2Model"
            }
          },
          "previousPageCursor": {
            "description": "The cursor for retrieving the previous page, if present.",
            "type": "string"
          },
          "nextPageCursor": {
            "description": "The cursor for retrieving the next page, if present.",
            "type": "string"
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.CampaignTargetModel": {
        "description": "Represents a sponsored ad campaign target",
        "type": "object",
        "properties": {
          "campaignTargetType": {
            "format": "int32",
            "description": "The campaign target type ['Undefined' = 0, 'Universe' = 1, 'Asset' = 2, 'ImmersiveAd' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "campaignTargetId": {
            "format": "int64",
            "description": "The ID of the campaign target",
            "type": "integer"
          },
          "name": {
            "description": "The name of the campaign target (i.e. the asset name, universe name, group name, etc.)",
            "type": "string"
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.CreateSponsoredCampaignRequest": {
        "description": "A request model for creating a sponsored game",
        "type": "object",
        "properties": {
          "campaignTargetId": {
            "format": "int64",
            "description": "The ID of the campaign target",
            "type": "integer",
            "example": 1
          },
          "campaignTargetType": {
            "format": "int32",
            "description": "The type of the campaign target ['Undefined' = 0, 'Universe' = 1, 'Asset' = 2, 'ImmersiveAd' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer",
            "example": 2
          },
          "targetGender": {
            "format": "int32",
            "description": "Targeting gender(s) of the ad set ['Undefined' = 1, 'Male' = 2, 'Female' = 4]",
            "enum": [1, 2, 4],
            "type": "integer",
            "example": 4
          },
          "targetAgeBracket": {
            "format": "int32",
            "description": "Targeting age bracket(s) of the ad set ['Undefined' = 1, 'AgeUnder13' = 2, 'Age13OrOver' = 4, 'Age13To16' = 8, 'Age17OrOver' = 16]",
            "enum": [1, 2, 4, 8, 16],
            "type": "integer",
            "example": 4
          },
          "startDate": {
            "format": "date-time",
            "description": "The start date of the ad set",
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "description": "The end date of the ad set",
            "type": "string"
          },
          "targetDeviceType": {
            "format": "int32",
            "description": "Targeting device type(s) of the ad set ['Undefined' = 1, 'Computer' = 2, 'Phone' = 4, 'Tablet' = 8, 'Console' = 16, 'VR' = 32]",
            "enum": [1, 2, 4, 8, 16, 32],
            "type": "integer",
            "example": 2
          },
          "campaignName": {
            "description": "The name of the Campaign / Ad",
            "type": "string"
          },
          "dailyBidAmountInRobux": {
            "format": "int64",
            "description": "The daily bid amount for the campaign / ad, in Robux",
            "type": "integer",
            "example": 101
          },
          "placementLocation": {
            "format": "int32",
            "description": "The location to place the campaign ['Undefined' = 1, 'GameSort' = 2, 'AvatarShop' = 4, 'ItemDetails' = 8, 'HomePage' = 16, 'Billboard300x250' = 32, 'Billboard600x300' = 64, 'Billboard300x600' = 128]",
            "enum": [1, 2, 4, 8, 16, 32, 64, 128],
            "type": "integer",
            "example": 4
          },
          "creativeModel": {
            "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.CreativeModel"
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.GetCampaignTargetsResponse": {
        "description": "The response model which returns a collection of Roblox.AdConfiguration.Api.Models.CampaignTargetModel",
        "type": "object",
        "properties": {
          "campaignTargetModels": {
            "description": "Gets or sets a collection of Roblox.AdConfiguration.Api.Models.CampaignTargetModel",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.CampaignTargetModel"
            }
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.GetEligibleCampaignTargetsRequest": {
        "description": "A model represents a request to stop a sponsored campaign / ad.",
        "type": "object",
        "properties": {
          "campaignTargetTypes": {
            "description": "The list of campaign types we want to include in the results",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Undefined' = 0, 'Universe' = 1, 'Asset' = 2, 'ImmersiveAd' = 3]",
              "enum": [0, 1, 2, 3],
              "type": "integer"
            }
          },
          "groupId": {
            "format": "int64",
            "description": "The group id, if applicable.",
            "type": "integer"
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.GetRecentAdsRankedUniversesResponse": {
        "description": "The response model for getting a list of recent-ads-ranked universes.",
        "type": "object",
        "properties": {
          "universes": {
            "description": "Gets or sets a list of Roblox.AdConfiguration.Api.Models.UniverseModel.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.AdConfiguration.Api.Models.UniverseModel"
            }
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.StopSponsoredCampaignRequest": {
        "description": "A model represents a request to stop a sponsored campaign / ad.",
        "type": "object",
        "properties": {
          "adSetId": {
            "format": "int64",
            "description": "The ID of the ad set to stop.",
            "type": "integer"
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.StopSponsoredGameV2Request": {
        "description": "A model represents a request to stop a sponsored game ad.",
        "type": "object",
        "properties": {
          "adSetId": {
            "format": "int64",
            "description": "Gets the ID of the ad set to stop.",
            "type": "integer"
          }
        }
      },
      "Roblox.AdConfiguration.Api.Models.UniverseModel": {
        "description": "Represents a universe in API endpoint results.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The universe Id.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the universe",
            "type": "string"
          }
        }
      },
      "Roblox.AdConfiguration.Api.SponsoredCampaignModel": {
        "description": "A response model represents an Ad with complete information, including infos from its associated campaign and ad set",
        "type": "object",
        "properties": {
          "adId": {
            "format": "int64",
            "description": "The id of the ad",
            "type": "integer"
          },
          "adSetId": {
            "format": "int64",
            "description": "The id of the ad set",
            "type": "integer"
          },
          "adName": {
            "description": "The name of the Ad",
            "type": "string"
          },
          "adStatus": {
            "format": "int32",
            "description": "The status of the ad ['Undefined' = 0, 'Draft' = 1, 'PendingApproval' = 2, 'Approved' = 3, 'Moderated' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "creativeType": {
            "format": "int32",
            "description": "The type of the creative associated with the Ad ['Undefined' = 0, 'Image' = 1, 'Video' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "creativeTargetId": {
            "format": "int64",
            "description": "The target id of the creative associated with the Ad",
            "type": "integer"
          },
          "bidAmountInRobux": {
            "format": "int64",
            "description": "The bid amount of the Ad in Robux",
            "type": "integer"
          },
          "budgetInRobux": {
            "format": "int64",
            "description": "The budget of the ad set in Robux",
            "type": "integer"
          },
          "adSetStatus": {
            "format": "int32",
            "description": "The status of the ad set ['Undefined' = 0, 'Draft' = 1, 'Scheduled' = 2, 'Running' = 3, 'Paused' = 4, 'Stopped' = 5, 'Completed' = 6]",
            "enum": [0, 1, 2, 3, 4, 5, 6],
            "type": "integer"
          },
          "startDate": {
            "format": "date-time",
            "description": "The start date of the ad set",
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "description": "The end date of the ad set",
            "type": "string"
          },
          "targetGender": {
            "format": "int32",
            "description": "The target gender of the ad set ['Undefined' = 1, 'Male' = 2, 'Female' = 4]",
            "enum": [1, 2, 4],
            "type": "integer"
          },
          "targetAgeBracket": {
            "format": "int32",
            "description": "The target age bracket of the ad set ['Undefined' = 1, 'AgeUnder13' = 2, 'Age13OrOver' = 4, 'Age13To16' = 8, 'Age17OrOver' = 16]",
            "enum": [1, 2, 4, 8, 16],
            "type": "integer"
          },
          "targetDeviceType": {
            "format": "int32",
            "description": "The target device type of the ad set ['Undefined' = 1, 'Computer' = 2, 'Phone' = 4, 'Tablet' = 8, 'Console' = 16, 'VR' = 32]",
            "enum": [1, 2, 4, 8, 16, 32],
            "type": "integer"
          },
          "campaignTargetType": {
            "format": "int32",
            "description": "The target type of the campaign ['Undefined' = 0, 'Universe' = 1, 'Asset' = 2, 'ImmersiveAd' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "campaignTargetId": {
            "format": "int64",
            "description": "The target id of the campaign",
            "type": "integer"
          },
          "totalSpendInRobux": {
            "format": "int64",
            "description": "The total spend of the ad set in Robux",
            "type": "integer"
          },
          "totalImpressions": {
            "format": "int64",
            "description": "The total number of impressions generated by the ad",
            "type": "integer"
          },
          "totalClicks": {
            "format": "int64",
            "description": "The total number of clicks generated by the ad",
            "type": "integer"
          },
          "totalConversions": {
            "format": "int64",
            "description": "The total number of conversions generated by the ad",
            "type": "integer"
          },
          "impressionConversions": {
            "format": "int64",
            "description": "The number of conversions by ad impression generated by the ad",
            "type": "integer"
          },
          "clickConversions": {
            "format": "int64",
            "description": "The number of conversions by ad click generated by the ad",
            "type": "integer"
          }
        }
      },
      "Roblox.AdConfiguration.Api.SponsoredGameV2Model": {
        "description": "A response model represents an Ad with complete information, including infos from its associated campaign and ad set",
        "type": "object",
        "properties": {
          "adId": {
            "format": "int64",
            "description": "The id of the ad",
            "type": "integer"
          },
          "adSetId": {
            "format": "int64",
            "description": "The id of the ad set",
            "type": "integer"
          },
          "adName": {
            "description": "The name of the Ad",
            "type": "string"
          },
          "adStatus": {
            "format": "int32",
            "description": "The status of the ad ['Undefined' = 0, 'Draft' = 1, 'PendingApproval' = 2, 'Approved' = 3, 'Moderated' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "creativeType": {
            "format": "int32",
            "description": "The type of the creative associated with the Ad ['Undefined' = 0, 'Image' = 1, 'Video' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "creativeTargetId": {
            "format": "int64",
            "description": "The target id of the creative associated with the Ad",
            "type": "integer"
          },
          "creativeUrl": {
            "description": "The Url of the creative",
            "type": "string"
          },
          "bidAmountInRobux": {
            "format": "int64",
            "description": "The bid amount of the Ad in Robux",
            "type": "integer"
          },
          "budgetInRobux": {
            "format": "int64",
            "description": "The budget of the ad set in Robux",
            "type": "integer"
          },
          "adSetStatus": {
            "format": "int32",
            "description": "The status of the ad set ['Undefined' = 0, 'Draft' = 1, 'Scheduled' = 2, 'Running' = 3, 'Paused' = 4, 'Stopped' = 5, 'Completed' = 6]",
            "enum": [0, 1, 2, 3, 4, 5, 6],
            "type": "integer"
          },
          "startDate": {
            "format": "date-time",
            "description": "The start date of the ad set",
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "description": "The end date of the ad set",
            "type": "string"
          },
          "targetGender": {
            "format": "int32",
            "description": "The target gender of the ad set ['Undefined' = 1, 'Male' = 2, 'Female' = 4]",
            "enum": [1, 2, 4],
            "type": "integer"
          },
          "targetAgeBracket": {
            "format": "int32",
            "description": "The target age bracket of the ad set ['Undefined' = 1, 'AgeUnder13' = 2, 'Age13OrOver' = 4, 'Age13To16' = 8, 'Age17OrOver' = 16]",
            "enum": [1, 2, 4, 8, 16],
            "type": "integer"
          },
          "targetDeviceType": {
            "format": "int32",
            "description": "The target device type of the ad set ['Undefined' = 1, 'Computer' = 2, 'Phone' = 4, 'Tablet' = 8, 'Console' = 16, 'VR' = 32]",
            "enum": [1, 2, 4, 8, 16, 32],
            "type": "integer"
          },
          "campaignTargetType": {
            "format": "int32",
            "description": "The target type of the campaign ['Undefined' = 0, 'Universe' = 1, 'Asset' = 2, 'ImmersiveAd' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "campaignTargetId": {
            "format": "int64",
            "description": "The target id of the campaign",
            "type": "integer"
          },
          "totalSpendInRobux": {
            "format": "int64",
            "description": "The total spend of the ad set in Robux",
            "type": "integer"
          },
          "totalImpressions": {
            "format": "int64",
            "description": "The total number of impressions generated by the ad",
            "type": "integer"
          },
          "totalClicks": {
            "format": "int64",
            "description": "The total number of clicks generated by the ad",
            "type": "integer"
          },
          "totalConversions": {
            "format": "int64",
            "description": "The total number of conversions generated by the ad",
            "type": "integer"
          },
          "impressionConversions": {
            "format": "int64",
            "description": "The number of conversions by ad impression generated by the ad",
            "type": "integer"
          },
          "clickConversions": {
            "format": "int64",
            "description": "The number of conversions by ad click generated by the ad",
            "type": "integer"
          }
        }
      },
      "Roblox.AssetDelivery.Api.AssetMetadata": {
        "description": "An asset piece of metadata.",
        "type": "object",
        "properties": {
          "metadataType": {
            "format": "int32",
            "description": "Asset metadata type. ['UncompressedSize' = 1]",
            "enum": [1],
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.Assets.AssetContentRepresentationSpecifier": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "majorVersion": {
            "type": "string"
          },
          "fidelity": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.Assets.AssetFormatLocation": {
        "type": "object",
        "properties": {
          "assetFormat": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "assetMetadatas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.AssetDelivery.Api.AssetMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.Assets.AssetResponseItemV2": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Assets.AssetFormatLocation"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Assets.IAssetItemError"
            }
          },
          "requestId": {
            "type": "string"
          },
          "isArchived": {
            "description": "Whether the asset has been archived.",
            "type": "boolean"
          },
          "assetTypeId": {
            "format": "int32",
            "description": "Asset Type.",
            "type": "integer"
          },
          "contentRepresentationSpecifier": {
            "$ref": "#/components/schemas/Roblox.Web.Assets.AssetContentRepresentationSpecifier"
          },
          "isRecordable": {
            "description": "Whether the asset is recordable in screen recordings.",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.Assets.BatchAssetRequestItem": {
        "type": "object",
        "properties": {
          "assetName": {
            "type": "string"
          },
          "assetType": {
            "type": "string"
          },
          "clientInsert": {
            "type": "boolean"
          },
          "placeId": {
            "format": "int64",
            "type": "integer"
          },
          "requestId": {
            "type": "string"
          },
          "scriptInsert": {
            "type": "boolean"
          },
          "serverPlaceId": {
            "format": "int64",
            "type": "integer"
          },
          "universeId": {
            "format": "int64",
            "type": "integer"
          },
          "accept": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "userAssetId": {
            "format": "int64",
            "type": "integer"
          },
          "assetId": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          },
          "assetVersionId": {
            "format": "int64",
            "type": "integer"
          },
          "modulePlaceId": {
            "format": "int64",
            "type": "integer"
          },
          "assetFormat": {
            "type": "string"
          },
          "roblox-assetFormat": {
            "type": "string"
          },
          "contentRepresentationPriorityList": {
            "type": "string"
          },
          "doNotFallbackToBaselineRepresentation": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.Assets.IAssetItemError": {
        "type": "object",
        "properties": {
          "Code": {
            "format": "int32",
            "type": "integer"
          },
          "Message": {
            "type": "string"
          },
          "CustomErrorCode": {
            "format": "int32",
            "description": "Custom error code for Roblox.Web.Assets.IAssetItemError ['UnknownError' = 0, 'NoPermissionToAsset' = 1, 'AssetPermissionCheckFailed' = 2, 'NotAuthorizedForAgeRecommendation' = 3, 'AgeRecommendationCheckFailed' = 4, 'InvalidPlaceRequestFromGameServer' = 5, 'BlockedAssetTypeRequestedFromInsertService' = 6, 'BlockedAssetTypeRequestedFromGameServer' = 7, 'AssetTypeMismatch' = 8, 'MissingAssetTypeInRequestHeader' = 9, 'AssetNotTrustedForPlace' = 10, 'NoAuthentication' = 11, 'AssetContentRepresentationBlockedDueToModeration' = 12, 'AssetNotFound' = 13, 'AssetVersionNotFound' = 14, 'AssetContentRepresentationNotFound' = 15, 'BlockedByAgeGeoRestriction' = 16, 'BlockedAssetTypeRequestedFromNonGameServer' = 17]",
            "enum": [
              0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
            ],
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.Assets.AssetResponseItemV1": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Assets.IAssetItemError"
            }
          },
          "requestId": {
            "type": "string"
          },
          "isArchived": {
            "description": "Whether the asset has been archived.",
            "type": "boolean"
          },
          "assetTypeId": {
            "format": "int32",
            "description": "Asset Type.",
            "type": "integer"
          },
          "contentRepresentationSpecifier": {
            "$ref": "#/components/schemas/Roblox.Web.Assets.AssetContentRepresentationSpecifier"
          },
          "assetMetadatas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.AssetDelivery.Api.AssetMetadata"
            }
          },
          "isRecordable": {
            "description": "Whether the asset is recordable in screen recordings.",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Authentication.Api.Models.AccountLinkParameters": {
        "type": "object",
        "properties": {
          "LinkingPlatform": {
            "format": "int32",
            "description": " ['Invalid' = 0, 'Xbox' = 1, 'Qq' = 2, 'WeChat' = 3, 'Facebook' = 4, 'RobloxDeveloper' = 5, 'RobloxGroupCreator' = 6, 'Playstation' = 7, 'ExternalProvider' = 8, 'Example' = 999]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 999],
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.LogoutV3Request": {
        "type": "object",
        "properties": {
          "logoutReason": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel": {
        "type": "object",
        "properties": {
          "clientPublicKey": {
            "type": "string"
          },
          "clientEpochTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "saiSignature": {
            "type": "string"
          },
          "serverNonce": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.TwoStepVerificationV3LoginResponse": {
        "type": "object",
        "properties": {
          "identityVerificationLoginTicket": {
            "type": "string"
          },
          "accountBlob": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.TwoStepVerificationLoginRequest": {
        "type": "object",
        "properties": {
          "challengeId": {
            "type": "string"
          },
          "verificationToken": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "secureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
          },
          "accountBlob": {
            "type": "string"
          },
          "accountLinkParameters": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountLinkParameters"
          }
        }
      },
      "Roblox.Authentication.Api.Models.AuthMetaDataResponse": {
        "type": "object",
        "properties": {
          "cookieLawNoticeTimeout": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.ForgotPasswordUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Users.LegacyUserResponse"
          },
          "ticket": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.LoginRequest": {
        "type": "object",
        "properties": {
          "ctype": {
            "format": "int32",
            "description": " ['Email' = 0, 'Username' = 1, 'PhoneNumber' = 2, 'EmailOtpSessionToken' = 3, 'AuthToken' = 4, 'Passkey' = 5, 'AsUser' = 6, 'TwoStepVerification' = 7, 'XboxLive' = 8, 'PlatformLive' = 9]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            "type": "integer"
          },
          "cvalue": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "securityQuestionSessionId": {
            "type": "string"
          },
          "securityQuestionRedemptionToken": {
            "type": "string"
          },
          "secureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
          },
          "accountBlob": {
            "type": "string"
          },
          "accountLinkParameters": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountLinkParameters"
          },
          "captchaId": {
            "type": "string"
          },
          "captchaToken": {
            "type": "string"
          },
          "captchaProvider": {
            "type": "string"
          },
          "challengeId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse"
          },
          "twoStepVerificationData": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.TwoStepVerificationSentResponse"
          },
          "identityVerificationLoginTicket": {
            "type": "string"
          },
          "isBanned": {
            "type": "boolean"
          },
          "accountBlob": {
            "type": "string"
          },
          "shouldUpdateEmail": {
            "type": "boolean"
          },
          "recoveryEmail": {
            "type": "string"
          },
          "passkeyRegistrationSucceeded": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Authentication.Api.Models.MetadataResponse": {
        "type": "object",
        "properties": {
          "isUpdateUsernameEnabled": {
            "type": "boolean"
          },
          "ftuxAvatarAssetMap": {
            "type": "string"
          },
          "IsEmailUpsellAtLogoutEnabled": {
            "type": "boolean"
          },
          "ShouldFetchEmailUpsellIXPValuesAtLogout": {
            "type": "boolean"
          },
          "IsAccountRecoveryPromptEnabled": {
            "type": "boolean"
          },
          "IsContactMethodRequiredAtSignup": {
            "type": "boolean"
          },
          "IsUserAgreementsSignupIntegrationEnabled": {
            "type": "boolean"
          },
          "IsKoreaIdVerificationEnabled": {
            "type": "boolean"
          },
          "IsPasswordRequiredForUsernameChange": {
            "type": "boolean"
          },
          "IsPasskeyFeatureEnabled": {
            "type": "boolean"
          },
          "IsAltBrowserTracker": {
            "type": "boolean"
          },
          "IsLoginRedirectPageEnabled": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordChangeModel": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "secureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordResetMetadataResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Users.LegacyUserResponse"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordResetModel": {
        "type": "object",
        "properties": {
          "targetType": {
            "format": "int32",
            "description": " ['Email' = 0, 'PhoneNumber' = 1, 'RecoverySessionID' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "ticket": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "password": {
            "type": "string"
          },
          "passwordRepeated": {
            "type": "string"
          },
          "twoStepVerificationChallengeId": {
            "type": "string"
          },
          "twoStepVerificationToken": {
            "type": "string"
          },
          "accountBlob": {
            "type": "string"
          },
          "secureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
          },
          "newEmail": {
            "type": "string"
          },
          "passkeySessionId": {
            "type": "string"
          },
          "passkeyRegistrationResponse": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordResetVerificationRequest": {
        "type": "object",
        "properties": {
          "targetType": {
            "format": "int32",
            "description": " ['Email' = 0, 'PhoneNumber' = 1, 'RecoverySessionID' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordResetVerificationResponse": {
        "type": "object",
        "properties": {
          "userTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.ForgotPasswordUserResponse"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordStatusResponse": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordValidationModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.PasswordValidationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "description": " ['ValidPassword' = 0, 'WeakPasswordError' = 1, 'ShortPasswordError' = 2, 'PasswordSameAsUsernameError' = 3, 'ForbiddenPasswordError' = 4, 'DumbStringsError' = 5]",
            "enum": [0, 1, 2, 3, 4, 5],
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RecoverUsernameRequest": {
        "type": "object",
        "properties": {
          "targetType": {
            "format": "int32",
            "description": " ['Email' = 0, 'PhoneNumber' = 1, 'RecoverySessionID' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RecoverUsernameResponse": {
        "type": "object",
        "properties": {
          "transmissionType": {
            "format": "int32",
            "enum": [0, 1],
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RecoveryMetadataResponse": {
        "type": "object",
        "properties": {
          "isOnPhone": {
            "type": "boolean"
          },
          "codeLength": {
            "format": "int32",
            "type": "integer"
          },
          "isPhoneFeatureEnabledForUsername": {
            "type": "boolean"
          },
          "isPhoneFeatureEnabledForPassword": {
            "type": "boolean"
          },
          "isBedev2CaptchaEnabledForPasswordReset": {
            "type": "boolean"
          },
          "isUsernameRecoveryDeprecated": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Authentication.Api.Models.ReferralDataModel": {
        "type": "object",
        "properties": {
          "acquisitionTime": {
            "format": "date-time",
            "type": "string"
          },
          "acquisitionReferrer": {
            "type": "string"
          },
          "medium": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "campaign": {
            "type": "string"
          },
          "adGroup": {
            "type": "string"
          },
          "keyword": {
            "type": "string"
          },
          "matchType": {
            "type": "string"
          },
          "sendInfo": {
            "type": "boolean"
          },
          "requestSessionId": {
            "type": "string"
          },
          "offerId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.IdentityVerificationLoginRequest": {
        "type": "object",
        "properties": {
          "loginTicket": {
            "type": "string"
          },
          "resultToken": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.LogoutFromAllSessionsAndReauthenticateRequest": {
        "type": "object",
        "properties": {
          "SecureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.OtpSessionModel": {
        "type": "object",
        "properties": {
          "otpSessionToken": {
            "type": "string"
          },
          "otpContactType": {
            "format": "int32",
            "description": " ['Unset' = 1, 'Email' = 2]",
            "enum": [1, 2],
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RevertAccountInfoResponse": {
        "type": "object",
        "properties": {
          "isTwoStepVerificationEnabled": {
            "type": "boolean"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "isEmailChanged": {
            "type": "boolean"
          },
          "isPhoneVerified": {
            "type": "boolean"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "ticket": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RevertAccountSubmitRequest": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int64",
            "type": "integer"
          },
          "NewPassword": {
            "type": "string"
          },
          "NewPasswordRepeated": {
            "type": "string"
          },
          "Ticket": {
            "type": "string"
          },
          "TwoStepVerificationChallengeId": {
            "type": "string"
          },
          "TwoStepVerificationToken": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.SendResetPasswordRequest": {
        "type": "object",
        "properties": {
          "targetType": {
            "format": "int32",
            "description": " ['Email' = 0, 'PhoneNumber' = 1, 'RecoverySessionID' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "target": {
            "type": "string"
          },
          "captchaId": {
            "type": "string"
          },
          "captchaToken": {
            "type": "string"
          },
          "captchaProvider": {
            "type": "string"
          },
          "challengeId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.SendResetPasswordResponse": {
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string"
          },
          "transmissionType": {
            "format": "int32",
            "description": " ['Sms' = 0, 'Email' = 1]",
            "enum": [0, 1],
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.SignupRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "gender": {
            "format": "int32",
            "description": " ['Unknown' = 1, 'Male' = 2, 'Female' = 3]",
            "enum": [1, 2, 3],
            "type": "integer"
          },
          "birthday": {
            "format": "date-time",
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isTosAgreementBoxChecked": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "assetIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "bodyColorId": {
            "format": "int32",
            "type": "integer"
          },
          "bodyTypeScale": {
            "format": "double",
            "type": "number"
          },
          "headScale": {
            "format": "double",
            "type": "number"
          },
          "heightScale": {
            "format": "double",
            "type": "number"
          },
          "widthScale": {
            "format": "double",
            "type": "number"
          },
          "proportionScale": {
            "format": "double",
            "type": "number"
          },
          "referralData": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.ReferralDataModel"
          },
          "agreementIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identityVerificationResultToken": {
            "type": "string"
          },
          "secureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
          },
          "otpSession": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Request.OtpSessionModel"
          },
          "dataToken": {
            "type": "string"
          },
          "accountBlob": {
            "type": "string"
          },
          "passkeySessionId": {
            "type": "string"
          },
          "passkeyRegistrationResponse": {
            "type": "string"
          },
          "accountLinkParameters": {
            "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.AccountLinkParameters"
          },
          "captchaId": {
            "type": "string"
          },
          "captchaToken": {
            "type": "string"
          },
          "captchaProvider": {
            "type": "string"
          },
          "challengeId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.SignupResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "starterPlaceId": {
            "format": "int64",
            "type": "integer"
          },
          "returnUrl": {
            "type": "string"
          },
          "accountBlob": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.TwoStepVerificationSentResponse": {
        "type": "object",
        "properties": {
          "mediaType": {
            "format": "int32",
            "description": " ['Email' = 0, 'SMS' = 1, 'Authenticator' = 2, 'RecoveryCode' = 3, 'SecurityKey' = 4, 'CrossDevice' = 5, 'Password' = 6, 'Passkey' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          },
          "ticket": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.UsernameChangeRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.UsernameValidationRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "birthday": {
            "format": "date-time",
            "type": "string"
          },
          "context": {
            "format": "int32",
            "enum": [0, 1, 2],
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.UsernameValidationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "description": " ['ValidUsername' = 0, 'AlreadyInUseError' = 1, 'ModerationError' = 2, 'InvalidLengthError' = 3, 'StartsOrEndsWithUnderscoreError' = 4, 'TooManyUnderscoresError' = 5, 'ContainsSpacesError' = 6, 'InvalidCharactersError' = 7, 'ContainsPiiError' = 10, 'ContainsReservedUsernameError' = 12]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 10, 12],
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.UsernamesResponse": {
        "type": "object",
        "properties": {
          "usernames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.Web.Responses.Users.LegacyUserResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.Responses.Users.SkinnyUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.AccountPinRequest": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string"
          },
          "reauthenticationToken": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.AccountPinResponse": {
        "type": "object",
        "properties": {
          "unlockedUntil": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Roblox.Authentication.Api.Models.AccountPinStatusResponse": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean"
          },
          "unlockedUntil": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Roblox.Authentication.Api.Models.EmailValidationResponse": {
        "type": "object",
        "properties": {
          "isEmailValid": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Authentication.Api.Models.LoginMethodModel": {
        "type": "object",
        "properties": {
          "method": {
            "format": "int32",
            "description": " ['EmailOtp' = 0, 'Passkey' = 1, 'Password' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "priority": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.ProviderInfoModel": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RecommendedUsernameFromDisplayNameRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "birthday": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RecommendedUsernameRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "birthday": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.RecommendedUsernameResponse": {
        "type": "object",
        "properties": {
          "didGenerateNewUsername": {
            "type": "boolean"
          },
          "suggestedUsernames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.DeletePasskeysRequest": {
        "type": "object",
        "properties": {
          "credentialNicknames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.ExternalAccessRequest": {
        "type": "object",
        "properties": {
          "authenticationProof": {
            "type": "string"
          },
          "identityProviderPlatformType": {
            "format": "int32",
            "description": " ['Undefined' = 0, 'Xbox' = 1, 'Playstation' = 2, 'Web' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "additionalInfoPayload": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.ExternalLoginAndLinkRequest": {
        "type": "object",
        "properties": {
          "ctype": {
            "format": "int32",
            "description": " ['Email' = 0, 'Username' = 1, 'PhoneNumber' = 2, 'EmailOtpSessionToken' = 3, 'AuthToken' = 4, 'Passkey' = 5, 'AsUser' = 6, 'TwoStepVerification' = 7, 'XboxLive' = 8, 'PlatformLive' = 9]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            "type": "integer"
          },
          "cvalue": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "authenticationProof": {
            "type": "string"
          },
          "IdentityProviderPlatformType": {
            "format": "int32",
            "description": " ['Undefined' = 0, 'Xbox' = 1, 'Playstation' = 2, 'Web' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "additionalInfoPayload": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.ExternalLoginRequest": {
        "type": "object",
        "properties": {
          "identityProvider": {
            "format": "int32",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 999],
            "type": "integer"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {}
          },
          "authenticationProof": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.ExternalSignupRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "birthday": {
            "format": "date-time",
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "authenticationProof": {
            "type": "string"
          },
          "IdentityProviderPlatformType": {
            "format": "int32",
            "description": " ['Undefined' = 0, 'Xbox' = 1, 'Playstation' = 2, 'Web' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "additionalInfoPayload": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.ExternalUnlinkRequest": {
        "type": "object",
        "properties": {
          "IdentityProviderPlatformType": {
            "format": "int32",
            "description": " ['Undefined' = 0, 'Xbox' = 1, 'Playstation' = 2, 'Web' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "additionalInfoPayload": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.FinishPasskeyPreauthRegistrationRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "registrationResponse": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.FinishPasskeyRegistrationRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "credentialNickname": {
            "type": "string"
          },
          "attestationResponse": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.InitializeLoginRequest": {
        "required": ["ctype", "cvalue"],
        "type": "object",
        "properties": {
          "ctype": {
            "format": "int32",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            "type": "integer"
          },
          "cvalue": {
            "minLength": 1,
            "type": "string"
          },
          "captchaId": {
            "type": "string"
          },
          "captchaToken": {
            "type": "string"
          },
          "captchaProvider": {
            "type": "string"
          },
          "challengeId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.ListPasskeysRequest": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.StartAuthenticationByUserRequest": {
        "required": ["ctype", "cvalue"],
        "type": "object",
        "properties": {
          "ctype": {
            "format": "int32",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            "type": "integer"
          },
          "cvalue": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Request.StartPasskeyPreauthRegistrationRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.ExternalIdentityGateway.ExternalIdentityAccessResponse": {
        "type": "object",
        "properties": {
          "placeId": {
            "format": "int64",
            "type": "integer"
          },
          "isolationContext": {
            "type": "string"
          },
          "launchData": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.ExternalIdentityGateway.ExternalLoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.GetClientAssertionResponse": {
        "type": "object",
        "properties": {
          "clientAssertion": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.InitializeLoginResponse": {
        "type": "object",
        "properties": {
          "loginMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.LoginMethodModel"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.ListPasskeyCredentialResponse": {
        "type": "object",
        "properties": {
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.Response.PasskeyCredential"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.PasskeyCredential": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.StartAuthenticationByUserResponse": {
        "type": "object",
        "properties": {
          "authenticationOptions": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.StartAuthenticationResponse": {
        "type": "object",
        "properties": {
          "authenticationOptions": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.StartPasskeyPreauthRegistrationResponse": {
        "type": "object",
        "properties": {
          "creationOptions": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.Response.StartPasskeyRegistrationResponse": {
        "type": "object",
        "properties": {
          "creationOptions": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.SocialAuthenticationDisconnectRequest": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.SocialProvidersResponse": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.ProviderInfoModel"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.XboxCollectionsOfUserResponse": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.XboxUserModel"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.XboxConnectionModel": {
        "type": "object",
        "properties": {
          "hasConnectedXboxAccount": {
            "type": "boolean"
          },
          "gamertag": {
            "type": "string"
          }
        }
      },
      "Roblox.Authentication.Api.Models.XboxLoginConsecutiveDaysResponse": {
        "type": "object",
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.Authentication.Api.Models.XboxTranslateRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.Authentication.Api.Models.XboxUserModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          },
          "Username": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetIdListModel": {
        "description": "A model that contains a list of asset ids",
        "type": "object",
        "properties": {
          "assetIds": {
            "description": "The asset ids",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetMetaModelV1": {
        "description": "Exhaustive model denoting all possible metadata fields of an asset",
        "type": "object",
        "properties": {
          "order": {
            "format": "int32",
            "description": "Layered-clothing order",
            "type": "integer"
          },
          "puffiness": {
            "format": "float",
            "description": "Layered-clothing puffiness",
            "type": "number"
          },
          "position": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetPosition"
          },
          "rotation": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetRotation"
          },
          "scale": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetScale"
          },
          "version": {
            "format": "int32",
            "description": "Client-authoritative meta model format version\r\n- default is always 1",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetModelV2": {
        "description": "A model containing details about an asset\r\n- V2: adds CurrentVersionId, AssetMetaModel",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The id",
            "type": "integer"
          },
          "name": {
            "description": "The name",
            "type": "string"
          },
          "assetType": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetTypeModel"
          },
          "currentVersionId": {
            "format": "int64",
            "description": "Id of the current version of asset",
            "type": "integer"
          },
          "meta": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetMetaModelV1"
          },
          "assetStatus": {
            "format": "int32",
            "description": "Asset availability status.",
            "enum": [0, 1, 2, 3, 4, 5, 6],
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetPosition": {
        "description": "A model which contains accessory position coordinates.",
        "type": "object",
        "properties": {
          "X": {
            "format": "float",
            "description": "X coordinate of the position.",
            "type": "number"
          },
          "Y": {
            "format": "float",
            "description": "y coordinate of the position.",
            "type": "number"
          },
          "Z": {
            "format": "float",
            "description": "Z coordinate of the position.",
            "type": "number"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetRotation": {
        "description": "A model which contains accessory rotation coordinates.",
        "type": "object",
        "properties": {
          "X": {
            "format": "float",
            "description": "X degrees of the rotation.",
            "type": "number"
          },
          "Y": {
            "format": "float",
            "description": "Y degrees of the rotation.",
            "type": "number"
          },
          "Z": {
            "format": "float",
            "description": "Z degrees of the rotation.",
            "type": "number"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetScale": {
        "description": "A model which contains accessory scale.",
        "type": "object",
        "properties": {
          "X": {
            "format": "float",
            "description": "X scale multiplier of accessory.",
            "type": "number"
          },
          "Y": {
            "format": "float",
            "description": "Y scale multiplier of accessory.",
            "type": "number"
          },
          "Z": {
            "format": "float",
            "description": "Z scale multiplier of accessory.",
            "type": "number"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetTypeModel": {
        "description": "A model containing details about an asset type",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The id",
            "type": "integer"
          },
          "name": {
            "description": "The name",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetTypeRulesModel": {
        "description": "A model containing details about an asset type and its business rules",
        "type": "object",
        "properties": {
          "maxNumber": {
            "format": "int32",
            "description": "The max number of this asset type that can be worn",
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "description": "The id",
            "type": "integer"
          },
          "name": {
            "description": "The name",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AvatarApiSuccessResponse": {
        "description": "Success response class",
        "type": "object",
        "properties": {
          "success": {
            "description": "Gets or sets a value indicating whether the request was a success.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AvatarMetadataModel": {
        "description": "A model containing website metadata for avatars",
        "type": "object",
        "properties": {
          "enableDefaultClothingMessage": {
            "description": "Whether or not to show the Default Clothing message",
            "type": "boolean"
          },
          "isAvatarScaleEmbeddedInTab": {
            "description": "Whether or not the Scales is embedded in the tab",
            "type": "boolean"
          },
          "isBodyTypeScaleOutOfTab": {
            "description": "Whether or not the Boby Type scale is embedded in the tab",
            "type": "boolean"
          },
          "scaleHeightIncrement": {
            "format": "double",
            "description": "How much the height scaler should increment by",
            "type": "number"
          },
          "scaleWidthIncrement": {
            "format": "double",
            "description": "How much the width scaler should increment by",
            "type": "number"
          },
          "scaleHeadIncrement": {
            "format": "double",
            "description": "How much the head scaler should increment by",
            "type": "number"
          },
          "scaleProportionIncrement": {
            "format": "double",
            "description": "How much the proportion scaler should increment by",
            "type": "number"
          },
          "scaleBodyTypeIncrement": {
            "format": "double",
            "description": "How much the body type scaler should increment by",
            "type": "number"
          },
          "supportProportionAndBodyType": {
            "description": "Whether or not to support proportion and body type",
            "type": "boolean"
          },
          "showDefaultClothingMessageOnPageLoad": {
            "description": "Whether or not to show the default clothing message when the page loads",
            "type": "boolean"
          },
          "areThreeDeeThumbsEnabled": {
            "description": "Whether or not 3D thumbnails are shown",
            "type": "boolean"
          },
          "isAvatarWearingApiCallsLockingOnFrontendEnabled": {
            "description": "Does the frontend lock avatar editor input until the wearing call returns",
            "type": "boolean"
          },
          "isOutfitHandlingOnFrontendEnabled": {
            "description": "Does the frontend lock avatar editor input until the wearing call returns",
            "type": "boolean"
          },
          "isJustinUiChangesEnabled": {
            "description": "Determines whether a bunch of UI improvements are released",
            "type": "boolean"
          },
          "isCategoryReorgEnabled": {
            "description": "Determines whether Category Reorg is released",
            "type": "boolean"
          },
          "LCEnabledInEditorAndCatalog": {
            "description": "Flag for both web UI and App, name is fixed due to sharing, do not change",
            "type": "boolean"
          },
          "isLCCompletelyEnabled": {
            "description": "Useful for the time between enabling Jackets for most users and\r\nall LC types for everyone, meanwhile Soothsayers need all types\r\nat all times",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AvatarModelV2": {
        "description": "A model containing details about an avatar",
        "type": "object",
        "properties": {
          "scales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "playerAvatarType": {
            "format": "int32",
            "description": "The avatar type",
            "enum": [1, 3],
            "type": "integer"
          },
          "bodyColors": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColorsModel"
          },
          "assets": {
            "description": "The assets worn on the character",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetModelV2"
            }
          },
          "defaultShirtApplied": {
            "description": "Whether default clothing has been applied to this avatar.",
            "type": "boolean"
          },
          "defaultPantsApplied": {
            "description": "Whether default clothing has been applied to this avatar.",
            "type": "boolean"
          },
          "emotes": {
            "description": "The emotes on the character",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.EmoteResponseModel"
            }
          }
        }
      },
      "Roblox.Api.Avatar.Models.AvatarRulesModel": {
        "description": "A model containing details about avatar-related business rules",
        "type": "object",
        "properties": {
          "playerAvatarTypes": {
            "description": "The avatar type",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "https://confluence.roblox.com/display/PLATFORM/Avatar+Project+2016\r\nWhat avatar type does the player prefer to have?",
              "enum": [1, 3],
              "type": "integer"
            }
          },
          "scales": {
            "description": "The scales",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.ScaleRulesModel"
            }
          },
          "wearableAssetTypes": {
            "description": "The assets worn on the character",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetTypeRulesModel"
            }
          },
          "accessoryRefinementTypes": {
            "description": "The list of asset types for Accessory Refinement.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Image' = 1, 'TShirt' = 2, 'Audio' = 3, 'Mesh' = 4, 'Lua' = 5, 'HTML' = 6, 'Text' = 7, 'Hat' = 8, 'Place' = 9, 'Model' = 10, 'Shirt' = 11, 'Pants' = 12, 'Decal' = 13, 'Avatar' = 16, 'Head' = 17, 'Face' = 18, 'Gear' = 19, 'Badge' = 21, 'GroupEmblem' = 22, 'Animation' = 24, 'Arms' = 25, 'Legs' = 26, 'Torso' = 27, 'RightArm' = 28, 'LeftArm' = 29, 'LeftLeg' = 30, 'RightLeg' = 31, 'Package' = 32, 'YouTubeVideo' = 33, 'GamePass' = 34, 'App' = 35, 'Code' = 37, 'Plugin' = 38, 'SolidModel' = 39, 'MeshPart' = 40, 'HairAccessory' = 41, 'FaceAccessory' = 42, 'NeckAccessory' = 43, 'ShoulderAccessory' = 44, 'FrontAccessory' = 45, 'BackAccessory' = 46, 'WaistAccessory' = 47, 'ClimbAnimation' = 48, 'DeathAnimation' = 49, 'FallAnimation' = 50, 'IdleAnimation' = 51, 'JumpAnimation' = 52, 'RunAnimation' = 53, 'SwimAnimation' = 54, 'WalkAnimation' = 55, 'PoseAnimation' = 56, 'LocalizationTableManifest' = 59, 'LocalizationTableTranslation' = 60, 'EmoteAnimation' = 61, 'Video' = 62, 'TexturePack' = 63, 'TShirtAccessory' = 64, 'ShirtAccessory' = 65, 'PantsAccessory' = 66, 'JacketAccessory' = 67, 'SweaterAccessory' = 68, 'ShortsAccessory' = 69, 'LeftShoeAccessory' = 70, 'RightShoeAccessory' = 71, 'DressSkirtAccessory' = 72, 'FontFamily' = 73, 'FontFace' = 74, 'MeshHiddenSurfaceRemoval' = 75, 'EyebrowAccessory' = 76, 'EyelashAccessory' = 77, 'MoodAnimation' = 78, 'DynamicHead' = 79, 'CodeSnippet' = 80, 'AdsVideo' = 81, 'OtaUpdate' = 82, 'Screenshot' = 83, 'RuntimePropertySet' = 84, 'StorePreviewVideo' = 85, 'GamePreviewVideo' = 86]",
              "enum": [
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21,
                22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39,
                40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
              ],
              "type": "integer"
            }
          },
          "accessoryRefinementLowerBounds": {
            "description": "The lower bounds for accessory refinement settings.",
            "type": "object",
            "properties": {
              "Image": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "TShirt": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Audio": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Mesh": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Lua": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "HTML": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Text": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Hat": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Place": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Model": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Shirt": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Pants": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Decal": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Avatar": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Head": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Face": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Gear": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Badge": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "GroupEmblem": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Animation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Arms": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Legs": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Torso": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RightArm": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LeftArm": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LeftLeg": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RightLeg": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Package": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "YouTubeVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "GamePass": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "App": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Code": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Plugin": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "SolidModel": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "MeshPart": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "HairAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FaceAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "NeckAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ShoulderAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FrontAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "BackAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "WaistAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ClimbAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "DeathAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FallAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "IdleAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "JumpAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RunAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "SwimAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "WalkAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "PoseAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LocalizationTableManifest": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LocalizationTableTranslation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "EmoteAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Video": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "TexturePack": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "TShirtAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ShirtAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "PantsAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "JacketAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "SweaterAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ShortsAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LeftShoeAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RightShoeAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "DressSkirtAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FontFamily": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FontFace": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "MeshHiddenSurfaceRemoval": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "EyebrowAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "EyelashAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "MoodAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "DynamicHead": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "CodeSnippet": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "AdsVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "OtaUpdate": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Screenshot": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RuntimePropertySet": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "StorePreviewVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "GamePreviewVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              }
            }
          },
          "accessoryRefinementUpperBounds": {
            "description": "The lower bounds for accessory refinement settings.",
            "type": "object",
            "properties": {
              "Image": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "TShirt": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Audio": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Mesh": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Lua": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "HTML": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Text": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Hat": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Place": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Model": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Shirt": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Pants": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Decal": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Avatar": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Head": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Face": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Gear": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Badge": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "GroupEmblem": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Animation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Arms": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Legs": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Torso": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RightArm": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LeftArm": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LeftLeg": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RightLeg": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Package": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "YouTubeVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "GamePass": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "App": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Code": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Plugin": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "SolidModel": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "MeshPart": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "HairAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FaceAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "NeckAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ShoulderAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FrontAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "BackAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "WaistAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ClimbAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "DeathAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FallAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "IdleAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "JumpAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RunAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "SwimAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "WalkAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "PoseAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LocalizationTableManifest": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LocalizationTableTranslation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "EmoteAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Video": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "TexturePack": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "TShirtAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ShirtAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "PantsAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "JacketAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "SweaterAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "ShortsAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "LeftShoeAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RightShoeAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "DressSkirtAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FontFamily": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "FontFace": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "MeshHiddenSurfaceRemoval": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "EyebrowAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "EyelashAccessory": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "MoodAnimation": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "DynamicHead": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "CodeSnippet": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "AdsVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "OtaUpdate": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "Screenshot": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "RuntimePropertySet": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "StorePreviewVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              },
              "GamePreviewVideo": {
                "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRefinementModel"
              }
            }
          },
          "bodyColorsPalette": {
            "description": "The full set of usable body colors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColorModel"
            }
          },
          "basicBodyColorsPalette": {
            "description": "The basic set of body colors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColorModel"
            }
          },
          "minimumDeltaEBodyColorDifference": {
            "format": "double",
            "description": "The minimum Delta-E difference in body colors\r\nfor default clothing not to be applied",
            "type": "number"
          },
          "proportionsAndBodyTypeEnabledForUser": {
            "description": "Whether proportion and bodyType scales are allowed to be set by the authenticated user",
            "type": "boolean"
          },
          "defaultClothingAssetLists": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.DefaultClothingAssets"
          },
          "bundlesEnabledForUser": {
            "description": "Whether or not bundles are enabled for the specific user",
            "type": "boolean"
          },
          "emotesEnabledForUser": {
            "description": "Whether or not emotes are enabled",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Avatar.Models.BodyColorModel": {
        "description": "A model container BrickColor ids for each body part.",
        "type": "object",
        "properties": {
          "brickColorId": {
            "format": "int32",
            "description": "The BrickColor id",
            "type": "integer"
          },
          "hexColor": {
            "description": "The hex color, e.g. #FFFFFF",
            "type": "string"
          },
          "name": {
            "description": "The name of the BrickColor",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.BodyColorsModel": {
        "description": "A model container BrickColor ids for each body part.",
        "type": "object",
        "properties": {
          "headColorId": {
            "format": "int32",
            "description": "The BrickColor id for head color",
            "type": "integer"
          },
          "torsoColorId": {
            "format": "int32",
            "description": "The BrickColor id for torso color",
            "type": "integer"
          },
          "rightArmColorId": {
            "format": "int32",
            "description": "The BrickColor id for right arm color",
            "type": "integer"
          },
          "leftArmColorId": {
            "format": "int32",
            "description": "The BrickColor id for left arm color",
            "type": "integer"
          },
          "rightLegColorId": {
            "format": "int32",
            "description": "The BrickColor id for right leg color",
            "type": "integer"
          },
          "leftLegColorId": {
            "format": "int32",
            "description": "The BrickColor id for left leg color",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Avatar.Models.DefaultClothingAssets": {
        "description": "A model containing details about avatar-related business rules",
        "type": "object",
        "properties": {
          "defaultShirtAssetIds": {
            "description": "List of asset Ids used to equip shirts for default clothing when the avatar appears nude.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "defaultPantAssetIds": {
            "description": "List of asset Ids used to equip pants for default clothing when the avatar appears nude.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Api.Avatar.Models.EmoteResponseModel": {
        "description": "Response object representing a user's emote",
        "type": "object",
        "properties": {
          "assetId": {
            "format": "int64",
            "description": "The asset id of the emote.",
            "type": "integer"
          },
          "assetName": {
            "description": "The name of the emote.",
            "type": "string"
          },
          "position": {
            "format": "int32",
            "description": "The position the emote is equipped to.",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Avatar.Models.GameStartInfoResponse": {
        "description": "The game start info",
        "type": "object",
        "properties": {
          "gameAvatarType": {
            "description": "Avatar Type",
            "type": "string"
          },
          "allowCustomAnimations": {
            "description": "Custom animation enabled",
            "type": "string"
          },
          "universeAvatarCollisionType": {
            "description": "collision type for the univers",
            "type": "string"
          },
          "universeAvatarBodyType": {
            "description": "Body type for the univers",
            "type": "string"
          },
          "jointPositioningType": {
            "description": "Joing positioning type",
            "type": "string"
          },
          "message": {
            "description": "Mesasge",
            "type": "string"
          },
          "universeAvatarMinScales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "universeAvatarMaxScales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "universeAvatarAssetOverrides": {
            "description": "asset overrides for the univers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.UniverseAvatarAssetOverrideResponseModel"
            }
          },
          "moderationStatus": {
            "description": "Moderation status",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.OutfitDetailsModel": {
        "description": "A model containing details about a user outfit",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The id",
            "type": "integer"
          },
          "universeId": {
            "format": "int64",
            "description": "The universe id of the outfit, null when outfit is not created in-experience",
            "type": "integer"
          },
          "name": {
            "description": "The name",
            "type": "string"
          },
          "assets": {
            "description": "A list of assetIds",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetModelV2"
            }
          },
          "bodyColors": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColorsModel"
          },
          "scale": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "playerAvatarType": {
            "description": "The player avatar type - this can be R6 or R15.",
            "type": "string"
          },
          "outfitType": {
            "description": "The outfit type of the outfit",
            "type": "string"
          },
          "isEditable": {
            "description": "Whether the outfit can be edited by the user",
            "type": "boolean"
          },
          "moderationStatus": {
            "description": "The moderation status of the outfit, not applicable when outfit is created outside experience",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.OutfitModel": {
        "description": "A slim model for user outfits.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The id.",
            "type": "integer"
          },
          "name": {
            "description": "The name.",
            "type": "string"
          },
          "isEditable": {
            "description": "Whether the outfit can be modified by the user.",
            "type": "boolean"
          },
          "outfitType": {
            "description": "The type of the Outfit.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.PlayerAvatarTypeModel": {
        "description": "A model that contains a playerAvatarType",
        "type": "object",
        "properties": {
          "playerAvatarType": {
            "format": "int32",
            "description": "The playerAvatarType",
            "enum": [1, 3],
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Avatar.Models.ScaleRulesModel": {
        "description": "A model that contains information about the max/mins for each scale",
        "type": "object",
        "properties": {
          "min": {
            "format": "double",
            "description": "The min scale",
            "type": "number"
          },
          "max": {
            "format": "double",
            "description": "The max scale",
            "type": "number"
          },
          "increment": {
            "format": "double",
            "description": "The increment of the scale",
            "type": "number"
          }
        }
      },
      "Roblox.Api.Avatar.Models.UniverseAvatarAssetOverrideResponseModel": {
        "type": "object",
        "properties": {
          "assetID": {
            "format": "int64",
            "type": "integer"
          },
          "assetTypeID": {
            "format": "int32",
            "type": "integer"
          },
          "isPlayerChoice": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Avatar.Models.WearResponseModel": {
        "description": "A model for wear outfit responses",
        "type": "object",
        "properties": {
          "invalidAssets": {
            "description": "The assets that could not be worn\r\nUnlike invalidAssetIds, only contains assets that are wearable types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetModelV2"
            }
          },
          "invalidAssetIds": {
            "description": "The asset ids that could not be worn",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "success": {
            "description": "Whether or not all the outfit contents were successfully worn",
            "type": "boolean"
          }
        }
      },
      "Roblox.Avatarcore.Common.Models.AccessoryPositionModel": {
        "type": "object",
        "properties": {
          "xPosition": {
            "format": "float",
            "type": "number"
          },
          "yPosition": {
            "format": "float",
            "type": "number"
          },
          "zPosition": {
            "format": "float",
            "type": "number"
          }
        }
      },
      "Roblox.Avatarcore.Common.Models.AccessoryRefinementModel": {
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryPositionModel"
          },
          "rotation": {
            "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryRotationModel"
          },
          "scale": {
            "$ref": "#/components/schemas/Roblox.Avatarcore.Common.Models.AccessoryScaleModel"
          }
        }
      },
      "Roblox.Avatarcore.Common.Models.AccessoryRotationModel": {
        "type": "object",
        "properties": {
          "xRotation": {
            "format": "float",
            "type": "number"
          },
          "yRotation": {
            "format": "float",
            "type": "number"
          },
          "zRotation": {
            "format": "float",
            "type": "number"
          }
        }
      },
      "Roblox.Avatarcore.Common.Models.AccessoryScaleModel": {
        "type": "object",
        "properties": {
          "xScale": {
            "format": "float",
            "type": "number"
          },
          "yScale": {
            "format": "float",
            "type": "number"
          },
          "zScale": {
            "format": "float",
            "type": "number"
          }
        }
      },
      "Roblox.Web.Responses.Avatar.ScaleModel": {
        "type": "object",
        "properties": {
          "height": {
            "format": "double",
            "type": "number"
          },
          "width": {
            "format": "double",
            "type": "number"
          },
          "head": {
            "format": "double",
            "type": "number"
          },
          "depth": {
            "format": "double",
            "type": "number"
          },
          "proportion": {
            "format": "double",
            "type": "number"
          },
          "bodyType": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AvatarFilteredPageResponse_Roblox.Api.Avatar.Models.OutfitModel_": {
        "description": "Filtered page response",
        "type": "object",
        "properties": {
          "filteredCount": {
            "format": "int32",
            "description": "Number of !:TPagedObject filtered.",
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
            }
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AssetWearModel": {
        "description": "A model which contains\r\n- an asset id\r\n- AssetMetaModel",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "An asset id",
            "type": "integer"
          },
          "meta": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetMetaModelV1"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AvatarModelV3": {
        "description": "A model containing details about an avatar",
        "type": "object",
        "properties": {
          "scales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "playerAvatarType": {
            "format": "int32",
            "description": "The avatar type",
            "enum": [1, 3],
            "type": "integer"
          },
          "bodyColor3s": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColors3Model"
          },
          "assets": {
            "description": "The assets worn on the character",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetModelV2"
            }
          },
          "defaultShirtApplied": {
            "description": "Whether default clothing has been applied to this avatar.",
            "type": "boolean"
          },
          "defaultPantsApplied": {
            "description": "Whether default clothing has been applied to this avatar.",
            "type": "boolean"
          },
          "emotes": {
            "description": "The emotes on the character",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.EmoteResponseModel"
            }
          }
        }
      },
      "Roblox.Api.Avatar.Models.BodyColors3Model": {
        "description": "A model containing RGB hex colors for each body part.",
        "type": "object",
        "properties": {
          "headColor3": {
            "description": "The RGB hex color for head color, e.g. #FFFFFF",
            "type": "string"
          },
          "torsoColor3": {
            "description": "The RGB hex color for torso color, e.g. #FFFFFF",
            "type": "string"
          },
          "rightArmColor3": {
            "description": "The RGB hex color for right arm color, e.g. #FFFFFF",
            "type": "string"
          },
          "leftArmColor3": {
            "description": "The RGB hex color for left arm color, e.g. #FFFFFF",
            "type": "string"
          },
          "rightLegColor3": {
            "description": "The RGB hex color for right leg color, e.g. #FFFFFF",
            "type": "string"
          },
          "leftLegColor3": {
            "description": "The RGB hex color for left leg color, e.g. #FFFFFF",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.OutfitUpdateModelV2": {
        "description": "A model containing details needed to update or create an outfit",
        "type": "object",
        "properties": {
          "name": {
            "description": "The outfit name",
            "type": "string"
          },
          "bodyColors": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColorsModel"
          },
          "assets": {
            "description": "Array of assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetWearModel"
            }
          },
          "scale": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "playerAvatarType": {
            "description": "The avatar scale",
            "type": "string"
          },
          "outfitType": {
            "format": "int32",
            "description": "The type of outfit",
            "enum": [0, 1, 2, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Avatar.Models.WearRequestModel": {
        "description": "A model that contains a list of AssetWear models",
        "type": "object",
        "properties": {
          "assets": {
            "description": "The asset ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetWearModel"
            }
          }
        }
      },
      "Roblox.Platform.Avatar.BodyColorsModelV2": {
        "type": "object",
        "properties": {
          "headColor3": {
            "type": "string"
          },
          "torsoColor3": {
            "type": "string"
          },
          "rightArmColor3": {
            "type": "string"
          },
          "leftArmColor3": {
            "type": "string"
          },
          "rightLegColor3": {
            "type": "string"
          },
          "leftLegColor3": {
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.AvatarPageResponse_Roblox.Api.Avatar.Models.OutfitModel_": {
        "description": "Avatar page response.",
        "type": "object",
        "properties": {
          "data": {
            "description": "The data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitModel"
            }
          },
          "paginationToken": {
            "description": "A non empty string indicates that there is more data available than this response contains. An empty string indicates the last page.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.OutfitDetailsModelV2": {
        "description": "A model containing details about a user outfit",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The id",
            "type": "integer"
          },
          "name": {
            "description": "The name",
            "type": "string"
          },
          "assets": {
            "description": "A list of assetIds",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetModelV2"
            }
          },
          "bodyColor3s": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColors3Model"
          },
          "scale": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "playerAvatarType": {
            "description": "The player avatar type - this can be R6 or R15.",
            "type": "string"
          },
          "outfitType": {
            "description": "The outfit type of the outfit",
            "type": "string"
          },
          "isEditable": {
            "description": "Whether the outfit can be edited by the user",
            "type": "boolean"
          },
          "universeId": {
            "format": "int64",
            "description": "The universe id of the outfit, null when outfit is not created in-experience",
            "type": "integer"
          },
          "moderationStatus": {
            "description": "The moderation status of the outfit, not applicable when outfit is created outside experience",
            "type": "string"
          },
          "bundleId": {
            "format": "int64",
            "description": "The bundle ID, currently only returned for in-experience created outfits.",
            "type": "integer"
          },
          "inventoryType": {
            "description": "The inventory type of the outfit.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Avatar.Models.OutfitUpdateModelV3": {
        "description": "A model containing details needed to update or create an outfit.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The outfit name.",
            "type": "string"
          },
          "bodyColor3s": {
            "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.BodyColors3Model"
          },
          "assets": {
            "description": "Array of assets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.AssetWearModel"
            }
          },
          "scale": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "playerAvatarType": {
            "description": "The avatar scale.",
            "type": "string"
          },
          "outfitType": {
            "format": "int32",
            "description": "The type of outfit.",
            "enum": [0, 1, 2, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Badges.Api.BadgeResponse": {
        "description": "A response containing badge information.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The badge Id.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the badge.",
            "type": "string"
          },
          "description": {
            "description": "The badge description.",
            "type": "string"
          },
          "displayName": {
            "description": "The localized name of the badge.",
            "type": "string"
          },
          "displayDescription": {
            "description": "The localized badge description.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether or not the badge is enabled.",
            "type": "boolean"
          },
          "iconImageId": {
            "format": "int64",
            "description": "The badge icon asset Id.",
            "type": "integer"
          },
          "displayIconImageId": {
            "format": "int64",
            "description": "The localized badge icon asset Id.",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "When the badge was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the badge was updated.",
            "type": "string"
          },
          "statistics": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Badges.BadgeAwardStatisticsResponse"
          },
          "awardingUniverse": {
            "$ref": "#/components/schemas/Roblox.Badges.Api.UniverseResponse"
          }
        }
      },
      "Roblox.Badges.Api.UniverseResponse": {
        "description": "A response containing universe information.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The universe Id.",
            "type": "integer"
          },
          "name": {
            "description": "The universe name.",
            "type": "string"
          },
          "rootPlaceId": {
            "format": "int64",
            "description": "The description of the universe.",
            "type": "integer"
          }
        }
      },
      "Roblox.Web.Responses.Badges.BadgeAwardStatisticsResponse": {
        "type": "object",
        "properties": {
          "pastDayAwardedCount": {
            "format": "int64",
            "type": "integer"
          },
          "awardedCount": {
            "format": "int64",
            "type": "integer"
          },
          "winRatePercentage": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Badges.Api.BadgeResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Badges.Api.BadgeResponse"
            }
          }
        }
      },
      "Roblox.Badges.Api.BadgeAwardResponse": {
        "description": "The result of being awarded a badge.",
        "type": "object",
        "properties": {
          "badgeId": {
            "format": "int64",
            "description": "The badge Id.",
            "type": "integer"
          },
          "awardedDate": {
            "format": "date-time",
            "description": "When the badge was awarded.",
            "type": "string"
          }
        }
      },
      "Roblox.Badges.Api.BadgeCreatorResponse": {
        "description": "Represents information about the badge creator. (Creator of the place that awarded the badge)",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The creator ID",
            "type": "integer"
          },
          "name": {
            "description": "The name of the creator",
            "type": "string"
          },
          "type": {
            "description": "The type of the creator",
            "type": "string"
          }
        }
      },
      "Roblox.Badges.Api.BadgeMetadataResponse": {
        "description": "Metadata about badges.",
        "type": "object",
        "properties": {
          "badgeCreationPrice": {
            "format": "int64",
            "description": "The cost in Robux for creating a new badge.",
            "type": "integer"
          },
          "maxBadgeNameLength": {
            "format": "int32",
            "description": "The max length for a badge name.",
            "type": "integer"
          },
          "maxBadgeDescriptionLength": {
            "format": "int32",
            "description": "The max length for a badge description.",
            "type": "integer"
          }
        }
      },
      "Roblox.Badges.Api.GetBadgesByUserResponse": {
        "description": "Response for the GetBadgesByUser endpoint.",
        "type": "object",
        "properties": {
          "creator": {
            "$ref": "#/components/schemas/Roblox.Badges.Api.BadgeCreatorResponse"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "displayDescription": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "iconImageId": {
            "format": "int64",
            "type": "integer"
          },
          "displayIconImageId": {
            "format": "int64",
            "type": "integer"
          },
          "awarder": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Badges.BadgeAwarderType_"
          },
          "statistics": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Badges.BadgeAwardStatisticsResponse"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.Badges.Api.IconUploadResponse": {
        "description": "Badge icon upload response.",
        "type": "object",
        "properties": {
          "targetId": {
            "format": "int64",
            "description": "The asset id of the uploaded icon.",
            "type": "integer"
          }
        }
      },
      "Roblox.Badges.Api.UpdateBadgeRequest": {
        "description": "A request model used for updating badge information.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The new badge name.",
            "type": "string"
          },
          "description": {
            "description": "The new badge description.",
            "type": "string"
          },
          "enabled": {
            "description": "The new enabled state of the badge.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.Responses.Badges.BadgeResponseV2": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "displayDescription": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "iconImageId": {
            "format": "int64",
            "type": "integer"
          },
          "displayIconImageId": {
            "format": "int64",
            "type": "integer"
          },
          "awarder": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Badges.BadgeAwarderType_"
          },
          "statistics": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Badges.BadgeAwardStatisticsResponse"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Badges.BadgeAwarderType_": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "description": " ['Place' = 1]",
            "enum": [1],
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Badges.Api.BadgeAwardResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Badges.Api.BadgeAwardResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Badges.Api.GetBadgesByUserResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Badges.Api.GetBadgesByUserResponse"
            }
          }
        }
      },
      "Roblox.Catalog.Api.AssetFavoriteModel": {
        "description": "A model to represent asset favorites.",
        "type": "object",
        "properties": {
          "assetId": {
            "format": "int64",
            "description": "The Id of the asset being favorited.",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "description": "The Id of the user favoriting the asset.",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The time at which the user favorited the asset.",
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.BundleCreatorModel": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "hasVerifiedBadge": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Catalog.Api.BundleDetailsModel": {
        "description": "The hydration model representing a bundle on marketplace. Returned in all bundles controller endpoints.\r\nBound in the game-engine MarketplaceService.GetProductInfo method.\r\nhttps://create.roblox.com/docs/reference/engine/classes/MarketplaceService#GetProductInfo.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "bundleType": {
            "type": "string"
          },
          "isRecolorable": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleItemDetailModel"
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleCreatorModel"
          },
          "product": {
            "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleProductModel"
          },
          "itemRestrictions": {
            "type": "array",
            "items": {
              "format": "int32",
              "description": "Catalog item restriction enum. ['ThirteenPlus' = 1, 'LimitedUnique' = 2, 'Limited' = 3, 'BuildersClub' = 4, 'TurboBuildersClub' = 5, 'OutrageousBuildersClub' = 6, 'Rthro' = 7, 'Live' = 8, 'Collectible' = 9]",
              "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9],
              "type": "integer"
            }
          },
          "collectibleItemDetail": {
            "$ref": "#/components/schemas/Roblox.Catalog.Api.CollectibleItemDetail"
          }
        }
      },
      "Roblox.Catalog.Api.BundleFavoriteModel": {
        "description": "A model to represent bundle favorites.",
        "type": "object",
        "properties": {
          "bundleId": {
            "format": "int64",
            "description": "The Id of the bundle being favorited.",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "description": "The Id of the user favoriting the bundle.",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The time at which the user favorited the bundle.",
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.BundleItemDetailModel": {
        "type": "object",
        "properties": {
          "owned": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.BundleItemDetailModelV2": {
        "description": "The is the beta (non game-engine) version of BundleItemDetailModel for internal consumption on Roblox web and universal-app.",
        "type": "object",
        "properties": {
          "assetType": {
            "format": "int32",
            "type": "integer"
          },
          "owned": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.BundleProductModel": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "isPublicDomain": {
            "type": "boolean"
          },
          "isForSale": {
            "type": "boolean"
          },
          "priceInRobux": {
            "format": "int64",
            "type": "integer"
          },
          "isFree": {
            "type": "boolean"
          },
          "noPriceText": {
            "type": "string"
          },
          "premiumPricing": {
            "$ref": "#/components/schemas/Roblox.Catalog.Api.PremiumPricingModel"
          }
        }
      },
      "Roblox.Catalog.Api.CatalogSearchDetailedResponseItem": {
        "description": "Game-engine version of fully hydrated asset or bundle in catalog marketplace.\r\nDocumented here: https://create.roblox.com/docs/reference/engine/classes/AvatarEditorService#SearchCatalog.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The Item Id.",
            "type": "integer"
          },
          "itemType": {
            "format": "int32",
            "description": "The Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.ItemType item type. ['Asset' = 1, 'Bundle' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "assetType": {
            "format": "int32",
            "description": "The Roblox.Platform.Assets.AssetType serialized if item is an asset.",
            "enum": [
              1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22,
              24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40,
              41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
              59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
              75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
            ],
            "type": "integer"
          },
          "bundleType": {
            "format": "int32",
            "description": "The Roblox.Platform.Bundles.Core.BundleType serialized if item is a bundle.",
            "enum": [1, 2, 3, 4],
            "type": "integer"
          },
          "isRecolorable": {
            "description": "Gets or sets the property whether a bundle is recolorable or not. Not serialized for asset.",
            "type": "boolean"
          },
          "name": {
            "description": "The item name.",
            "type": "string"
          },
          "description": {
            "description": "The item description.",
            "type": "string"
          },
          "productId": {
            "format": "int64",
            "description": "The product id of corresponding item.",
            "type": "integer"
          },
          "bundledItems": {
            "description": "The System.Collections.Generic.IEnumerable`1 contained in the bundle, serialized if item is a bundle.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleItemDetailModel"
            }
          },
          "itemStatus": {
            "description": "The System.Collections.Generic.IEnumerable`1 if item has Roblox.Catalog.Api.CatalogItemStatus.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "Catalog item status enum. ['New' = 1, 'Sale' = 2, 'SaleTimer' = 7]",
              "enum": [1, 2, 7],
              "type": "integer"
            }
          },
          "itemRestrictions": {
            "description": "The System.Collections.Generic.IEnumerable`1 if item has Roblox.Catalog.Api.CatalogItemRestriction.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "Catalog item restriction enum. ['ThirteenPlus' = 1, 'LimitedUnique' = 2, 'Limited' = 3, 'BuildersClub' = 4, 'TurboBuildersClub' = 5, 'OutrageousBuildersClub' = 6, 'Rthro' = 7, 'Live' = 8, 'Collectible' = 9]",
              "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9],
              "type": "integer"
            }
          },
          "creatorHasVerifiedBadge": {
            "description": "The verified status of a creator.",
            "type": "boolean"
          },
          "creatorType": {
            "format": "int32",
            "description": "The Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.CreatorType of the item's creator.",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "creatorTargetId": {
            "format": "int64",
            "description": "The creator id of the item's creator.",
            "type": "integer"
          },
          "creatorName": {
            "description": "The creator name of the item's creator.",
            "type": "string"
          },
          "price": {
            "format": "int64",
            "description": "The item's price.",
            "type": "integer"
          },
          "lowestPrice": {
            "format": "int64",
            "description": "The item's lowest price, only if the item is resellable and there are resellers.",
            "type": "integer"
          },
          "lowestResalePrice": {
            "format": "int64",
            "description": "The item's lowest resale price, only if the item is resellable and there are resellers, including current user.",
            "type": "integer"
          },
          "priceStatus": {
            "description": "The localized string item status if the item's price should not be displayed.",
            "type": "string"
          },
          "unitsAvailableForConsumption": {
            "format": "int64",
            "description": "The number of items in stock, only if the item is resellable and is limitedEdition.",
            "type": "integer"
          },
          "favoriteCount": {
            "format": "int64",
            "description": "The number of times the item has been favorited.",
            "type": "integer"
          },
          "offSaleDeadline": {
            "format": "date-time",
            "description": "When the item will go off sale, if the item has an off deadline.",
            "type": "string"
          },
          "collectibleItemId": {
            "description": "The item's collectible item id.\r\nIt is an UUID if a item is collectible type. Otherwise, it is null.",
            "type": "string"
          },
          "totalQuantity": {
            "format": "int64",
            "description": "The collectible or limited-unique item's total quantity of unique instances.",
            "type": "integer"
          },
          "saleLocationType": {
            "format": "int32",
            "description": "The sale location type of the item. ['NotApplicable' = 0, 'ShopOnly' = 1, 'MyExperiencesOnly' = 2, 'ShopAndMyExperiences' = 3, 'ExperiencesById' = 4, 'ShopAndAllExperiences' = 5, 'ExperiencesDevApiOnly' = 6, 'ShopAndExperiencesById' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          },
          "hasResellers": {
            "description": "An indicator if the item has resellers or not (null if not resellable).",
            "type": "boolean"
          },
          "isOffSale": {
            "description": "An indicator if the item is off sale or not.",
            "type": "boolean"
          },
          "quantityLimitPerUser": {
            "format": "int32",
            "description": "Quantity limit for how many instances a user can buy.",
            "type": "integer"
          }
        }
      },
      "Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2": {
        "description": "This is the beta (non game-engine) version of our hydration model representing asset or bundle in marketplace.",
        "type": "object",
        "properties": {
          "bundledItems": {
            "description": "The System.Collections.Generic.IEnumerable`1 contained in the bundle, serialized if item is a bundle.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleItemDetailModelV2"
            }
          },
          "id": {
            "format": "int64",
            "description": "The Item Id.",
            "type": "integer"
          },
          "itemType": {
            "format": "int32",
            "description": "The Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.ItemType item type. ['Asset' = 1, 'Bundle' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "assetType": {
            "format": "int32",
            "description": "The Roblox.Platform.Assets.AssetType serialized if item is an asset.",
            "enum": [
              1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22,
              24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40,
              41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
              59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
              75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
            ],
            "type": "integer"
          },
          "bundleType": {
            "format": "int32",
            "description": "The Roblox.Platform.Bundles.Core.BundleType serialized if item is a bundle.",
            "enum": [1, 2, 3, 4],
            "type": "integer"
          },
          "isRecolorable": {
            "description": "Gets or sets the property whether a bundle is recolorable or not. Not serialized for asset.",
            "type": "boolean"
          },
          "name": {
            "description": "The item name.",
            "type": "string"
          },
          "description": {
            "description": "The item description.",
            "type": "string"
          },
          "productId": {
            "format": "int64",
            "description": "The product id of corresponding item.",
            "type": "integer"
          },
          "itemStatus": {
            "description": "The System.Collections.Generic.IEnumerable`1 if item has Roblox.Catalog.Api.CatalogItemStatus.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "Catalog item status enum. ['New' = 1, 'Sale' = 2, 'SaleTimer' = 7]",
              "enum": [1, 2, 7],
              "type": "integer"
            }
          },
          "itemRestrictions": {
            "description": "The System.Collections.Generic.IEnumerable`1 if item has Roblox.Catalog.Api.CatalogItemRestriction.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "Catalog item restriction enum. ['ThirteenPlus' = 1, 'LimitedUnique' = 2, 'Limited' = 3, 'BuildersClub' = 4, 'TurboBuildersClub' = 5, 'OutrageousBuildersClub' = 6, 'Rthro' = 7, 'Live' = 8, 'Collectible' = 9]",
              "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9],
              "type": "integer"
            }
          },
          "creatorHasVerifiedBadge": {
            "description": "The verified status of a creator.",
            "type": "boolean"
          },
          "creatorType": {
            "format": "int32",
            "description": "The Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.CreatorType of the item's creator.",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "creatorTargetId": {
            "format": "int64",
            "description": "The creator id of the item's creator.",
            "type": "integer"
          },
          "creatorName": {
            "description": "The creator name of the item's creator.",
            "type": "string"
          },
          "price": {
            "format": "int64",
            "description": "The item's price.",
            "type": "integer"
          },
          "lowestPrice": {
            "format": "int64",
            "description": "The item's lowest price, only if the item is resellable and there are resellers.",
            "type": "integer"
          },
          "lowestResalePrice": {
            "format": "int64",
            "description": "The item's lowest resale price, only if the item is resellable and there are resellers, including current user.",
            "type": "integer"
          },
          "priceStatus": {
            "description": "The localized string item status if the item's price should not be displayed.",
            "type": "string"
          },
          "unitsAvailableForConsumption": {
            "format": "int64",
            "description": "The number of items in stock, only if the item is resellable and is limitedEdition.",
            "type": "integer"
          },
          "favoriteCount": {
            "format": "int64",
            "description": "The number of times the item has been favorited.",
            "type": "integer"
          },
          "offSaleDeadline": {
            "format": "date-time",
            "description": "When the item will go off sale, if the item has an off deadline.",
            "type": "string"
          },
          "collectibleItemId": {
            "description": "The item's collectible item id.\r\nIt is an UUID if a item is collectible type. Otherwise, it is null.",
            "type": "string"
          },
          "totalQuantity": {
            "format": "int64",
            "description": "The collectible or limited-unique item's total quantity of unique instances.",
            "type": "integer"
          },
          "saleLocationType": {
            "format": "int32",
            "description": "The sale location type of the item. ['NotApplicable' = 0, 'ShopOnly' = 1, 'MyExperiencesOnly' = 2, 'ShopAndMyExperiences' = 3, 'ExperiencesById' = 4, 'ShopAndAllExperiences' = 5, 'ExperiencesDevApiOnly' = 6, 'ShopAndExperiencesById' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          },
          "hasResellers": {
            "description": "An indicator if the item has resellers or not (null if not resellable).",
            "type": "boolean"
          },
          "isOffSale": {
            "description": "An indicator if the item is off sale or not.",
            "type": "boolean"
          },
          "quantityLimitPerUser": {
            "format": "int32",
            "description": "Quantity limit for how many instances a user can buy.",
            "type": "integer"
          }
        }
      },
      "Roblox.Catalog.Api.CategoryModel": {
        "description": "Response model for category.",
        "type": "object",
        "properties": {
          "category": {
            "format": "int32",
            "description": "Category type. ['Featured' = 0, 'All' = 1, 'Collectibles' = 2, 'Clothing' = 3, 'BodyParts' = 4, 'Gear' = 5, 'Accessories' = 11, 'AvatarAnimations' = 12, 'CommunityCreations' = 13, 'Premium' = 14, 'Recommended' = 15, 'LayeredClothing' = 16, 'Characters' = 17, 'Body' = 18]",
            "enum": [0, 1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18],
            "type": "integer"
          },
          "assetTypeIds": {
            "description": "List of AssetTypeIds corresponding to AssetType enum that this category returns.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "bundleTypeIds": {
            "description": "List of bundleTypeIds corresponding to BundleType enum that this category returns.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "categoryId": {
            "format": "int32",
            "description": "Category id.",
            "type": "integer"
          },
          "name": {
            "description": "Category name.",
            "type": "string"
          },
          "orderIndex": {
            "format": "int32",
            "description": "Category order index.",
            "type": "integer"
          },
          "subcategories": {
            "description": "Subcategories under this category.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.SubcategoryModel"
            }
          },
          "isSearchable": {
            "description": "Gets or sets whether the category is searchable in search bar.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Catalog.Api.CollectibleItemDetail": {
        "type": "object",
        "properties": {
          "collectibleItemId": {
            "type": "string"
          },
          "collectibleProductId": {
            "type": "string"
          },
          "price": {
            "format": "int64",
            "type": "integer"
          },
          "lowestPrice": {
            "format": "int64",
            "type": "integer"
          },
          "lowestResalePrice": {
            "format": "int64",
            "type": "integer"
          },
          "totalQuantity": {
            "format": "int64",
            "type": "integer"
          },
          "unitsAvailable": {
            "format": "int64",
            "type": "integer"
          },
          "saleLocation": {
            "$ref": "#/components/schemas/Roblox.Catalog.Api.SaleLocation"
          },
          "hasResellers": {
            "type": "boolean"
          },
          "saleStatus": {
            "format": "int32",
            "description": " ['Invalid' = 0, 'Draft' = 1, 'OffSale' = 2, 'OnSale' = 3, 'PendingSale' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "quantityLimitPerUser": {
            "format": "int32",
            "type": "integer"
          },
          "offSaleDeadline": {
            "format": "date-time",
            "type": "string"
          },
          "collectibleItemType": {
            "format": "int32",
            "description": "The type of collectible item, limited or non-limited for now. ['Invalid' = 0, 'Limited' = 1, 'NonLimited' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "lowestAvailableResaleProductId": {
            "type": "string"
          },
          "lowestAvailableResaleItemInstanceId": {
            "type": "string"
          },
          "resaleRestriction": {
            "format": "int32",
            "description": " ['Invalid' = 0, 'None' = 1, 'Disabled' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          }
        }
      },
      "Roblox.Catalog.Api.ElasticsearchDebugInfo": {
        "type": "object",
        "properties": {
          "elasticsearchQuery": {
            "description": "Gets or sets the nest query that resulted from the operation.",
            "type": "string"
          },
          "isFromCache": {
            "description": "Gets or sets if the results were returned from cache.",
            "type": "boolean"
          },
          "indexName": {
            "description": "Gets or sets the index name.",
            "type": "string"
          },
          "isTerminatedEarly": {
            "description": "Gets or sets if the query was Terminated Early.",
            "type": "boolean"
          },
          "isForceTerminationEnabledByRequest": {
            "description": "Gets or sets if Force Termination was Enabled in the Request.",
            "type": "boolean"
          },
          "searchResultDataSource": {
            "description": "Gets or sets the search result data source.",
            "type": "string"
          },
          "searchResultRelevanceScore": {
            "description": "Gets or sets the search result relevance score.",
            "type": "string"
          },
          "searchResultEngagementScore": {
            "description": "Gets or sets the search result engagement score.",
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.FavoriteBundlesResponse": {
        "description": "A response containing favorited bundles and whether there are more.",
        "type": "object",
        "properties": {
          "favorites": {
            "description": "Collection of favorited bundles and associated details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleDetailsModel"
            }
          },
          "moreFavorites": {
            "description": "True if there exists a next page of favorited bundles.",
            "type": "boolean"
          },
          "nextCursor": {
            "description": "Pagination cursor for the next page.",
            "type": "string"
          },
          "previousCursor": {
            "description": "Pagination cursor for the previous page.",
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.MultigetItemDetailsRequestItem": {
        "type": "object",
        "properties": {
          "itemType": {
            "format": "int32",
            "description": " ['Asset' = 1, 'Bundle' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.Catalog.Api.MultigetItemDetailsRequestModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.MultigetItemDetailsRequestItem"
            }
          }
        }
      },
      "Roblox.Catalog.Api.OwnedBundleModel": {
        "description": "A model to represent owned bundles.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "bundleType": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleCreatorModel"
          }
        }
      },
      "Roblox.Catalog.Api.PremiumPricingModel": {
        "description": "Defines the Premium pricing for a catalog item.",
        "type": "object",
        "properties": {
          "premiumDiscountPercentage": {
            "format": "int32",
            "description": "The Premium discount percentage for a catalog item.",
            "type": "integer"
          },
          "premiumPriceInRobux": {
            "format": "int64",
            "description": "The Premium price for a catalog item.",
            "type": "integer"
          }
        }
      },
      "Roblox.Catalog.Api.SaleLocation": {
        "description": "SaleLocation information for a collectible item (asset or bundle).",
        "type": "object",
        "properties": {
          "saleLocationType": {
            "format": "int32",
            "description": "Sale location type related for an item detail. ['NotApplicable' = 0, 'ShopOnly' = 1, 'MyExperiencesOnly' = 2, 'ShopAndMyExperiences' = 3, 'ExperiencesById' = 4, 'ShopAndAllExperiences' = 5, 'ExperiencesDevApiOnly' = 6, 'ShopAndExperiencesById' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          },
          "saleLocationTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "universeIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "enabledUniverseIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Catalog.Api.SubcategoryModel": {
        "description": "Response model for subcategory.",
        "type": "object",
        "properties": {
          "subcategory": {
            "format": "int32",
            "description": "Subcategory type. ['Featured' = 0, 'All' = 1, 'Collectibles' = 2, 'Clothing' = 3, 'BodyParts' = 4, 'Gear' = 5, 'Hats' = 9, 'Faces' = 10, 'Shirts' = 12, 'Tshirts' = 13, 'Pants' = 14, 'Heads' = 15, 'Accessories' = 19, 'HairAccessories' = 20, 'FaceAccessories' = 21, 'NeckAccessories' = 22, 'ShoulderAccessories' = 23, 'FrontAccessories' = 24, 'BackAccessories' = 25, 'WaistAccessories' = 26, 'AvatarAnimations' = 27, 'BodyPartsBundles' = 37, 'AnimationBundles' = 38, 'EmoteAnimations' = 39, 'CommunityCreations' = 40, 'Melee' = 41, 'Ranged' = 42, 'Explosive' = 43, 'PowerUp' = 44, 'Navigation' = 45, 'Musical' = 46, 'Social' = 47, 'Building' = 48, 'Transport' = 49, 'Premium' = 50, 'Recommended' = 51, 'LayeredClothing' = 52, 'AllBundles' = 53, 'HeadAccessories' = 54, 'ClassicTShirts' = 55, 'ClassicShirts' = 56, 'ClassicPants' = 57, 'TShirtAccessories' = 58, 'ShirtAccessories' = 59, 'PantsAccessories' = 60, 'JacketAccessories' = 61, 'SweaterAccessories' = 62, 'ShortsAccessories' = 63, 'ShoesBundles' = 64, 'DressSkirtAccessories' = 65, 'DynamicHeads' = 66, 'Body' = 67]",
            "enum": [
              0, 1, 2, 3, 4, 5, 9, 10, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24,
              25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
              50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
              66, 67
            ],
            "type": "integer"
          },
          "assetTypeIds": {
            "description": "List of AssetTypeIds corresponding to AssetType enum that this category returns.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "bundleTypeIds": {
            "description": "List of bundleTypeIds corresponding to BundleType enum that this category returns.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "subcategoryId": {
            "format": "int32",
            "description": "Subcategory id.",
            "type": "integer"
          },
          "name": {
            "description": "Subcategory name.",
            "type": "string"
          },
          "shortName": {
            "description": "Subcategory short name.",
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.TopicModel": {
        "description": "Response model for avatar topics.",
        "type": "object",
        "properties": {
          "displayName": {
            "description": "The display topic name.",
            "type": "string"
          },
          "originalTopicName": {
            "description": "The original topic name stored in the table.",
            "type": "string"
          }
        }
      },
      "Roblox.Catalog.Api.TopicRequestModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Marketplacetopicdiscovery.Topicdiscoveryservice.V1Beta1.AvatarItem"
            }
          },
          "selectTopics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inputQuery": {
            "type": "string"
          },
          "maxResult": {
            "format": "int32",
            "description": "Maximum number of topic results returned from the server.",
            "type": "integer"
          },
          "genderType": {
            "format": "int32",
            "description": " ['Unknown' = 1, 'Male' = 2, 'Female' = 3]",
            "enum": [1, 2, 3],
            "type": "integer"
          }
        }
      },
      "Roblox.Catalog.Api.TopicResponse": {
        "type": "object",
        "properties": {
          "topics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.TopicModel"
            }
          },
          "error": {
            "$ref": "#/components/schemas/Roblox.Marketplacetopicdiscovery.Topicdiscoveryservice.V1Beta1.Error"
          }
        }
      },
      "Roblox.Marketplacetopicdiscovery.Topicdiscoveryservice.V1Beta1.AvatarItem": {
        "type": "object",
        "properties": {
          "TargetId": {
            "format": "int64",
            "type": "integer"
          },
          "ItemType": {
            "format": "int32",
            "description": " ['Invalid' = 0, 'Asset' = 1, 'Bundle' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          }
        }
      },
      "Roblox.Marketplacetopicdiscovery.Topicdiscoveryservice.V1Beta1.Error": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Code": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Catalog.Api.BundleDetailsModel_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleDetailsModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.BundleDetailsModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.BundleDetailsModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItem_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.CatalogSearchDetailedResponseItem"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Catalog.Api.OwnedBundleModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.OwnedBundleModel"
            }
          }
        }
      },
      "Roblox.Catalog.Api.CatalogSearchPageResponse_Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2_": {
        "description": "ApiPageResponse for catalog search.",
        "type": "object",
        "properties": {
          "keyword": {
            "description": "Keyword used for search query.",
            "type": "string"
          },
          "elasticsearchDebugInfo": {
            "$ref": "#/components/schemas/Roblox.Catalog.Api.ElasticsearchDebugInfo"
          },
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Catalog.Api.CatalogSearchDetailedResponseItemV2"
            }
          }
        }
      },
      "Roblox.Contacts.Api.Models.Response.ContactsMetadataResponseModel": {
        "type": "object",
        "properties": {
          "multiGetContactsMaxSize": {
            "format": "int32",
            "type": "integer"
          },
          "multiGetContactsCacheTTLinMS": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.Contacts.Api.Request.GetUserTagsRequestModel": {
        "type": "object",
        "properties": {
          "targetUserIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Contacts.Api.Request.SetUserTagRequestModel": {
        "type": "object",
        "properties": {
          "targetUserId": {
            "format": "int64",
            "description": "The userId of the target of the userTag.",
            "type": "integer"
          },
          "userTag": {
            "description": "The userTag to be set",
            "type": "string"
          }
        }
      },
      "Roblox.Contacts.Api.Response.GetUserTagsResponseModel": {
        "type": "object",
        "properties": {
          "targetUserId": {
            "format": "int64",
            "type": "integer"
          },
          "targetUserTag": {
            "type": "string"
          }
        }
      },
      "Roblox.Contacts.Api.Response.SetUserTagResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Status message to be sent to the setter of the userTag ['Success' = 0, 'Moderated' = 1]",
            "enum": ["Success", "Moderated"],
            "type": "string"
          }
        }
      },
      "Roblox.Contacts.Api.Response.ValidateUserTagResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Status message to be sent to the requester of the userTag validation ['Success' = 0, 'Moderated' = 1, 'TooLong' = 2]",
            "enum": ["Success", "Moderated", "TooLong"],
            "type": "string"
          }
        }
      },
      "Roblox.ClientSettings.Api.Models.Response.ClientVersionResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "clientVersionUpload": {
            "type": "string"
          },
          "bootstrapperVersion": {
            "type": "string"
          },
          "nextClientVersionUpload": {
            "type": "string"
          },
          "nextClientVersion": {
            "type": "string"
          }
        }
      },
      "Roblox.ClientSettings.Api.Models.Response.OtaVersionResponse": {
        "description": "Response for endpoints returning ota information.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Ota library/plugin name",
            "type": "string"
          },
          "version": {
            "description": "Version number of asset",
            "type": "string"
          },
          "downloadUrl": {
            "description": "URL to download the ota asset",
            "type": "string"
          },
          "isStandalone": {
            "description": "Refers to whether the plugin is core to Studio functions, and is used to determine when it is loaded.",
            "type": "boolean"
          }
        }
      },
      "Roblox.ClientSettings.Api.Models.Response.UserChannelResponse": {
        "description": "Response data object for getting a user's channel information.",
        "type": "object",
        "properties": {
          "channelName": {
            "description": "Name of the channel.",
            "type": "string"
          },
          "channelAssignmentType": {
            "format": "int32",
            "description": "How the user was bound to the channel. If the user is not assigned to any channel, this is omitted. ['None' = 0, 'PerMille' = 1, 'BoundToPrivateChannel' = 2, 'BoundToPublicChannel' = 3, 'OptedInToBetaProgramWithPrivateChannel' = 4, 'OptedInToBetaProgramWithPublicChannel' = 5]",
            "enum": [0, 1, 2, 3, 4, 5],
            "type": "integer"
          },
          "token": {
            "description": "JWT token. If the channel is not private, this is omitted.",
            "type": "string"
          }
        }
      },
      "Roblox.ClientSettings.Api.Models.Response.MobileClientVersionResponse": {
        "type": "object",
        "properties": {
          "activeVersion": {
            "type": "string"
          },
          "upgradeSource": {
            "type": "string"
          },
          "MD5Sum": {
            "type": "string"
          },
          "data": {}
        }
      },
      "Roblox.Api.Develop.AssetVersion": {
        "description": "Model of an asset version.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The VersionID of the asset version.",
            "type": "integer"
          },
          "assetId": {
            "format": "int64",
            "description": "The ID of the asset.",
            "type": "integer"
          },
          "assetVersionNumber": {
            "format": "int32",
            "description": "The version number.",
            "type": "integer"
          },
          "creatorType": {
            "description": "Type of the asset version creator.",
            "type": "string"
          },
          "creatorTargetId": {
            "format": "int64",
            "description": "ID of the asset version creator.",
            "type": "integer"
          },
          "creatingUniverseId": {
            "format": "int64",
            "description": "ID of the universe this asset version was created in.",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The created date of this asset version.",
            "type": "string"
          },
          "isEqualToCurrentPublishedVersion": {
            "description": "Indicates if this version is same to current published version.\r\nThis property is available on /v1/{assetId}/published-versions and /v1/{assetId}/version/{versionNumber}.",
            "type": "boolean"
          },
          "isPublished": {
            "description": "Indicates if this version is / was published.\r\nThis property is available on /v1/{assetId}/saved-versions.\r\nThis should be true for all assets coming from GetAssetPublishedVersionsByAssetId",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.IPlaceModel": {
        "description": "A model containing information about a place",
        "type": "object"
      },
      "Roblox.Api.Develop.Models.PlaceConfigurationModelV2": {
        "description": "A model containing information about a place to be configured",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name for the place.",
            "type": "string"
          },
          "description": {
            "description": "The new description for the place.",
            "type": "string"
          },
          "maxPlayerCount": {
            "format": "int32",
            "description": "The max number of players for the place.",
            "type": "integer"
          },
          "socialSlotType": {
            "description": "The social slot type for the place. Determines how users are placed into servers.\r\n Examples: \r\n     Automatic,\r\n     Empty,\r\n     Custom",
            "type": "string"
          },
          "customSocialSlotsCount": {
            "format": "int32",
            "description": "The number of social slots for the place when the slot type is custom.",
            "type": "integer"
          },
          "allowCopying": {
            "description": "Determines if copying of the place is allowed.",
            "type": "boolean"
          },
          "allowedGearTypes": {
            "description": "List of allowed gear types",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isAllGenresAllowed": {
            "description": "If all genres are allowed, or only the experience type",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.PlaceModelV2": {
        "description": "A model containing information about a place",
        "type": "object",
        "properties": {
          "maxPlayerCount": {
            "format": "int32",
            "description": "The max number of players for the place.",
            "type": "integer"
          },
          "socialSlotType": {
            "description": "The social slot type for the place. Determines how users are placed into servers.\r\n Examples: \r\n     Automatic,\r\n     Empty,\r\n     Custom",
            "type": "string"
          },
          "customSocialSlotsCount": {
            "format": "int32",
            "description": "The number of social slots for the place when the slot type is custom.",
            "type": "integer"
          },
          "allowCopying": {
            "description": "Determines if copying of the place is allowed.",
            "type": "boolean"
          },
          "currentSavedVersion": {
            "format": "int32",
            "description": "The current saved version number of the place.",
            "type": "integer"
          },
          "isAllGenresAllowed": {
            "description": "Whether all genres allowed in the place.",
            "type": "boolean"
          },
          "allowedGearTypes": {
            "description": "Types of Roblox gear that are allowed to exist in the place.\r\nValid values are from amp::AssetCategory",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "The types of Gear that can be worn inside a place.\r\nValid values are derived from amp::AssetCategory ['Invalid' = 0, 'Melee' = 8, 'Ranged' = 9, 'Explosive' = 10, 'PowerUps' = 11, 'Navigation' = 12, 'Musical' = 13, 'Social' = 14, 'Building' = 21, 'PersonalTransport' = 22]",
              "enum": [0, 8, 9, 10, 11, 12, 13, 14, 21, 22],
              "type": "integer"
            }
          },
          "maxPlayersAllowed": {
            "format": "int32",
            "description": "The maximum allowed number of players for the place that the user can set, based on user roleset.",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The time place was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The time place was updated.",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "description": "Returns the place id.",
            "type": "integer"
          },
          "universeId": {
            "format": "int64",
            "description": "Returns the id of the place's universe, or null - if the place is not part of a universe.",
            "type": "integer"
          },
          "name": {
            "description": "Returns the place name.",
            "type": "string"
          },
          "description": {
            "description": "Returns the place description.",
            "type": "string"
          },
          "isRootPlace": {
            "description": "Returns whether this place is the root place.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseModerationPolicyStatus": {
        "description": "Represents a universe moderation policy status",
        "type": "object",
        "properties": {
          "region": {
            "format": "int32",
            "description": "The region policy label ['Unknown' = 0, 'China' = 1]",
            "enum": [0, 1],
            "type": "integer"
          },
          "status": {
            "description": "The status of the universe",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseSettingsRequestV2": {
        "description": "Model for UniverseSettings patch requests",
        "type": "object",
        "properties": {
          "allowPrivateServers": {
            "description": "If the universe allows the use of private servers.",
            "type": "boolean"
          },
          "privateServerPrice": {
            "format": "int64",
            "description": "The price to purchase a private server in robux.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the universe.",
            "type": "string"
          },
          "description": {
            "description": "The description of the universe.",
            "type": "string"
          },
          "universeAvatarType": {
            "format": "int32",
            "description": "Which avatar types are allowed in the universe.",
            "enum": [1, 2, 3],
            "type": "integer"
          },
          "universeAnimationType": {
            "format": "int32",
            "description": "Whether custom animations are allowed in the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeCollisionType": {
            "format": "int32",
            "description": "What type of collisions are used by the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeJointPositioningType": {
            "format": "int32",
            "description": "What avatar joint positioning type is allowed by the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "engineAvatarSettings": {
            "description": "Optional JSON string used to store avatar settings used by the game engine.\r\nWill not be updated if null or empty. To clear settings, set to empty JSON object \"{}\".\r\nNote: This is an experimental field which may be changed or removed in future.",
            "type": "string"
          },
          "isArchived": {
            "description": "Archive status of the universe.",
            "type": "boolean"
          },
          "isFriendsOnly": {
            "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
            "type": "boolean"
          },
          "genre": {
            "format": "int32",
            "description": "Game genre.",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
            "type": "integer"
          },
          "playableDevices": {
            "description": "List of device types this game can be played on.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
              "enum": [1, 2, 3, 4, 5],
              "type": "integer"
            }
          },
          "isForSale": {
            "description": "Whether the game is offered for sale.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "Price of the game, in Robux.",
            "type": "integer"
          },
          "universeAvatarAssetOverrides": {
            "description": "A list of avatar asset overrides.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Platform.UniverseSettings.UniverseAvatarAssetOverrideResponseModel"
            }
          },
          "universeAvatarMinScales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "universeAvatarMaxScales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "studioAccessToApisAllowed": {
            "description": "Whether Studio can access data stores of this universe.",
            "type": "boolean"
          },
          "permissions": {
            "$ref": "#/components/schemas/Roblox.UniversePluginPermissionAuthority.Models.UniversePluginPermissions"
          },
          "optInRegions": {
            "description": "A list of opt in region.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "Universe opt in regions ['Unknown' = 0, 'China' = 1]",
              "enum": [0, 1],
              "type": "integer"
            }
          },
          "optOutRegions": {
            "description": "A list of opt out region.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": "Universe opt in regions ['Unknown' = 0, 'China' = 1]",
              "enum": [0, 1],
              "type": "integer"
            }
          },
          "isMeshTextureApiAccessAllowed": {
            "description": "Sets whether access to APIs for mesh and texture is enabled for this universe.",
            "type": "boolean"
          },
          "isRewardedOnDemandAdsAllowed": {
            "description": "Whether rewarded on-demand ads are allowed for this universe.",
            "type": "boolean"
          },
          "fiatBasePriceId": {
            "description": "Sets the base price of the experience for Fiat purchases.",
            "type": "string"
          },
          "fiatProductChangeType": {
            "format": "int32",
            "description": "Determines the change type of the Fiat Product Change request.\r\nCan either Activate, Update Base Price, or Deactivate.",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseSettingsResponseV2": {
        "description": "Model for UniverseSettings controller responses",
        "type": "object",
        "properties": {
          "allowPrivateServers": {
            "description": "If the universe allows the use of private servers.",
            "type": "boolean"
          },
          "privateServerPrice": {
            "format": "int64",
            "description": "The price to purchase a private server in robux.",
            "type": "integer"
          },
          "optInRegions": {
            "description": "The regions the universe has opted in for",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseModerationPolicyStatus"
            }
          },
          "isMeshTextureApiAccessAllowed": {
            "description": "Whether access to APIs for mesh and texture is enabled for this universe.",
            "type": "boolean"
          },
          "isRewardedOnDemandAdsAllowed": {
            "description": "Whether rewarded on-demand ads are allowed for this universe.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "description": "The universe Id.",
            "type": "integer"
          },
          "name": {
            "description": "The universe name.",
            "type": "string"
          },
          "description": {
            "description": "The universe description.",
            "type": "string"
          },
          "universeAvatarType": {
            "format": "int32",
            "description": "Which avatar types are allowed in the universe. ['MorphToR6' = 1, 'PlayerChoice' = 2, 'MorphToR15' = 3]",
            "enum": [1, 2, 3],
            "type": "integer"
          },
          "universeAnimationType": {
            "format": "int32",
            "description": "Whether custom animations are allowed in the universe. ['Standard' = 1, 'PlayerChoice' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeCollisionType": {
            "format": "int32",
            "description": "What type of collisions are used by the universe. ['InnerBox' = 1, 'OuterBox' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeJointPositioningType": {
            "format": "int32",
            "description": "What avatar joint positioning is allowed by the universe. ['Standard' = 1, 'ArtistIntent' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "engineAvatarSettings": {
            "description": "Optional JSON string used to store avatar settings used by the game engine.\r\nNote: This is an experimental field which may be changed or removed in future.",
            "type": "string"
          },
          "isArchived": {
            "description": "Archive status of the universe",
            "type": "boolean"
          },
          "isFriendsOnly": {
            "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
            "type": "boolean"
          },
          "genre": {
            "format": "int32",
            "description": "Game genre. ['All' = 0, 'Tutorial' = 1, 'Scary' = 2, 'TownAndCity' = 3, 'War' = 4, 'Funny' = 5, 'Fantasy' = 6, 'Adventure' = 7, 'SciFi' = 8, 'Pirate' = 9, 'FPS' = 10, 'RPG' = 11, 'Sports' = 12, 'Ninja' = 13, 'WildWest' = 14]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
            "type": "integer"
          },
          "playableDevices": {
            "description": "List of device types this game can be played on.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
              "enum": [1, 2, 3, 4, 5],
              "type": "integer"
            }
          },
          "isForSale": {
            "description": "Whether the game is offered for sale.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "Price of the game, in Robux.",
            "type": "integer"
          },
          "universeAvatarAssetOverrides": {
            "description": "A collection of avatar asset settings allowed by the universe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Platform.UniverseSettings.UniverseAvatarAssetOverrideResponseModel"
            }
          },
          "universeAvatarMinScales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "universeAvatarMaxScales": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Avatar.ScaleModel"
          },
          "studioAccessToApisAllowed": {
            "description": "Whether Studio can access data stores of this universe.",
            "type": "boolean"
          },
          "permissions": {
            "$ref": "#/components/schemas/Roblox.UniversePluginPermissionAuthority.Models.UniversePluginPermissions"
          },
          "isForSaleInFiat": {
            "description": "Whether the game is offered for sale in fiat.",
            "type": "boolean"
          },
          "fiatBasePriceId": {
            "description": "The basePriceId for the Fiat product.",
            "type": "string"
          },
          "fiatModerationStatus": {
            "format": "int32",
            "description": "The current moderation status of the game if it is for sale in fiat. ['Invalid' = 0, 'NotModerated' = 1, 'Pending' = 2, 'Approved' = 3, 'Rejected' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "eligibleForTextChatMigration": {
            "description": "Whether the game is elegible for text chat service auto migration.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Platform.UniverseSettings.UniverseAvatarAssetOverrideResponseModel": {
        "type": "object",
        "properties": {
          "assetID": {
            "format": "int64",
            "type": "integer"
          },
          "assetTypeID": {
            "format": "int32",
            "type": "integer"
          },
          "isPlayerChoice": {
            "type": "boolean"
          }
        }
      },
      "Roblox.UniversePluginPermissionAuthority.Models.UniversePluginPermissions": {
        "type": "object",
        "properties": {
          "IsThirdPartyTeleportAllowed": {
            "type": "boolean"
          },
          "IsThirdPartyAssetAllowed": {
            "type": "boolean"
          },
          "IsThirdPartyPurchaseAllowed": {
            "type": "boolean"
          },
          "IsClientTeleportAllowed": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.AssetVersion_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.AssetVersion"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.IPlaceModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.IPlaceModel"
            }
          }
        }
      },
      "Roblox.Api.Develop.Models.GameTemplateModel": {
        "description": "Represents a game template in API endpoint responses.",
        "type": "object",
        "properties": {
          "gameTemplateType": {
            "description": "The type of this game template.",
            "type": "string"
          },
          "hasTutorials": {
            "description": "Whether this game template has tutorials.",
            "type": "boolean"
          },
          "universe": {
            "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseModel"
          }
        }
      },
      "Roblox.Api.Develop.Models.GroupModel": {
        "description": "A model containing information about a group",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The Roblox.Platform.Groups.IGroup's Id.",
            "type": "integer"
          },
          "name": {
            "description": "The Roblox.Platform.Groups.IGroup's name.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.PlaceConfigurationModel": {
        "description": "A model containing information about a place to be configured",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name for the place.",
            "type": "string"
          },
          "description": {
            "description": "The new description for the place.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.PlaceModel": {
        "description": "A model containing information about a place",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "Returns the place id.",
            "type": "integer"
          },
          "universeId": {
            "format": "int64",
            "description": "Returns the id of the place's universe, or null - if the place is not part of a universe.",
            "type": "integer"
          },
          "name": {
            "description": "Returns the place name.",
            "type": "string"
          },
          "description": {
            "description": "Returns the place description.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.PrivateServerDetailsResponse": {
        "description": "Model for private server details responses from the UniverseSettings controller.",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "Whether or not VIP servers are enabled on this universe.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "The price of the VIP server.",
            "type": "integer"
          },
          "activeServersCount": {
            "format": "int64",
            "description": "The number of active VIP servers for this universe. A negative value indicates at least this many exist (i.e. -100 means 100+ active private servers).",
            "type": "integer"
          },
          "activeSubscriptionsCount": {
            "format": "int64",
            "description": "The number of active VIP server subscriptions. A negative value indicates at least this many exist (i.e. -100 means 100+ active subscriptions).",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.Response.AssetVotingModel": {
        "description": "Asset voting information",
        "type": "object",
        "properties": {
          "assetId": {
            "format": "int64",
            "description": "The !:IAsset's id.",
            "type": "integer"
          },
          "hasUserVoted": {
            "description": "Whether the user has voted on this !:IAsset.",
            "type": "boolean"
          },
          "canUserVote": {
            "description": "Whether the user can vote on this !:IAsset.",
            "type": "boolean"
          },
          "shouldShowVotes": {
            "description": "Whether votes should be shown.",
            "type": "boolean"
          },
          "upVotes": {
            "format": "int64",
            "description": "The number of up votes.",
            "type": "integer"
          },
          "downVotes": {
            "format": "int64",
            "description": "The number of down votes.",
            "type": "integer"
          },
          "reasonForNotAbleToVote": {
            "description": "The reason this !:IAsset cannot be voted on.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.Response.TeamCreateSettingsResponse": {
        "description": "Team create settings",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "Whether or not the universe should be enabled for team create",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.TeamCreateMembershipRequest": {
        "description": "Request model for a TeamCreate membership",
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "description": "The id of the user.",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseIdPermissionsModel": {
        "description": "A model containing information about a universe permissions",
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "description": "The universe Id these permissions reference",
            "type": "integer"
          },
          "canManage": {
            "description": "Determines whether or not consumer can manage the target universe",
            "type": "boolean"
          },
          "canCloudEdit": {
            "description": "Determines whether or not consumer can cloud the target universe\r\nThis is only nullable/optional in the context of https://develop.roblox.com/docs#!/Universes/get_v1_universes_universeId_context_permissions endpoint which is consumed only internally. It should be computed and set for all other usages.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseModel": {
        "description": "Represents a universe in API endpoint results.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The universe Id.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the universe",
            "type": "string"
          },
          "description": {
            "description": "The description of the universe",
            "type": "string"
          },
          "isArchived": {
            "description": "Is this universe archived",
            "type": "boolean"
          },
          "rootPlaceId": {
            "format": "int64",
            "description": "The universe's root place id",
            "type": "integer"
          },
          "isActive": {
            "description": "Is this universe active",
            "type": "boolean"
          },
          "privacyType": {
            "description": "The universe's privacy type.",
            "type": "string"
          },
          "creatorType": {
            "description": "The creator type, either \"User\" or \"Group\"",
            "type": "string"
          },
          "creatorTargetId": {
            "format": "int64",
            "description": "The id of the user or group that created this universe.",
            "type": "integer"
          },
          "creatorName": {
            "description": "The name of the creator of the universe.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "The created System.DateTime",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The updated System.DateTime",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniversePermissionsModel": {
        "description": "A model containing information about a universe permissions",
        "type": "object",
        "properties": {
          "canManage": {
            "description": "Determines whether or not consumer can manage the target universe",
            "type": "boolean"
          },
          "canCloudEdit": {
            "description": "Determines whether or not consumer can cloud the target universe\r\nThis is only nullable/optional in the context of https://develop.roblox.com/docs#!/Universes/get_v1_universes_universeId_context_permissions endpoint which is consumed only internally. It should be computed and set for all other usages.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseSettingsRequest": {
        "description": "Model for UniverseSettings patch requests",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the universe.",
            "type": "string"
          },
          "universeAvatarType": {
            "format": "int32",
            "description": "Which avatar types are allowed in the universe.",
            "enum": [1, 2, 3],
            "type": "integer"
          },
          "universeScaleType": {
            "format": "int32",
            "description": "Whether custom scales allowed in the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeAnimationType": {
            "format": "int32",
            "description": "Whether custom animations are allowed in the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeCollisionType": {
            "format": "int32",
            "description": "What type of collisions are used by the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeBodyType": {
            "format": "int32",
            "description": "What avatar body types are allowed by the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeJointPositioningType": {
            "format": "int32",
            "description": "What avatar joint positioning type is allowed by the universe.",
            "enum": [1, 2],
            "type": "integer"
          },
          "isArchived": {
            "description": "Archive status of the universe.",
            "type": "boolean"
          },
          "isFriendsOnly": {
            "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
            "type": "boolean"
          },
          "genre": {
            "format": "int32",
            "description": "Game genre.",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
            "type": "integer"
          },
          "playableDevices": {
            "description": "List of device types this game can be played on.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
              "enum": [1, 2, 3, 4, 5],
              "type": "integer"
            }
          },
          "isForSale": {
            "description": "Whether the game is offered for sale.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "Price of the game, in Robux.",
            "type": "integer"
          },
          "isMeshTextureApiAccessAllowed": {
            "description": "Sets whether access to APIs for mesh and texture is enabled for this universe.",
            "type": "boolean"
          },
          "isRewardedOnDemandAdsAllowed": {
            "description": "Set is rewarded on-demand ads are allowed for this universe.",
            "type": "boolean"
          },
          "fiatBasePriceId": {
            "description": "Sets the base price of the experience for Fiat purchases.",
            "type": "string"
          },
          "fiatProductChangeType": {
            "format": "int32",
            "description": "Determines the change type of the Fiat Product Change request.\r\nCan either Activate the product, Update the price, or Deactivate the product.",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseSettingsResponse": {
        "description": "Model for UniverseSettings controller responses",
        "type": "object",
        "properties": {
          "allowPrivateServers": {
            "description": "If the universe allows the use of private servers.",
            "type": "boolean"
          },
          "privateServerPrice": {
            "format": "int64",
            "description": "The price to purchase a private server in robux.",
            "type": "integer"
          },
          "isMeshTextureApiAccessAllowed": {
            "description": "Whether access to APIs for mesh and texture is enabled for this universe.",
            "type": "boolean"
          },
          "isRewardedOnDemandAdsAllowed": {
            "description": "Whether rewarded on-demand ads are allowed for this universe.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "description": "The universe Id.",
            "type": "integer"
          },
          "name": {
            "description": "The universe name.",
            "type": "string"
          },
          "universeAvatarType": {
            "format": "int32",
            "description": "Which avatar types are allowed in the universe. ['MorphToR6' = 1, 'PlayerChoice' = 2, 'MorphToR15' = 3]",
            "enum": [1, 2, 3],
            "type": "integer"
          },
          "universeScaleType": {
            "format": "int32",
            "description": "Whether custom scales allowed in the universe. ['NoScales' = 1, 'AllScales' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeAnimationType": {
            "format": "int32",
            "description": "Whether custom animations are allowed in the universe. ['Standard' = 1, 'PlayerChoice' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeCollisionType": {
            "format": "int32",
            "description": "What type of collisions are used by the universe. ['InnerBox' = 1, 'OuterBox' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeBodyType": {
            "format": "int32",
            "description": "What avatar body types are allowed by the universe. ['Standard' = 1, 'PlayerChoice' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "universeJointPositioningType": {
            "format": "int32",
            "description": "What avatar joint positioning is allowed by the universe. ['Standard' = 1, 'ArtistIntent' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "isArchived": {
            "description": "Archive status of the universe",
            "type": "boolean"
          },
          "isFriendsOnly": {
            "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
            "type": "boolean"
          },
          "genre": {
            "format": "int32",
            "description": "Game genre. ['All' = 0, 'Tutorial' = 1, 'Scary' = 2, 'TownAndCity' = 3, 'War' = 4, 'Funny' = 5, 'Fantasy' = 6, 'Adventure' = 7, 'SciFi' = 8, 'Pirate' = 9, 'FPS' = 10, 'RPG' = 11, 'Sports' = 12, 'Ninja' = 13, 'WildWest' = 14]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
            "type": "integer"
          },
          "playableDevices": {
            "description": "List of device types this game can be played on.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
              "enum": [1, 2, 3, 4, 5],
              "type": "integer"
            }
          },
          "isForSale": {
            "description": "Whether the game is offered for sale.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "Price of the game, in Robux.",
            "type": "integer"
          },
          "isStudioAccessToApisAllowed": {
            "description": "Whether studio access to APIs is allowed or not.",
            "type": "boolean"
          },
          "privacyType": {
            "description": "Privacy type of the universe.",
            "type": "string"
          },
          "isForSaleInFiat": {
            "description": "Whether the game is offered for sale in fiat.",
            "type": "boolean"
          },
          "fiatBasePriceId": {
            "description": "The basePriceId for the Fiat product.",
            "type": "string"
          },
          "fiatModerationStatus": {
            "format": "int32",
            "description": "The current moderation status of the game if it is for sale in fiat. ['Invalid' = 0, 'NotModerated' = 1, 'Pending' = 2, 'Approved' = 3, 'Rejected' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel": {
        "description": "Team create settings of a universe",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "Id of the universe.",
            "type": "integer"
          },
          "isEnabled": {
            "description": "Whether or not the universe is enabled for team create",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest": {
        "description": "Team create settings request",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "Whether or not the universe should be enabled for team create",
            "type": "boolean"
          }
        }
      },
      "Roblox.Develop.Api.UpdatePluginRequest": {
        "description": "A request model for updating a plugin.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The new plugin name.",
            "type": "string"
          },
          "description": {
            "description": "The new plugin description.",
            "type": "string"
          },
          "commentsEnabled": {
            "description": "Whether or not comments should be enabled.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.Responses.Plugins.PluginResponse": {
        "description": "Represents information about a plugin.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The plugin Id.",
            "type": "integer"
          },
          "name": {
            "description": "The plugin name.",
            "type": "string"
          },
          "description": {
            "description": "The plugin description.",
            "type": "string"
          },
          "commentsEnabled": {
            "description": "Whether or not the plugin allows comments to be posted.",
            "type": "boolean"
          },
          "versionId": {
            "format": "int64",
            "description": "plugin version id",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The time the plugin was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The last time the plugin was updated.",
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GameTemplateModel_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.GameTemplateModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.GroupModel_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.GroupModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.Response.AssetVotingModel_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.Response.AssetVotingModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseIdPermissionsModel_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseIdPermissionsModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseModel_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Plugins.PluginResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Plugins.PluginResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Users.SkinnyUserResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Api.Develop.Models.UniverseModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UniverseModel"
            }
          }
        }
      },
      "Roblox.Web.Responses.Economy.CurrencyResponse": {
        "type": "object",
        "properties": {
          "robux": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.EconomyCreatorStats.Api.Models.StatisticsResponse": {
        "description": "The response model",
        "type": "object",
        "properties": {
          "dataGranularity": {
            "format": "int32",
            "description": "The Roblox.EconomyCreatorStats.Api.StatisticsDataGranularity. ['Hourly' = 0, 'Daily' = 1, 'Monthly' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "data": {
            "description": "The actual data.",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "Roblox.EngagementPayouts.Api.PayoutResponseModel": {
        "description": "A model for payout responses",
        "type": "object",
        "properties": {
          "engagementScore": {
            "format": "double",
            "description": "Gets the engagement score",
            "type": "number",
            "readOnly": true
          },
          "payoutInRobux": {
            "format": "int64",
            "description": "Gets the payout in Robux",
            "type": "integer",
            "readOnly": true
          },
          "payoutType": {
            "description": "Gets the payout type",
            "type": "string",
            "readOnly": true
          },
          "eligibilityType": {
            "description": "Gets the eligibility type",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Roblox.Followings.Api.Models.UserFollowingUniverseResponse": {
        "description": "Model for a user following a universe controller responses",
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "description": "The id of the universe being followed",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "description": "The id of the user that is following",
            "type": "integer"
          }
        }
      },
      "Roblox.Followings.Api.Models.UserFollowingUniverseStatusResponse": {
        "description": "Model for a user following a universe  state controller responses",
        "type": "object",
        "properties": {
          "UniverseId": {
            "format": "int64",
            "description": "The id of the universe.",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "The id of the user.",
            "type": "integer"
          },
          "CanFollow": {
            "description": "If the user can follow the universe.",
            "type": "boolean"
          },
          "IsFollowing": {
            "description": "If the user is currently following the universe.",
            "type": "boolean"
          },
          "FollowingCountByType": {
            "format": "int32",
            "description": "The number of followings between this user and a universe.",
            "type": "integer"
          },
          "FollowingLimitByType": {
            "format": "int32",
            "description": "The limit to the number of followings between a user and a universe for a specific user.",
            "type": "integer"
          }
        }
      },
      "Roblox.Followings.Api.Models.FollowsByTypeResponse": {
        "description": "Data model containing collection of all followed sources of a specific type.",
        "type": "object",
        "properties": {
          "followerType": {
            "format": "int32",
            "description": "Type of the follower entity. ['Invalid' = 0, 'User' = 1]",
            "enum": [0, 1],
            "type": "integer"
          },
          "followerId": {
            "format": "int64",
            "description": "ID of the follower entity.",
            "type": "integer"
          },
          "sourceType": {
            "format": "int32",
            "description": "Type of the source entity. ['Invalid' = 0, 'Universe' = 1]",
            "enum": [0, 1],
            "type": "integer"
          },
          "followedSources": {
            "description": "Followed sources: map of (source ID => follow date)",
            "type": "object",
            "additionalProperties": {
              "format": "date-time",
              "type": "string"
            }
          }
        }
      },
      "Roblox.Friends.Api.AcceptTrustedFriendRequestResponse": {
        "description": "Response model for AcceptTrustedFriendRequestResposne",
        "type": "object",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.CaptchaStatusResponseModel": {
        "description": "This is response model to notify when action succeeded, failed, or captcha is required",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "isCaptchaRequired": {
            "description": "Captcha is set to true if captcha is required from user to perform action",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.FollowCountResponse": {
        "description": "Response model for following or followers Count",
        "type": "object",
        "properties": {
          "count": {
            "format": "int64",
            "description": "Count of following or followers",
            "type": "integer"
          }
        }
      },
      "Roblox.Friends.Api.FollowingExistsRequestModel": {
        "description": "Request model for FollowingExists endpoint",
        "type": "object",
        "properties": {
          "targetUserIds": {
            "description": "The userIds which the user may or may not be following.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Friends.Api.FriendRequest": {
        "description": "A response model representing a friend request.",
        "type": "object",
        "properties": {
          "sentAt": {
            "format": "date-time",
            "description": "When the friend request was sent.",
            "type": "string"
          },
          "senderId": {
            "format": "int64",
            "description": "The sender user Id.",
            "type": "integer"
          },
          "sourceUniverseId": {
            "format": "int64",
            "description": "The source universe Id which the request was sent in.",
            "type": "integer"
          },
          "originSourceType": {
            "format": "int32",
            "description": "The origin source type associated with the friend request. ['Unknown' = 0, 'PlayerSearch' = 1, 'QrCode' = 2, 'InGame' = 3, 'UserProfile' = 4, 'QqContactImporter' = 5, 'WeChatContactImporter' = 6, 'ProfileShare' = 7, 'PhoneContactImporter' = 8, 'FriendRecommendations' = 9]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            "type": "integer"
          },
          "contactName": {
            "description": "The contact name associated with the friend request.",
            "type": "string"
          },
          "senderNickname": {
            "description": "The nickname associated with the friend request.",
            "type": "string"
          }
        }
      },
      "Roblox.Friends.Api.FriendRequestResponse": {
        "description": "A response model representing a friend request.",
        "type": "object",
        "properties": {
          "friendRequest": {
            "$ref": "#/components/schemas/Roblox.Friends.Api.FriendRequest"
          },
          "mutualFriendsList": {
            "description": "mutualFriendsList",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "description": {
            "description": "The user description.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "When the user signed up.",
            "type": "string"
          },
          "isBanned": {
            "description": "Whether or not the user is banned",
            "type": "boolean"
          },
          "externalAppDisplayName": {
            "description": "Used when user is logged in from third party app (e.g. QQ)\r\nExternalAppDisplayName is the name used in that app (e.g. QQ nickname)",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Friends.Api.FriendStatusResponse": {
        "description": "The friendship status response model.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The user Id of the friend.",
            "type": "integer"
          },
          "status": {
            "format": "int32",
            "description": "The friendship status. ['NotFriends' = 0, 'Friends' = 1, 'RequestSent' = 2, 'RequestReceived' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          }
        }
      },
      "Roblox.Friends.Api.FriendsCountResponse": {
        "description": "Response model for Friends Count",
        "type": "object",
        "properties": {
          "count": {
            "format": "int32",
            "description": "Count of friends",
            "type": "integer"
          }
        }
      },
      "Roblox.Friends.Api.FriendshipRequestModel": {
        "type": "object",
        "properties": {
          "friendshipOriginSourceType": {
            "format": "int32",
            "description": "Which source the friend request originated from ['Unknown' = 0, 'PlayerSearch' = 1, 'QrCode' = 2, 'InGame' = 3, 'UserProfile' = 4, 'QqContactImporter' = 5, 'WeChatContactImporter' = 6, 'ProfileShare' = 7, 'PhoneContactImporter' = 8, 'FriendRecommendations' = 9]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            "type": "integer"
          },
          "senderNickname": {
            "description": "Optional nickname attached to friend request",
            "type": "string"
          }
        }
      },
      "Roblox.Friends.Api.IgnoreTrustedFriendRequestResponse": {
        "description": "Response model for IgnoreTrustedFriendRequestResponse",
        "type": "object",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.Models.Request.FriendingTokenRequestModel": {
        "description": "Request model for AcceptFriendRequestWithToken endpoint",
        "type": "object",
        "properties": {
          "friendingToken": {
            "description": "FriendingToken to authorize the creation of an Off Network Friend request",
            "type": "string"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.ClearNewFriendRequestResponse": {
        "description": "The friendship status response model.",
        "type": "object",
        "properties": {
          "status": {
            "description": "Returns if the cache was successfully cleared.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.DeclineAllFriendRequestsResponse": {
        "description": "response for DeclineAllFriendRequests",
        "type": "object",
        "properties": {
          "backgrounded": {
            "description": "Whether or not the decline all job has been backgrounded",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.FollowingExistsResponse": {
        "description": "Response contained in list for FollowingExists endpoint. Corresponds to a single userId.",
        "type": "object",
        "properties": {
          "isFollowing": {
            "description": "Whether or not a user is following userId in FriendsController.FollowingExists",
            "type": "boolean"
          },
          "isFollowed": {
            "description": "Whether or not a user is followed by userId in FriendsController.FollowingExists",
            "type": "boolean"
          },
          "userId": {
            "format": "int64",
            "description": "The userId being potentially followed",
            "type": "integer"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.FollowingExistsResponseModel": {
        "description": "Response model for FollowingExists endpoint.",
        "type": "object",
        "properties": {
          "followings": {
            "description": "A list of userIds and whether or not the given user is following them.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.FollowingExistsResponse"
            }
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.FriendResponse": {
        "description": "A response model representing friend information",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The friend's userId",
            "type": "integer"
          },
          "hasVerifiedBadge": {
            "description": "The friend's verified badge status.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.FriendsPageMetadataResponse": {
        "type": "object",
        "properties": {
          "isFriendsFilterBarEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "isFriendsPageSortExperimentEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "isFriendsUserDataStoreCacheEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "frequentFriendSortRollout": {
            "format": "int32",
            "type": "integer",
            "readOnly": true
          },
          "userName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.NewFriendRequestsCountResponse": {
        "description": "The friendship status response model.",
        "type": "object",
        "properties": {
          "count": {
            "format": "int64",
            "description": "Count of new friend requests.",
            "type": "integer"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.RefreshQrSessionResponse": {
        "type": "object",
        "properties": {
          "Success": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.UserPresenceResponse": {
        "description": "A response model representing user presence information.",
        "type": "object",
        "properties": {
          "userPresence": {
            "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.UserPresenceResponseModel"
          },
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.UserPresenceResponseModel": {
        "description": "Response model for !:IUserPresence objects",
        "type": "object",
        "properties": {
          "UserPresenceType": {
            "description": "User Presence Type",
            "type": "string"
          },
          "UserLocationType": {
            "description": "Location Type",
            "type": "string"
          },
          "lastLocation": {
            "description": "Last Location",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "Place Id",
            "type": "integer"
          },
          "rootPlaceId": {
            "format": "int64",
            "description": "Root Place Id",
            "type": "integer"
          },
          "gameInstanceId": {
            "format": "uuid",
            "description": "Game Instance Id",
            "type": "string"
          },
          "universeId": {
            "format": "int64",
            "description": "Universe Id",
            "type": "integer"
          },
          "lastOnline": {
            "format": "date-time",
            "description": "Most recent time online",
            "type": "string"
          },
          "joinability": {
            "format": "int32",
            "description": "Joinability information ['Invalid' = 0, 'Joinable' = 1, 'PlaceNotJoinable' = 2, 'PrivateServer' = 3, 'FullServer' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Friends.Api.Models.Response.UserResponse": {
        "description": "A response model representing user information that also contains select presence information",
        "type": "object",
        "properties": {
          "isOnline": {
            "description": "Whether the user is online.",
            "type": "boolean"
          },
          "presenceType": {
            "format": "int32",
            "description": "Where the user is online.",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "isDeleted": {
            "description": "Whether the user is deleted.",
            "type": "boolean"
          },
          "friendFrequentScore": {
            "format": "int64",
            "description": "Frequents value for the user.",
            "type": "integer"
          },
          "friendFrequentRank": {
            "format": "int64",
            "description": "Frequents rank for the user.",
            "type": "integer"
          },
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "description": {
            "description": "The user description.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "When the user signed up.",
            "type": "string"
          },
          "isBanned": {
            "description": "Whether or not the user is banned",
            "type": "boolean"
          },
          "externalAppDisplayName": {
            "description": "Used when user is logged in from third party app (e.g. QQ)\r\nExternalAppDisplayName is the name used in that app (e.g. QQ nickname)",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Friends.Api.MultigetAreFriendsRequestModel": {
        "description": "Request model for MultigetAreFriends endpoint",
        "type": "object",
        "properties": {
          "targetUserIds": {
            "description": "The target userIds to check against with the requesting user regarding friendship.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Friends.Api.MultigetAreFriendsResponse": {
        "description": "Response model for MultigetAreFriendsResponse",
        "type": "object",
        "properties": {
          "friendsId": {
            "description": "friends id list",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Friends.Api.MultigetAreTrustedFriendsResponse": {
        "description": "Response model for MultigetAreTrustedFriendsRequest",
        "type": "object",
        "properties": {
          "trustedFriendsId": {
            "description": "List of trusted friend ids",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Friends.Api.PendingFriendRequestCountModel": {
        "description": "Response model for Pending Friend Request Count",
        "type": "object",
        "properties": {
          "count": {
            "format": "int32",
            "description": "Count of pending friend requests",
            "type": "integer"
          }
        }
      },
      "Roblox.Friends.Api.RemoveTrustedFriendResponse": {
        "description": "Response model for RemoveTrustedFriendResponse",
        "type": "object",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.SendTrustedFriendRequestResponse": {
        "description": "Response model for SendTrustedFriendRequestResponse",
        "type": "object",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        }
      },
      "Roblox.Friends.Api.TrustedFriendStatusResponse": {
        "description": "The trusted friend status response model",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "The trusted friend status. ['Invalid' = 0, 'NotFriends' = 1, 'Friends' = 2, 'TrustedFriends' = 3, 'RequestSent' = 4, 'RequestReceived' = 5, 'RequestIgnored' = 6]",
            "enum": [0, 1, 2, 3, 4, 5, 6],
            "type": "integer"
          }
        }
      },
      "Roblox.Web.Captcha.Models.Request.CaptchaTokenRequest": {
        "type": "object",
        "properties": {
          "captchaId": {
            "type": "string"
          },
          "captchaToken": {
            "type": "string"
          },
          "captchaProvider": {
            "type": "string"
          },
          "challengeId": {
            "type": "string"
          }
        }
      },
      "Roblox.Paging.CursoredPagedResult_Roblox.Friends.Api.Models.Response.FriendResponse_": {
        "type": "object",
        "properties": {
          "PreviousCursor": {
            "type": "string"
          },
          "PageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.FriendResponse"
            }
          },
          "NextCursor": {
            "type": "string"
          },
          "HasMore": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.FriendStatusResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Friends.Api.FriendStatusResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserPresenceResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.UserPresenceResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Friends.Api.Models.Response.UserResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.UserResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.FriendRequestResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Friends.Api.FriendRequestResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Friends.Api.Models.Response.UserResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Friends.Api.Models.Response.UserResponse"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.Language": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nativeName": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.LanguageWithLocales": {
        "type": "object",
        "properties": {
          "languageFamily": {
            "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Language"
          },
          "childLocales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Localization.Client.SupportedLocale"
            }
          }
        }
      },
      "Roblox.Localization.Client.LanguageFamily": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "nativeName": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "isRightToLeft": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Localization.Client.SupportedLocale": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "locale": {
            "enum": [
              "en_us",
              "es_es",
              "fr_fr",
              "id_id",
              "it_it",
              "ja_jp",
              "ko_kr",
              "ru_ru",
              "th_th",
              "tr_tr",
              "vi_vn",
              "pt_br",
              "de_de",
              "zh_cn",
              "zh_tw",
              "bg_bg",
              "bn_bd",
              "cs_cz",
              "da_dk",
              "el_gr",
              "et_ee",
              "fi_fi",
              "hi_in",
              "hr_hr",
              "hu_hu",
              "ka_ge",
              "kk_kz",
              "km_kh",
              "lt_lt",
              "lv_lv",
              "ms_my",
              "my_mm",
              "nb_no",
              "nl_nl",
              "fil_ph",
              "pl_pl",
              "ro_ro",
              "uk_ua",
              "si_lk",
              "sk_sk",
              "sl_sl",
              "sq_al",
              "bs_ba",
              "sr_rs",
              "sv_se",
              "zh_cjv",
              "ar_001",
              "en_gb",
              "pt_pt",
              "es_mx",
              "fr_ca"
            ],
            "type": "string"
          },
          "localeCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nativeName": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/Roblox.Localization.Client.LanguageFamily"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageWithLocales_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.LanguageWithLocales"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.AssociateLocalizationTablesToGameRequest": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.LocalizationTableGameAssociation"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.AssociateLocalizationTablesToGameResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.AutoLocalizationMetadataResponse": {
        "type": "object",
        "properties": {
          "isReactVersionEnabledForAutoLocalizationSettings": {
            "description": "Is React Implementation of AutoLocalization Settings Enabled",
            "type": "boolean"
          },
          "isTabbedUIEnabledForConfigureLocalizationPage": {
            "description": "Is Tabbed UI Enabled for Configure Localization Page",
            "type": "boolean"
          },
          "isAutomaticTranslationToggleUIEnabled": {
            "description": "Is Toggle UI Enabled for Automatic Translations",
            "type": "boolean"
          },
          "isAutomaticTranslationQuotaUIEnabled": {
            "description": "Is Quota UI Enabled for Automatic Translations",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.AutomaticTranslationStatusTargetLanguage": {
        "type": "object",
        "properties": {
          "languageCode": {
            "description": "The language code.",
            "type": "string"
          },
          "isAutomaticTranslationAllowed": {
            "description": "Indicates whether or not automatic translation is allowed for the target language.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.EditAutomaticTranslationStatusForGameAndLanguageResponse": {
        "type": "object",
        "properties": {
          "gameId": {
            "format": "int64",
            "description": "The game id.",
            "type": "integer"
          },
          "languageCode": {
            "description": "The language code.",
            "type": "string"
          },
          "isAutomaticTranslationEnabled": {
            "description": "Indicates whether or not automatic translation is currently enabled for the game and language.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.FailedNameDescription": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string"
          },
          "errorCode": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GameAutolocalizationInformationResponse": {
        "type": "object",
        "properties": {
          "isAutolocalizationEnabled": {
            "type": "boolean"
          },
          "shouldUseLocalizationTable": {
            "type": "boolean"
          },
          "autoLocalizationTableId": {
            "format": "uuid",
            "type": "string"
          },
          "assetId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetAllowedAutomaticTranslationStatusForLanguagesResponse": {
        "description": "A response model for getting the automatic translation allowed status of target languages.",
        "type": "object",
        "properties": {
          "sourceLanguage": {
            "description": "The source language.",
            "type": "string"
          },
          "targetLanguages": {
            "description": "The target languages with the automatic translation allowed status.\r\nThe status basically says if automatic translation can be enabled for the source and target.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.AutomaticTranslationStatusTargetLanguage"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetAutomaticTranslationFeatureStatusForGameResponse": {
        "description": "A response model for getting the automatic translation allowed status of a game.",
        "type": "object",
        "properties": {
          "gameId": {
            "format": "int64",
            "description": "The game id.",
            "type": "integer"
          },
          "isAutomaticTranslationAllowed": {
            "description": "Indicates whether or not automatic translation is allowed for the game.",
            "type": "boolean"
          },
          "isAutomaticTranslationSwitchesUIEnabled": {
            "description": "Indicates whether or not automatic translation switches are enabled for the game.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetAutomaticTranslationQuotaForGameResponse": {
        "description": "A response model for getting the automatic translation quota info of a game.",
        "type": "object",
        "properties": {
          "monthlyQuota": {
            "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.MonthlyQuotaModel"
          },
          "bankQuota": {
            "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.QuotaModel"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetBadgeIconResponse": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "state": {
            "description": "Enum for image status. ['Approved' = 0, 'PendingReview' = 1, 'UnAvailable' = 2, 'Rejected' = 3, 'Error' = 4]",
            "enum": [
              "Approved",
              "PendingReview",
              "UnAvailable",
              "Rejected",
              "Error"
            ],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetDeveloperProductIconResponse": {
        "description": "A response model for getting developer product icon",
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "state": {
            "description": "Enum for image status. ['Approved' = 0, 'PendingReview' = 1, 'UnAvailable' = 2, 'Rejected' = 3, 'Error' = 4]",
            "enum": [
              "Approved",
              "PendingReview",
              "UnAvailable",
              "Rejected",
              "Error"
            ],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetGameIconResponse": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "state": {
            "description": "Enum for image status. ['Approved' = 0, 'PendingReview' = 1, 'UnAvailable' = 2, 'Rejected' = 3, 'Error' = 4]",
            "enum": [
              "Approved",
              "PendingReview",
              "UnAvailable",
              "Rejected",
              "Error"
            ],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetGamePassIconResponse": {
        "description": "A response model for getting game pass icon",
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "state": {
            "description": "Enum for image status. ['Approved' = 0, 'PendingReview' = 1, 'UnAvailable' = 2, 'Rejected' = 3, 'Error' = 4]",
            "enum": [
              "Approved",
              "PendingReview",
              "UnAvailable",
              "Rejected",
              "Error"
            ],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetGameThumbnailsResponse": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string"
          },
          "mediaAssets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.MediaAssetResponse"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetNameDescriptionHistoryRequest": {
        "description": "A model containing request for getting history of name or description.",
        "type": "object",
        "properties": {
          "requestType": {
            "description": "The enum representing the type of request while requesting name/description history ['Name' = 0, 'Description' = 1]",
            "enum": ["Name", "Description"],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "sortOrder": {
            "description": " ['Asc' = 1, 'Desc' = 2]",
            "enum": ["Asc", "Desc"],
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetNameDescriptionHistoryResponse": {
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationHistory"
            }
          },
          "lastEvaluatedId": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetNameDescriptionHistoryV2Request": {
        "description": "A model containing request for getting the translation history of\r\na content source type's name or description.",
        "type": "object",
        "properties": {
          "contentId": {
            "format": "int64",
            "type": "integer"
          },
          "contentType": {
            "description": "The enum representing the type of request while requesting name/description history ['UniverseDisplayNames' = 0, 'UniverseDisplayDescriptions' = 1, 'BadgeDisplayName' = 2, 'BadgeDisplayDescription' = 3, 'DeveloperProductDisplayName' = 4, 'DeveloperProductDisplayDescription' = 5, 'GamePassDisplayName' = 6, 'GamePassDisplayDescription' = 7]",
            "enum": [
              "UniverseDisplayNames",
              "UniverseDisplayDescriptions",
              "BadgeDisplayName",
              "BadgeDisplayDescription",
              "DeveloperProductDisplayName",
              "DeveloperProductDisplayDescription",
              "GamePassDisplayName",
              "GamePassDisplayDescription"
            ],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "cursor": {
            "type": "string"
          },
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "sortOrder": {
            "description": " ['Asc' = 1, 'Desc' = 2]",
            "enum": ["Asc", "Desc"],
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetTranslationCountsForGameResponse": {
        "description": "A response model that contains game info for getting a translation count.",
        "type": "object",
        "properties": {
          "gameId": {
            "format": "int64",
            "description": "The game id.",
            "type": "integer"
          },
          "languagesOrLocales": {
            "description": "The list of languages/locales of the game.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationCountLanguageOrLocaleResponse"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetTranslationCountsForLanguageOrLocaleResponse": {
        "description": "A response model for getting translation counts for a language or locale.",
        "type": "object",
        "properties": {
          "languageOrLocaleCode": {
            "description": "The code of the language or locale.",
            "type": "string"
          },
          "languageOrLocaleType": {
            "description": "An indicator that says whether the passed in language/locale code represents a language or locale. ['Language' = 0, 'Locale' = 1]",
            "enum": ["Language", "Locale"],
            "type": "string"
          },
          "games": {
            "description": "Info for the requested games, including their translation counts for the specified language or locale.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationCountGameInfoResponse"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.GetUiConfigurationsResponse": {
        "type": "object",
        "properties": {
          "isGameProductsEnabled": {
            "description": "Game products translation management page is enabled or not.",
            "type": "boolean"
          },
          "isBadgeIconEnabled": {
            "description": "Badge Icon translation management is enabled or not.",
            "type": "boolean"
          },
          "isGamePassEnabled": {
            "description": "Game pass translation management is enabled or not.",
            "type": "boolean"
          },
          "isDeveloperProductEnabled": {
            "description": "Developer product translation management is enabled or not.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.LanguageOrLocale": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "languageCodeType": {
            "description": "An enum to distinguish between locale codes and language codes. ['Language' = 0, 'Locale' = 1]",
            "enum": ["Language", "Locale"],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.LanguageOrLocaleSettings": {
        "type": "object",
        "properties": {
          "languageCodeType": {
            "description": "The language code type. ['Language' = 0, 'Locale' = 1]",
            "enum": ["Language", "Locale"],
            "type": "string"
          },
          "languageCode": {
            "description": "The language code.",
            "type": "string"
          },
          "isAutomaticTranslationEnabled": {
            "description": "Indicates whether or not automatic translation is currently enabled for the game and language.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.LocalizationTableGameAssociation": {
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "dissociate": {
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.MediaAssetResponse": {
        "type": "object",
        "properties": {
          "mediaAssetId": {
            "type": "string"
          },
          "mediaAssetAltText": {
            "type": "string"
          },
          "state": {
            "description": "Enum for image status. ['Approved' = 0, 'PendingReview' = 1, 'UnAvailable' = 2, 'Rejected' = 3, 'Error' = 4]",
            "enum": [
              "Approved",
              "PendingReview",
              "UnAvailable",
              "Rejected",
              "Error"
            ],
            "type": "string"
          },
          "mediaAssetUrl": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.Models.Request.SetUserLocalizationSettingsRequest": {
        "type": "object",
        "properties": {
          "settingValue": {
            "$ref": "#/components/schemas/Roblox.GameLocalization.Client.UserUniverseLocalizationSettingValue"
          }
        }
      },
      "Roblox.GameInternationalization.Api.Models.Response.GameNameDescriptionMetadataResponse": {
        "type": "object",
        "properties": {
          "isNameDescriptionMigrationEnabled": {
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.Models.Response.GetUserLocalizationSettingsForUniverseResponse": {
        "type": "object",
        "properties": {
          "userUniverseLocalizationSettingValue": {
            "$ref": "#/components/schemas/Roblox.GameLocalization.Client.UserUniverseLocalizationSettingValue"
          }
        }
      },
      "Roblox.GameInternationalization.Api.Models.Response.SetUserLocalizationSettingsResponse": {
        "type": "object"
      },
      "Roblox.GameInternationalization.Api.Models.Response.UploadImageForGameThumbnailResponse": {
        "type": "object",
        "properties": {
          "mediaAssetId": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.MonthlyQuotaModel": {
        "type": "object",
        "properties": {
          "previousRefreshDate": {
            "format": "date-time",
            "type": "string"
          },
          "nextRefreshDate": {
            "format": "date-time",
            "type": "string"
          },
          "remaining": {
            "format": "int64",
            "type": "integer"
          },
          "capacity": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.GameInternationalization.Api.NameDescription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "updateType": {
            "enum": ["Invalid", "Name", "Description"],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.PatchLanguage": {
        "type": "object",
        "properties": {
          "languageCodeType": {
            "description": "The language code type. ['Language' = 0, 'Locale' = 1]",
            "enum": ["Language", "Locale"],
            "type": "string"
          },
          "languageCode": {
            "description": "The language code for the language to edit.",
            "type": "string"
          },
          "delete": {
            "description": "An optional field used to indicate whether a language should be deleted from this game's list of supported languages.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.QuotaModel": {
        "type": "object",
        "properties": {
          "remaining": {
            "format": "int64",
            "type": "integer"
          },
          "capacity": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.GameInternationalization.Api.RequestTranslationAnalyticsReportRequest": {
        "type": "object",
        "properties": {
          "startDateTime": {
            "format": "date-time",
            "description": "The inclusive start dateTime of report in UTC",
            "type": "string"
          },
          "endDateTime": {
            "format": "date-time",
            "description": "The exclusive end dateTime of report in UTC",
            "type": "string"
          },
          "reportType": {
            "description": "The report type ['GameTranslationStatus' = 0, 'GameTranslationStatusForTranslator' = 1, 'GameTranslationStatusForTranslatorGroup' = 2, 'Test' = 3]",
            "enum": [
              "GameTranslationStatus",
              "GameTranslationStatusForTranslator",
              "GameTranslationStatusForTranslatorGroup",
              "Test"
            ],
            "type": "string"
          },
          "reportSubjectTargetId": {
            "format": "int64",
            "description": "The report subject target id",
            "type": "integer"
          }
        }
      },
      "Roblox.GameInternationalization.Api.RequestTranslationAnalyticsReportResponse": {
        "type": "object",
        "properties": {
          "reportGenerationStatus": {
            "description": " ['InProgress' = 0, 'Ready' = 1, 'Unavailable' = 2]",
            "enum": ["inProgress", "ready", "unavailable"],
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.SetAutolocalizationSettingsForGameRequest": {
        "type": "object",
        "properties": {
          "isAutolocalizationEnabled": {
            "type": "boolean"
          },
          "shouldUseLocalizationTable": {
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.SetAutolocalizationTableForGameRequest": {
        "type": "object",
        "properties": {
          "tableId": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.SortImageIdsRequest": {
        "description": "A request model for sorting of image Ids for game thumbnails",
        "type": "object",
        "properties": {
          "mediaAssetIds": {
            "description": "List of thumbnail ids in desired order.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.SupportedLanguagesMetadataResponse": {
        "type": "object",
        "properties": {
          "isFeatureEnabled": {
            "type": "boolean"
          },
          "areAllLanguagesEnabled": {
            "type": "boolean"
          },
          "minimumUniverseIdForFeature": {
            "format": "int64",
            "type": "integer"
          },
          "isHumanTranslationProgressUIEnabled": {
            "description": "Is translation progress for human translations enabled on UI",
            "type": "boolean"
          },
          "isAutomaticTranslationProgressUIEnabled": {
            "description": "Is translation progress for automatic translations enabled on UI",
            "type": "boolean"
          },
          "isSupportedLanguagesChildLocalesUIEnabled": {
            "description": "Is Language Locales UI Enabled for Supported Languages",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.TranslationAnalyticsMetadataResponse": {
        "type": "object",
        "properties": {
          "isFeatureEnabledOnUI": {
            "description": "Is Translation Analytics feature enabled on UI",
            "type": "boolean"
          },
          "reportRequestPollingIntervalSeconds": {
            "format": "int32",
            "description": "Number of seconds to poll the server for report availability",
            "type": "integer"
          },
          "minimumDateTimeForAnalyticsReport": {
            "format": "date-time",
            "description": "Date-Time since the Analytics Reports can be downloaded",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.TranslationCount": {
        "description": "A model that contains the count value of a translation count and relevant metadata.",
        "type": "object",
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "translationStatus": {
            "description": "The enum representing a translation status. ['Approved' = 0]",
            "enum": ["Approved"],
            "type": "string"
          },
          "translatorType": {
            "description": "Gets or sets the type of the translator associated with the count, or `null` if the count is not associated with a specific type of translator.",
            "enum": ["Automation", "User"],
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.TranslationCountCategoryInfoResponse": {
        "description": "A response model that contains category info for getting a translation count.",
        "type": "object",
        "properties": {
          "category": {
            "description": "The category of the translation counts. ['InGameContent' = 0]",
            "enum": ["InGameContent"],
            "type": "string"
          },
          "translationCounts": {
            "description": "The translation counts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationCount"
            }
          },
          "totalTranslatableItemCount": {
            "format": "int32",
            "description": "The total number of translatable items.\r\nThe translation count percentage can be calculated by doing translationCounts / totalTranslatableItemCount.",
            "type": "integer"
          }
        }
      },
      "Roblox.GameInternationalization.Api.TranslationCountGameInfoResponse": {
        "description": "A response model that contains game info for getting a translation count.",
        "type": "object",
        "properties": {
          "gameId": {
            "format": "int64",
            "description": "The game id.",
            "type": "integer"
          },
          "status": {
            "description": "The status of the response for the requested game. ['LanguageOrLocaleSupportedForGame' = 0, 'LanguageOrLocaleNotSupportedForGame' = 1, 'LanguageOrLocaleIsSource' = 2, 'InsufficientPermission' = 3, 'GameDoesNotExist' = 4, 'GameDoesNotHaveTable' = 5, 'UnknownError' = 6]",
            "enum": [
              "LanguageOrLocaleSupportedForGame",
              "LanguageOrLocaleNotSupportedForGame",
              "LanguageOrLocaleIsSource",
              "InsufficientPermission",
              "GameDoesNotExist",
              "GameDoesNotHaveTable",
              "UnknownError"
            ],
            "type": "string"
          },
          "categories": {
            "description": "Categories of translation counts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationCountCategoryInfoResponse"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.TranslationCountLanguageOrLocaleResponse": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The status of the response for the requested game. ['Success' = 1, 'LanguageOrLocaleNotSupportedForGame' = 2]",
            "enum": ["Success", "LanguageOrLocaleNotSupportedForGame"],
            "type": "string"
          },
          "categories": {
            "description": "Categories of translation counts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.TranslationCountCategoryInfoResponse"
            }
          },
          "name": {
            "type": "string"
          },
          "languageCodeType": {
            "description": "An enum to distinguish between locale codes and language codes. ['Language' = 0, 'Locale' = 1]",
            "enum": ["Language", "Locale"],
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.TranslationHistory": {
        "description": "A model containing a translation, translator, and translation time.",
        "type": "object",
        "properties": {
          "translationText": {
            "description": "The translation provided by the translator.",
            "type": "string"
          },
          "translator": {
            "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.Translator"
          },
          "created": {
            "format": "date-time",
            "description": "The time the translation was provided.",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.Translator": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "agentType": {
            "description": " ['User' = 0, 'Automation' = 1]",
            "enum": ["User", "Automation"],
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UniverseDisplayInfoAutomaticTranslationSettings": {
        "type": "object",
        "properties": {
          "languageCode": {
            "description": "The language code.",
            "type": "string"
          },
          "isUniverseDisplayInfoAutomaticTranslationEnabled": {
            "description": "Indicates whether or not automatic translation is currently enabled for Game and Place Information for a game and language.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateBadgeDescriptionRequest": {
        "description": "A request model for updating badge description",
        "type": "object",
        "properties": {
          "description": {
            "description": "Badge description",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateBadgeDescriptionResponse": {
        "description": "A response model for updating badge description",
        "type": "object",
        "properties": {
          "description": {
            "description": "Badge description saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionRequest": {
        "description": "A request model for updating badge name and description",
        "type": "object",
        "properties": {
          "name": {
            "description": "Badge name",
            "type": "string"
          },
          "description": {
            "description": "Badge description",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateBadgeNameDescriptionResponse": {
        "description": "A response model for updating badge name and description",
        "type": "object",
        "properties": {
          "name": {
            "description": "Badge name saved",
            "type": "string"
          },
          "description": {
            "description": "Badge description saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateBadgeNameRequest": {
        "description": "A request model for updating badge name",
        "type": "object",
        "properties": {
          "name": {
            "description": "Badge name",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateBadgeNameResponse": {
        "description": "A response model for updating badge name",
        "type": "object",
        "properties": {
          "name": {
            "description": "Badge name saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionRequest": {
        "description": "A request model for updating developer product description",
        "type": "object",
        "properties": {
          "description": {
            "description": "Developer product description",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateDeveloperProductDescriptionResponse": {
        "description": "A response model for updating developer product description",
        "type": "object",
        "properties": {
          "description": {
            "description": "Developer product description saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionRequest": {
        "description": "A request model for updating developer product name and description",
        "type": "object",
        "properties": {
          "name": {
            "description": "Developer product name",
            "type": "string"
          },
          "description": {
            "description": "Developer product description",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateDeveloperProductNameDescriptionResponse": {
        "description": "A response model for updating developer product name and description",
        "type": "object",
        "properties": {
          "name": {
            "description": "Developer product name saved",
            "type": "string"
          },
          "description": {
            "description": "Developer product description saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateDeveloperProductNameRequest": {
        "description": "A request model for updating developer product name",
        "type": "object",
        "properties": {
          "name": {
            "description": "Developer product name",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateDeveloperProductNameResponse": {
        "description": "A response model for updating developer product name",
        "type": "object",
        "properties": {
          "name": {
            "description": "Developer product name saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateGamePassDescriptionRequest": {
        "description": "A request model for updating game pass description",
        "type": "object",
        "properties": {
          "description": {
            "description": "Game pass description",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateGamePassDescriptionResponse": {
        "description": "A response model for updating game pass description",
        "type": "object",
        "properties": {
          "description": {
            "description": "Game pass description saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionRequest": {
        "description": "A request model for updating game pass name and description",
        "type": "object",
        "properties": {
          "name": {
            "description": "Game pass name",
            "type": "string"
          },
          "description": {
            "description": "Game pass description",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateGamePassNameDescriptionResponse": {
        "description": "A response model for updating game pass name and description",
        "type": "object",
        "properties": {
          "name": {
            "description": "Game pass name saved",
            "type": "string"
          },
          "description": {
            "description": "Game pass description saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateGamePassNameRequest": {
        "description": "A request model for updating game pass name",
        "type": "object",
        "properties": {
          "name": {
            "description": "Game pass name",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateGamePassNameResponse": {
        "description": "A response model for updating game pass name",
        "type": "object",
        "properties": {
          "name": {
            "description": "Game pass name saved",
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateNameDescriptionsRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.NameDescription"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateNameDescriptionsResponse": {
        "type": "object",
        "properties": {
          "successOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.NameDescription"
            }
          },
          "failedOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.FailedNameDescription"
            }
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateThumbnailAltTextRequest": {
        "type": "object",
        "properties": {
          "thumbnailId": {
            "format": "int64",
            "type": "integer"
          },
          "altText": {
            "type": "string"
          }
        }
      },
      "Roblox.GameInternationalization.Api.UpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse": {
        "description": "A response model for getting the automatic translation allowed status for game information.",
        "type": "object",
        "properties": {
          "gameId": {
            "format": "int64",
            "description": "The game id.",
            "type": "integer"
          },
          "languageCode": {
            "description": "The language code.",
            "type": "string"
          },
          "isUniverseDisplayInfoAutomaticTranslationEnabled": {
            "description": "Indicates universeDisplayInformation automatic translation is enabled.",
            "type": "boolean"
          }
        }
      },
      "Roblox.GameLocalization.Client.UserUniverseLocalizationSettingValue": {
        "type": "object",
        "properties": {
          "settingType": {
            "description": " ['LanguageFamily' = 0, 'SupportedLocale' = 1, 'SourceOrTranslation' = 2]",
            "enum": [
              "LanguageFamily",
              "SupportedLocale",
              "SourceOrTranslation"
            ],
            "type": "string"
          },
          "settingTargetId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetBadgeIconResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetBadgeIconResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetDeveloperProductIconResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetDeveloperProductIconResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameIconResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetGameIconResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGamePassIconResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetGamePassIconResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.GetGameThumbnailsResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.GetGameThumbnailsResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocaleSettings_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.LanguageOrLocaleSettings"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.LanguageOrLocale_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.LanguageOrLocale"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.NameDescription_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.NameDescription"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.GameInternationalization.Api.UniverseDisplayInfoAutomaticTranslationSettings_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameInternationalization.Api.UniverseDisplayInfoAutomaticTranslationSettings"
            }
          }
        }
      },
      "Roblox.GameJoin.Api.GameJoinRequest": {
        "description": "Request model for game join.",
        "type": "object",
        "properties": {
          "isoContext": {
            "description": "Internal usage only field for some request context.",
            "type": "string"
          },
          "gameIdToExclude": {
            "format": "uuid",
            "description": "For switch server requests, GameIdToExclude is the game id of the server that the user is currently in.",
            "type": "string"
          },
          "eventId": {
            "description": "See \"Points of Interest\" project. A string that the developer has mapped to a special piece in their experience",
            "type": "string"
          },
          "gameJoinAttemptId": {
            "format": "uuid",
            "description": "The GameJoin Attempt Id for this game join request",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "The Place Id for the game join request",
            "type": "integer"
          },
          "gamerTag": {
            "description": "The gamerTag, if any, for the game join request",
            "type": "string"
          },
          "isPlayTogetherGame": {
            "description": "Boolean representing whether this is a PlayTogether game",
            "type": "boolean"
          },
          "browserTrackerId": {
            "format": "int64",
            "description": "The integer representing browserTrackerId",
            "type": "integer"
          },
          "isTeleport": {
            "description": "Is this a teleport request",
            "type": "boolean"
          },
          "isQueueAllowedOverride": {
            "description": "Whether or not the game full join queue is used depends on the API and whether the join is a teleport.\r\nThis optional override allows the Client to specify if it wants to queue when joining full games",
            "type": "boolean"
          },
          "isImmersiveAdsTeleport": {
            "description": "Is this an Immersive Ads Teleport request.",
            "type": "boolean"
          },
          "channelName": {
            "description": "String representing channel name in RCC Channel 2.0.\r\nNote: Only internal users (email address ending in roblox.com and verified) can use this feature.\r\nFor other users, this field should be null, otherwise the request will be rejected.",
            "type": "string"
          },
          "joinOrigin": {
            "description": "The JoinOrigin of a gamejoin request, as propagated from the game client.",
            "type": "string"
          },
          "partyId": {
            "format": "uuid",
            "description": "The ID of the player's current party, if any",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.GameJoinResponse": {
        "description": "Response model for a game join request",
        "type": "object",
        "properties": {
          "jobId": {
            "description": "The job id string",
            "type": "string"
          },
          "status": {
            "format": "int32",
            "description": "The integer status code",
            "type": "integer"
          },
          "statusData": {
            "$ref": "#/components/schemas/Roblox.Web.GameJoin.StatusData"
          },
          "joinScriptUrl": {
            "description": "The URL to get the join 'script' from\r\nset when status == 2 (Joining)",
            "type": "string"
          },
          "authenticationUrl": {
            "description": "The authentication URL",
            "type": "string"
          },
          "authenticationTicket": {
            "description": "The authentication ticket",
            "type": "string"
          },
          "message": {
            "description": "The string message to provide additional details on status code",
            "type": "string"
          },
          "joinScript": {
            "$ref": "#/components/schemas/Roblox.Web.GameJoin.ConnectionFlow.JoinInformation"
          },
          "queuePosition": {
            "format": "int32",
            "description": "The player's current position in the join queue. Only used when trying to join full servers. 0 if not queued",
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.JoinGameInstanceRequest": {
        "description": "Request model for join game instance.",
        "type": "object",
        "properties": {
          "gameId": {
            "format": "uuid",
            "description": "The Guid representing the game instance",
            "type": "string"
          },
          "cId": {
            "type": "string"
          },
          "gameJoinAttemptId": {
            "format": "uuid",
            "description": "The GameJoin Attempt Id for this game join request",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "The Place Id for the game join request",
            "type": "integer"
          },
          "gamerTag": {
            "description": "The gamerTag, if any, for the game join request",
            "type": "string"
          },
          "isPlayTogetherGame": {
            "description": "Boolean representing whether this is a PlayTogether game",
            "type": "boolean"
          },
          "browserTrackerId": {
            "format": "int64",
            "description": "The integer representing browserTrackerId",
            "type": "integer"
          },
          "isTeleport": {
            "description": "Is this a teleport request",
            "type": "boolean"
          },
          "isQueueAllowedOverride": {
            "description": "Whether or not the game full join queue is used depends on the API and whether the join is a teleport.\r\nThis optional override allows the Client to specify if it wants to queue when joining full games",
            "type": "boolean"
          },
          "isImmersiveAdsTeleport": {
            "description": "Is this an Immersive Ads Teleport request.",
            "type": "boolean"
          },
          "channelName": {
            "description": "String representing channel name in RCC Channel 2.0.\r\nNote: Only internal users (email address ending in roblox.com and verified) can use this feature.\r\nFor other users, this field should be null, otherwise the request will be rejected.",
            "type": "string"
          },
          "joinOrigin": {
            "description": "The JoinOrigin of a gamejoin request, as propagated from the game client.",
            "type": "string"
          },
          "partyId": {
            "format": "uuid",
            "description": "The ID of the player's current party, if any",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.JoinPlayTogetherGameRequest": {
        "description": "Request model for join game instance.",
        "type": "object",
        "properties": {
          "conversationId": {
            "format": "int64",
            "description": "conversation id for requesting play together game",
            "type": "integer"
          },
          "gameJoinAttemptId": {
            "format": "uuid",
            "description": "The GameJoin Attempt Id for this game join request",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "The Place Id for the game join request",
            "type": "integer"
          },
          "gamerTag": {
            "description": "The gamerTag, if any, for the game join request",
            "type": "string"
          },
          "isPlayTogetherGame": {
            "description": "Boolean representing whether this is a PlayTogether game",
            "type": "boolean"
          },
          "browserTrackerId": {
            "format": "int64",
            "description": "The integer representing browserTrackerId",
            "type": "integer"
          },
          "isTeleport": {
            "description": "Is this a teleport request",
            "type": "boolean"
          },
          "isQueueAllowedOverride": {
            "description": "Whether or not the game full join queue is used depends on the API and whether the join is a teleport.\r\nThis optional override allows the Client to specify if it wants to queue when joining full games",
            "type": "boolean"
          },
          "isImmersiveAdsTeleport": {
            "description": "Is this an Immersive Ads Teleport request.",
            "type": "boolean"
          },
          "channelName": {
            "description": "String representing channel name in RCC Channel 2.0.\r\nNote: Only internal users (email address ending in roblox.com and verified) can use this feature.\r\nFor other users, this field should be null, otherwise the request will be rejected.",
            "type": "string"
          },
          "joinOrigin": {
            "description": "The JoinOrigin of a gamejoin request, as propagated from the game client.",
            "type": "string"
          },
          "partyId": {
            "format": "uuid",
            "description": "The ID of the player's current party, if any",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.JoinPrivateGameRequest": {
        "description": "Request model for join private game .",
        "type": "object",
        "properties": {
          "accessCode": {
            "description": "access code for join private game request",
            "type": "string"
          },
          "linkCode": {
            "description": "link code for join private game request",
            "type": "string"
          },
          "gameJoinAttemptId": {
            "format": "uuid",
            "description": "The GameJoin Attempt Id for this game join request",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "The Place Id for the game join request",
            "type": "integer"
          },
          "gamerTag": {
            "description": "The gamerTag, if any, for the game join request",
            "type": "string"
          },
          "isPlayTogetherGame": {
            "description": "Boolean representing whether this is a PlayTogether game",
            "type": "boolean"
          },
          "browserTrackerId": {
            "format": "int64",
            "description": "The integer representing browserTrackerId",
            "type": "integer"
          },
          "isTeleport": {
            "description": "Is this a teleport request",
            "type": "boolean"
          },
          "isQueueAllowedOverride": {
            "description": "Whether or not the game full join queue is used depends on the API and whether the join is a teleport.\r\nThis optional override allows the Client to specify if it wants to queue when joining full games",
            "type": "boolean"
          },
          "isImmersiveAdsTeleport": {
            "description": "Is this an Immersive Ads Teleport request.",
            "type": "boolean"
          },
          "channelName": {
            "description": "String representing channel name in RCC Channel 2.0.\r\nNote: Only internal users (email address ending in roblox.com and verified) can use this feature.\r\nFor other users, this field should be null, otherwise the request will be rejected.",
            "type": "string"
          },
          "joinOrigin": {
            "description": "The JoinOrigin of a gamejoin request, as propagated from the game client.",
            "type": "string"
          },
          "partyId": {
            "format": "uuid",
            "description": "The ID of the player's current party, if any",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.JoinReservedGameRequest": {
        "description": "Request model for join private game .",
        "type": "object",
        "properties": {
          "accessCode": {
            "description": "access code for join private game request",
            "type": "string"
          },
          "cId": {
            "type": "string"
          },
          "gameJoinAttemptId": {
            "format": "uuid",
            "description": "The GameJoin Attempt Id for this game join request",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "The Place Id for the game join request",
            "type": "integer"
          },
          "gamerTag": {
            "description": "The gamerTag, if any, for the game join request",
            "type": "string"
          },
          "isPlayTogetherGame": {
            "description": "Boolean representing whether this is a PlayTogether game",
            "type": "boolean"
          },
          "browserTrackerId": {
            "format": "int64",
            "description": "The integer representing browserTrackerId",
            "type": "integer"
          },
          "isTeleport": {
            "description": "Is this a teleport request",
            "type": "boolean"
          },
          "isQueueAllowedOverride": {
            "description": "Whether or not the game full join queue is used depends on the API and whether the join is a teleport.\r\nThis optional override allows the Client to specify if it wants to queue when joining full games",
            "type": "boolean"
          },
          "isImmersiveAdsTeleport": {
            "description": "Is this an Immersive Ads Teleport request.",
            "type": "boolean"
          },
          "channelName": {
            "description": "String representing channel name in RCC Channel 2.0.\r\nNote: Only internal users (email address ending in roblox.com and verified) can use this feature.\r\nFor other users, this field should be null, otherwise the request will be rejected.",
            "type": "string"
          },
          "joinOrigin": {
            "description": "The JoinOrigin of a gamejoin request, as propagated from the game client.",
            "type": "string"
          },
          "partyId": {
            "format": "uuid",
            "description": "The ID of the player's current party, if any",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.PlayWithUserRequest": {
        "description": "Request model for join private game .",
        "type": "object",
        "properties": {
          "userIdToFollow": {
            "format": "int64",
            "description": "User Id for join private game request",
            "type": "integer"
          },
          "gameJoinAttemptId": {
            "format": "uuid",
            "description": "The GameJoin Attempt Id for this game join request",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "The Place Id for the game join request",
            "type": "integer"
          },
          "gamerTag": {
            "description": "The gamerTag, if any, for the game join request",
            "type": "string"
          },
          "isPlayTogetherGame": {
            "description": "Boolean representing whether this is a PlayTogether game",
            "type": "boolean"
          },
          "browserTrackerId": {
            "format": "int64",
            "description": "The integer representing browserTrackerId",
            "type": "integer"
          },
          "isTeleport": {
            "description": "Is this a teleport request",
            "type": "boolean"
          },
          "isQueueAllowedOverride": {
            "description": "Whether or not the game full join queue is used depends on the API and whether the join is a teleport.\r\nThis optional override allows the Client to specify if it wants to queue when joining full games",
            "type": "boolean"
          },
          "isImmersiveAdsTeleport": {
            "description": "Is this an Immersive Ads Teleport request.",
            "type": "boolean"
          },
          "channelName": {
            "description": "String representing channel name in RCC Channel 2.0.\r\nNote: Only internal users (email address ending in roblox.com and verified) can use this feature.\r\nFor other users, this field should be null, otherwise the request will be rejected.",
            "type": "string"
          },
          "joinOrigin": {
            "description": "The JoinOrigin of a gamejoin request, as propagated from the game client.",
            "type": "string"
          },
          "partyId": {
            "format": "uuid",
            "description": "The ID of the player's current party, if any",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.TeamCreateRequest": {
        "description": "Request model for create team .",
        "type": "object",
        "properties": {
          "gameJoinAttemptId": {
            "format": "uuid",
            "description": "The GameJoin Attempt Id for this game join request",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "The Place Id for the game join request",
            "type": "integer"
          },
          "gamerTag": {
            "description": "The gamerTag, if any, for the game join request",
            "type": "string"
          },
          "isPlayTogetherGame": {
            "description": "Boolean representing whether this is a PlayTogether game",
            "type": "boolean"
          },
          "browserTrackerId": {
            "format": "int64",
            "description": "The integer representing browserTrackerId",
            "type": "integer"
          },
          "isTeleport": {
            "description": "Is this a teleport request",
            "type": "boolean"
          },
          "isQueueAllowedOverride": {
            "description": "Whether or not the game full join queue is used depends on the API and whether the join is a teleport.\r\nThis optional override allows the Client to specify if it wants to queue when joining full games",
            "type": "boolean"
          },
          "isImmersiveAdsTeleport": {
            "description": "Is this an Immersive Ads Teleport request.",
            "type": "boolean"
          },
          "channelName": {
            "description": "String representing channel name in RCC Channel 2.0.\r\nNote: Only internal users (email address ending in roblox.com and verified) can use this feature.\r\nFor other users, this field should be null, otherwise the request will be rejected.",
            "type": "string"
          },
          "joinOrigin": {
            "description": "The JoinOrigin of a gamejoin request, as propagated from the game client.",
            "type": "string"
          },
          "partyId": {
            "format": "uuid",
            "description": "The ID of the player's current party, if any",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Roblox.GameJoin.Api.TeamCreateResponse": {
        "description": "Response model for a create team request",
        "type": "object",
        "properties": {
          "status": {
            "format": "int32",
            "description": "The integer status code",
            "type": "integer"
          },
          "message": {
            "description": "The string message to provide additional details on status code",
            "type": "string"
          },
          "settings": {
            "description": "settings"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.GameJoin.ConnectionFlow.JoinInformation": {
        "type": "object",
        "properties": {
          "ClientPort": {
            "format": "int32",
            "type": "integer"
          },
          "MachineAddress": {
            "type": "string"
          },
          "ServerPort": {
            "format": "int32",
            "type": "integer"
          },
          "ServerConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.GameJoin.ConnectionFlow.ServerConnection"
            }
          },
          "UdmuxEndpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.GameJoin.ConnectionFlow.UdmuxEndpoint"
            }
          },
          "DirectServerReturn": {
            "type": "boolean"
          },
          "TokenGenAlgorithm": {
            "format": "int32",
            "type": "integer"
          },
          "PepperId": {
            "format": "int32",
            "type": "integer"
          },
          "TokenValue": {
            "type": "string"
          },
          "PingUrl": {
            "type": "string"
          },
          "PingInterval": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "HasVerifiedBadge": {
            "type": "boolean"
          },
          "SeleniumTestMode": {
            "type": "boolean"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          },
          "RobloxLocale": {
            "type": "string"
          },
          "GameLocale": {
            "type": "string"
          },
          "SuperSafeChat": {
            "type": "boolean"
          },
          "FlexibleChatEnabled": {
            "type": "boolean"
          },
          "CharacterAppearance": {
            "type": "string"
          },
          "ClientTicket": {
            "type": "string"
          },
          "GameId": {
            "type": "string"
          },
          "PlaceId": {
            "format": "int64",
            "type": "integer"
          },
          "BaseUrl": {
            "type": "string"
          },
          "ChatStyle": {
            "type": "string"
          },
          "CreatorId": {
            "format": "int64",
            "type": "integer"
          },
          "CreatorTypeEnum": {
            "type": "string"
          },
          "MembershipType": {
            "type": "string"
          },
          "AccountAge": {
            "format": "int32",
            "type": "integer"
          },
          "CookieStoreFirstTimePlayKey": {
            "type": "string"
          },
          "CookieStoreFiveMinutePlayKey": {
            "type": "string"
          },
          "CookieStoreEnabled": {
            "type": "boolean"
          },
          "IsUnknownOrUnder13": {
            "type": "boolean"
          },
          "GameChatType": {
            "type": "string"
          },
          "WhoCanWhisperChatWithMeInExperiences": {
            "type": "string"
          },
          "SessionId": {
            "type": "string"
          },
          "AnalyticsSessionId": {
            "type": "string"
          },
          "DataCenterId": {
            "format": "int32",
            "type": "integer"
          },
          "UniverseId": {
            "format": "int64",
            "type": "integer"
          },
          "FollowUserId": {
            "format": "int64",
            "type": "integer"
          },
          "characterAppearanceId": {
            "format": "int64",
            "type": "integer"
          },
          "CountryCode": {
            "type": "string"
          },
          "AlternateName": {
            "type": "string"
          },
          "RandomSeed1": {
            "format": "byte",
            "type": "string"
          },
          "ClientPublicKeyData": {
            "type": "string"
          },
          "RccVersion": {
            "type": "string"
          },
          "ChannelName": {
            "type": "string"
          },
          "VerifiedAMP": {
            "format": "int32",
            "type": "integer"
          },
          "PrivateServerOwnerID": {
            "format": "int64",
            "type": "integer"
          },
          "PrivateServerID": {
            "type": "string"
          },
          "EventId": {
            "type": "string"
          },
          "EphemeralEarlyPubKey": {
            "type": "string"
          },
          "PartyId": {
            "type": "string"
          },
          "ShowRobloxTranslations": {
            "type": "boolean"
          },
          "MatchmakingAttributes": {
            "type": "string"
          },
          "TranslationDisplayMode": {
            "type": "string"
          },
          "PlaceVersion": {
            "format": "int32",
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.GameJoin.ConnectionFlow.ServerConnection": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string"
          },
          "Port": {
            "format": "int32",
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.GameJoin.ConnectionFlow.UdmuxEndpoint": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string"
          },
          "Port": {
            "format": "int32",
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.GameJoin.StatusData": {
        "type": "object",
        "properties": {
          "creatorExperienceBan": {
            "$ref": "#/components/schemas/Roblox.Web.GameJoin.StatusData.CreatorExperienceBanData"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.GameJoin.StatusData.CreatorExperienceBanData": {
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "durationSeconds": {
            "format": "int64",
            "type": "integer"
          },
          "displayReason": {
            "type": "string"
          },
          "displayReasonTextFilterStatus": {
            "format": "int32",
            "type": "integer"
          },
          "isInherited": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Roblox.Web.Responses.Games.GameFavoriteResponseModel": {
        "description": "Response model representing a user's favorited game.",
        "type": "object",
        "properties": {
          "price": {
            "format": "int64",
            "description": "The game paid access price in robux.\r\nGiven that there is no actual owner for this product surface,\r\nwe will keep existing behavior where we display offsale for games priced in fiat currency.",
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "description": "The game (universe) Id.",
            "type": "integer"
          },
          "name": {
            "description": "The game name.",
            "type": "string"
          },
          "description": {
            "description": "The game description.",
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Core.CreatorType_"
          },
          "rootPlace": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Assets.AssetType_"
          },
          "created": {
            "format": "date-time",
            "description": "When the game was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the game was last updated.",
            "type": "string"
          },
          "placeVisits": {
            "format": "int64",
            "description": "The number of place visits for this game.",
            "type": "integer"
          }
        }
      },
      "Roblox.Web.Responses.Games.GameMediaItemResponseV2": {
        "description": "Response model for getting the game media item",
        "type": "object",
        "properties": {
          "assetTypeId": {
            "format": "int64",
            "description": "The media item type id",
            "type": "integer"
          },
          "assetType": {
            "description": "The media item type, Image or YouTubeVideo",
            "type": "string"
          },
          "imageId": {
            "format": "int64",
            "description": "The media item image id",
            "type": "integer"
          },
          "videoHash": {
            "description": "The media item video hash",
            "type": "string"
          },
          "videoTitle": {
            "description": "The video title for video items.",
            "type": "string"
          },
          "approved": {
            "description": "The media item is approved or not",
            "type": "boolean"
          },
          "altText": {
            "description": "The media item alt text",
            "type": "string"
          },
          "videoId": {
            "description": "The video asset ID",
            "type": "string"
          }
        }
      },
      "Roblox.Web.Responses.Games.GameResponseV2": {
        "description": "A response model representing a game.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The game (universe) Id.",
            "type": "integer"
          },
          "name": {
            "description": "The game name.",
            "type": "string"
          },
          "description": {
            "description": "The game description.",
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Core.CreatorType_"
          },
          "rootPlace": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Assets.AssetType_"
          },
          "created": {
            "format": "date-time",
            "description": "When the game was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the game was last updated.",
            "type": "string"
          },
          "placeVisits": {
            "format": "int64",
            "description": "The number of place visits for this game.",
            "type": "integer"
          }
        }
      },
      "Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Assets.AssetType_": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "description": " ['Image' = 1, 'TShirt' = 2, 'Audio' = 3, 'Mesh' = 4, 'Lua' = 5, 'HTML' = 6, 'Text' = 7, 'Hat' = 8, 'Place' = 9, 'Model' = 10, 'Shirt' = 11, 'Pants' = 12, 'Decal' = 13, 'Avatar' = 16, 'Head' = 17, 'Face' = 18, 'Gear' = 19, 'Badge' = 21, 'GroupEmblem' = 22, 'Animation' = 24, 'Arms' = 25, 'Legs' = 26, 'Torso' = 27, 'RightArm' = 28, 'LeftArm' = 29, 'LeftLeg' = 30, 'RightLeg' = 31, 'Package' = 32, 'YouTubeVideo' = 33, 'GamePass' = 34, 'App' = 35, 'Code' = 37, 'Plugin' = 38, 'SolidModel' = 39, 'MeshPart' = 40, 'HairAccessory' = 41, 'FaceAccessory' = 42, 'NeckAccessory' = 43, 'ShoulderAccessory' = 44, 'FrontAccessory' = 45, 'BackAccessory' = 46, 'WaistAccessory' = 47, 'ClimbAnimation' = 48, 'DeathAnimation' = 49, 'FallAnimation' = 50, 'IdleAnimation' = 51, 'JumpAnimation' = 52, 'RunAnimation' = 53, 'SwimAnimation' = 54, 'WalkAnimation' = 55, 'PoseAnimation' = 56, 'LocalizationTableManifest' = 59, 'LocalizationTableTranslation' = 60, 'EmoteAnimation' = 61, 'Video' = 62, 'TexturePack' = 63, 'TShirtAccessory' = 64, 'ShirtAccessory' = 65, 'PantsAccessory' = 66, 'JacketAccessory' = 67, 'SweaterAccessory' = 68, 'ShortsAccessory' = 69, 'LeftShoeAccessory' = 70, 'RightShoeAccessory' = 71, 'DressSkirtAccessory' = 72, 'FontFamily' = 73, 'FontFace' = 74, 'MeshHiddenSurfaceRemoval' = 75, 'EyebrowAccessory' = 76, 'EyelashAccessory' = 77, 'MoodAnimation' = 78, 'DynamicHead' = 79, 'CodeSnippet' = 80, 'AdsVideo' = 81, 'OtaUpdate' = 82, 'Screenshot' = 83, 'RuntimePropertySet' = 84, 'StorePreviewVideo' = 85, 'GamePreviewVideo' = 86, 'CreatorExperienceConfig' = 87]",
            "enum": [
              1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22,
              24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40,
              41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
              59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
              75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87
            ],
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Platform.Core.CreatorType_": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "description": " ['User' = 0, 'Group' = 1]",
            "enum": [0, 1],
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Games.GameMediaItemResponseV2_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameMediaItemResponseV2"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameFavoriteResponseModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameFavoriteResponseModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameResponseV2_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameResponseV2"
            }
          }
        }
      },
      "Roblox.Games.Api.CreateVipServersRequest": {
        "description": "An create request for a vip server",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name new vip server will be",
            "type": "string"
          },
          "expectedPrice": {
            "format": "int64",
            "description": "the expected price of the vip server",
            "type": "integer"
          },
          "isPurchaseConfirmed": {
            "description": "Optional bool to confirm intention to purchase multiple private servers in quick succession.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.GameResponse": {
        "description": "Response model for a VIP server game.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "Game id",
            "type": "integer"
          },
          "name": {
            "description": "Game name",
            "type": "string"
          },
          "rootPlace": {
            "$ref": "#/components/schemas/Roblox.Games.Api.PlaceResponse"
          }
        }
      },
      "Roblox.Games.Api.GameServerPlayerResponse": {
        "description": "A response model representing a game server player.",
        "type": "object",
        "properties": {
          "playerToken": {
            "description": "The thumbnail token for the player.",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Request.GameFavoritesRequest": {
        "description": "Game favorite request model.",
        "type": "object",
        "properties": {
          "isFavorited": {
            "description": "true for favor the game, false for unfavor the game.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.Models.Request.SetUserGameVoteRequest": {
        "description": "A request for set user's vote for a game",
        "type": "object",
        "properties": {
          "vote": {
            "description": "The vote to set",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameCreator": {
        "description": "Response model for getting the game creator",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The game creator id",
            "type": "integer"
          },
          "name": {
            "description": "The game creator name",
            "type": "string"
          },
          "type": {
            "description": "The game creator type",
            "type": "string"
          },
          "isRNVAccount": {
            "description": "The game creator account is Luobu Real Name Verified",
            "type": "boolean"
          },
          "hasVerifiedBadge": {
            "description": "Builder verified badge status.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameDetailResponse": {
        "description": "Response model for getting the game detail",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The game universe id",
            "type": "integer"
          },
          "rootPlaceId": {
            "format": "int64",
            "description": "The game root place id",
            "type": "integer"
          },
          "name": {
            "description": "The game name",
            "type": "string"
          },
          "description": {
            "description": "The game description",
            "type": "string"
          },
          "sourceName": {
            "description": "The game name in the source language, if different from the returned name.",
            "type": "string"
          },
          "sourceDescription": {
            "description": "The game description in the source language, if different from the returned description.",
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameCreator"
          },
          "price": {
            "format": "int64",
            "description": "The game paid access price",
            "type": "integer"
          },
          "allowedGearGenres": {
            "description": "The game allowed gear genres",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedGearCategories": {
            "description": "The game allowed gear categoris",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isGenreEnforced": {
            "description": "The game must specify a genre",
            "type": "boolean"
          },
          "copyingAllowed": {
            "description": "The game allows place to be copied",
            "type": "boolean"
          },
          "playing": {
            "format": "int64",
            "description": "Current player count of the game",
            "type": "integer"
          },
          "visits": {
            "format": "int64",
            "description": "The total visits to the game",
            "type": "integer"
          },
          "maxPlayers": {
            "format": "int32",
            "description": "The game max players",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The game created time",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The game updated time",
            "type": "string"
          },
          "studioAccessToApisAllowed": {
            "description": "The setting of IsStudioAccessToApisAllowed of the universe",
            "type": "boolean"
          },
          "createVipServersAllowed": {
            "description": "Gets or sets the flag to indicate whether the create vip servers button should be allowed in game details page",
            "type": "boolean"
          },
          "universeAvatarType": {
            "format": "int32",
            "description": "Avatar type. Possible values are MorphToR6, MorphToR15, and PlayerChoice",
            "enum": [1, 2, 3],
            "type": "integer"
          },
          "genre": {
            "description": "The game genre display name",
            "type": "string"
          },
          "genre_l1": {
            "description": "The game genre from experience-genres-service",
            "type": "string"
          },
          "genre_l2": {
            "description": "The game subgenre from experience-genres-service",
            "type": "string"
          },
          "isAllGenre": {
            "description": "Is this game all genre.",
            "type": "boolean"
          },
          "isFavoritedByUser": {
            "description": "Is this game favorited by user.",
            "type": "boolean"
          },
          "favoritedCount": {
            "format": "int64",
            "description": "Game number of favorites.",
            "type": "integer"
          },
          "licenseDescription": {
            "type": "string"
          },
          "refundLink": {
            "type": "string"
          },
          "localizedFiatPrice": {
            "type": "string"
          },
          "refundPolicy": {
            "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.RefundPolicy"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameFavoriteResponse": {
        "description": "Game favorite response model.",
        "type": "object",
        "properties": {
          "isFavorited": {
            "description": "Is it a favorite game.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameFavoritesCountResponse": {
        "description": "Response model for favorited game count.",
        "type": "object",
        "properties": {
          "favoritesCount": {
            "format": "int64",
            "description": "Favorites count.",
            "type": "integer"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameMediaItem": {
        "description": "Response model for getting the game media item",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The media item id.",
            "type": "integer"
          },
          "assetTypeId": {
            "format": "int64",
            "description": "The media item type id",
            "type": "integer"
          },
          "assetType": {
            "description": "The media item type, Image or YouTubeVideo",
            "type": "string"
          },
          "imageId": {
            "format": "int64",
            "description": "The media item image id",
            "type": "integer"
          },
          "videoHash": {
            "description": "The media item video hash",
            "type": "string"
          },
          "videoTitle": {
            "description": "The video title for video items.",
            "type": "string"
          },
          "approved": {
            "description": "The media item is approved or not",
            "type": "boolean"
          },
          "altText": {
            "description": "The media item's alt text",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GamePassResponse": {
        "description": "Response model for getting game passes",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The game pass id",
            "type": "integer"
          },
          "name": {
            "description": "The game pass name",
            "type": "string"
          },
          "displayName": {
            "description": "The game pass display name",
            "type": "string"
          },
          "productId": {
            "format": "int64",
            "description": "The game pass product id",
            "type": "integer"
          },
          "price": {
            "format": "int64",
            "description": "The game pass price",
            "type": "integer"
          },
          "sellerName": {
            "description": "The seller's display name",
            "type": "string"
          },
          "sellerId": {
            "format": "int64",
            "description": "The seller's ID",
            "type": "integer"
          },
          "isOwned": {
            "description": "Is an owned game pass",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameProductResponse": {
        "description": "Response model for getting the game product information",
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "description": "The game universe id",
            "type": "integer"
          },
          "isForSale": {
            "description": "The game purchasability",
            "type": "boolean"
          },
          "productId": {
            "format": "int64",
            "description": "The game product id",
            "type": "integer"
          },
          "price": {
            "format": "int64",
            "description": "The game price",
            "type": "integer"
          },
          "sellerId": {
            "format": "int64",
            "description": "The game seller id\r\nUser ID for users, Agent ID for groups",
            "type": "integer"
          },
          "fiatPurchaseData": {
            "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PurchaseData"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameRecommendationsResponse": {
        "description": "Game recommendations response model.",
        "type": "object",
        "properties": {
          "games": {
            "description": "The recommended games.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameResponseModel"
            }
          },
          "nextPaginationKey": {
            "description": "The pagination key for next page query.\r\nIt will be null if there is no more data.",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameResponseModel": {
        "description": "Response model for games.",
        "type": "object",
        "properties": {
          "creatorId": {
            "format": "int64",
            "description": "Creator Id",
            "type": "integer"
          },
          "creatorName": {
            "description": "Creator name",
            "type": "string"
          },
          "creatorType": {
            "description": "Creator type",
            "type": "string"
          },
          "creatorHasVerifiedBadge": {
            "description": "Creator verified badge status",
            "type": "boolean"
          },
          "totalUpVotes": {
            "format": "int64",
            "description": "Total up votes",
            "type": "integer"
          },
          "totalDownVotes": {
            "format": "int64",
            "description": "Total down votes",
            "type": "integer"
          },
          "universeId": {
            "format": "int64",
            "description": "Universe id",
            "type": "integer"
          },
          "name": {
            "description": "Game name",
            "type": "string"
          },
          "placeId": {
            "format": "int64",
            "description": "Place Id",
            "type": "integer"
          },
          "playerCount": {
            "format": "int32",
            "description": "Player count",
            "type": "integer"
          },
          "imageToken": {
            "description": "Place image token",
            "type": "string"
          },
          "isSponsored": {
            "description": "Is sponsored",
            "type": "boolean"
          },
          "nativeAdData": {
            "description": "Native ad data",
            "type": "string"
          },
          "isShowSponsoredLabel": {
            "description": "Show the sponsored label",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "The game paid access price",
            "type": "integer"
          },
          "analyticsIdentifier": {
            "description": "Provide all necessary information which helps analytics for improvement, for example, the algorithm, dataset version, position, etc..",
            "type": "string"
          },
          "gameDescription": {
            "description": "Provide all necessary information which helps analytics for improvement, for example, the algorithm, dataset version, position, etc..",
            "type": "string"
          },
          "genre": {
            "description": "The game genre display name",
            "type": "string"
          },
          "minimumAge": {
            "format": "int32",
            "description": "Age Recommendation minimum age.",
            "type": "integer"
          },
          "ageRecommendationDisplayName": {
            "description": "Age Recommendation display name.",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GameVoteResponse": {
        "description": "Response model for getting the game vote",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The game universe id",
            "type": "integer"
          },
          "upVotes": {
            "format": "int64",
            "description": "The game up votes",
            "type": "integer"
          },
          "downVotes": {
            "format": "int64",
            "description": "The game down votes",
            "type": "integer"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.GetPrivateServerListResponse": {
        "type": "object",
        "properties": {
          "gameJoinRestricted": {
            "type": "boolean"
          },
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse"
            }
          }
        }
      },
      "Roblox.Games.Api.Models.Response.MyPrivateServersData": {
        "description": "Data model for private server",
        "type": "object",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "universeId": {
            "format": "int64",
            "description": "The universe id of the private server.",
            "type": "integer"
          },
          "placeId": {
            "format": "int64",
            "description": "The place id of the private server.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the private server.",
            "type": "string"
          },
          "ownerId": {
            "format": "int64",
            "description": "The id of the owner of the private server",
            "type": "integer"
          },
          "ownerName": {
            "description": "The name of the owner of the private server",
            "type": "string"
          },
          "priceInRobux": {
            "format": "int64",
            "description": "The price of the private server product in robux",
            "type": "integer"
          },
          "privateServerId": {
            "format": "int64",
            "description": "Private Server Id.",
            "type": "integer"
          },
          "expirationDate": {
            "format": "date-time",
            "description": "Expiration date",
            "type": "string"
          },
          "willRenew": {
            "description": "Boolean. If true, the date is the renewal date, otherwise it’s the expiration date.",
            "type": "boolean"
          },
          "universeName": {
            "description": "universe name",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.MyPrivateServersResponse": {
        "description": "Response model for getting private servers",
        "type": "object",
        "properties": {
          "nextPageCursor": {
            "description": "The cursor to use for the next page of data.",
            "type": "string"
          },
          "previousPageCursor": {
            "description": "The cursor to use for the previous page of data.",
            "type": "string"
          },
          "data": {
            "description": "The data of the response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.MyPrivateServersData"
            }
          }
        }
      },
      "Roblox.Games.Api.Models.Response.PlaceDetails": {
        "description": "Response model for a place.",
        "type": "object",
        "properties": {
          "placeId": {
            "format": "int64",
            "description": "Place Id",
            "type": "integer"
          },
          "name": {
            "description": "Place name",
            "type": "string"
          },
          "description": {
            "description": "Place description",
            "type": "string"
          },
          "sourceName": {
            "description": "Place name in source language",
            "type": "string"
          },
          "sourceDescription": {
            "description": "Place description in source language",
            "type": "string"
          },
          "url": {
            "description": "Url",
            "type": "string"
          },
          "builder": {
            "description": "Creator name",
            "type": "string"
          },
          "builderId": {
            "format": "int64",
            "description": "Creator Id",
            "type": "integer"
          },
          "hasVerifiedBadge": {
            "description": "Builder verified badge status.",
            "type": "boolean"
          },
          "isPlayable": {
            "description": "Is playable",
            "type": "boolean"
          },
          "reasonProhibited": {
            "description": "Reason prohibited",
            "type": "string"
          },
          "universeId": {
            "format": "int64",
            "description": "Universe id",
            "type": "integer"
          },
          "universeRootPlaceId": {
            "format": "int64",
            "description": "UniverseRootPlaceId",
            "type": "integer"
          },
          "price": {
            "format": "int64",
            "description": "Price",
            "type": "integer"
          },
          "imageToken": {
            "description": "Place image token",
            "type": "string"
          },
          "fiatPurchaseData": {
            "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.PurchaseData"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.PlayabilityStatusResponse": {
        "description": "Response model for getting a universe's playability status for a user",
        "type": "object",
        "properties": {
          "playabilityStatus": {
            "format": "int32",
            "description": "The actual playability status of the universe including the reason if unplayable ['UnplayableOtherReason' = 0, 'Playable' = 1, 'GuestProhibited' = 2, 'GameUnapproved' = 3, 'IncorrectConfiguration' = 4, 'UniverseRootPlaceIsPrivate' = 5, 'InsufficientPermissionFriendsOnly' = 6, 'InsufficientPermissionGroupOnly' = 7, 'DeviceRestricted' = 8, 'UnderReview' = 9, 'PurchaseRequired' = 10, 'AccountRestricted' = 11, 'TemporarilyUnavailable' = 12, 'PlaceHasNoPublishedVersion' = 13, 'ComplianceBlocked' = 14, 'ContextualPlayabilityRegionalAvailability' = 15, 'ContextualPlayabilityRegionalCompliance' = 16, 'ContextualPlayabilityAgeRecommendationParentalControls' = 17, 'ContextualPlayabilityExperienceBlockedParentalControls' = 18, 'ContextualPlayabilityAgeGated' = 19, 'ContextualPlayabilityUnverifiedSeventeenPlusUser' = 20, 'FiatPurchaseRequired' = 21, 'FiatPurchaseDeviceRestricted' = 22, 'ContextualPlayabilityUnrated' = 23, 'ContextualPlayabilityAgeGatedByDescriptor' = 24, 'ContextualPlayabilityGeneral' = 25]",
            "enum": [
              0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
              19, 20, 21, 22, 23, 24, 25
            ],
            "type": "integer"
          },
          "isPlayable": {
            "description": "Whether or not the universe is playable for the user",
            "type": "boolean"
          },
          "universeId": {
            "format": "int64",
            "description": "The universeId of the requested universe to help with batching requests",
            "type": "integer"
          },
          "unplayableDisplayText": {
            "description": "Localized display text explaining why unplayable",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.PrivateServersEnabledInUniverseResponse": {
        "description": "Response model for getting whether a universe has private servers enabled.",
        "type": "object",
        "properties": {
          "privateServersEnabled": {
            "description": "Whether private servers are enabled in the universe.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.PurchaseData": {
        "type": "object",
        "properties": {
          "localizedFiatPrice": {
            "description": "Fiat purchase price in a localized string for display on client.",
            "type": "string"
          },
          "basePriceId": {
            "description": "ID of base price, needed by clients to prepare purchase url.",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.RefundPolicy": {
        "type": "object",
        "properties": {
          "policyText": {
            "description": "The display text with a placeholder for clients to inject a link, such as:\r\n  \"Learn more about policy xyz {linkStart}Learn More{linkEnd}\"",
            "type": "string"
          },
          "learnMoreBaseUrl": {
            "description": "The base URL that the client should redirect to.",
            "type": "string"
          },
          "locale": {
            "description": "The Roblox selected language locale that the user has presently selected.",
            "type": "string"
          },
          "articleId": {
            "description": "Zendesk (or similar forum provider) article ID for the client to build a redirect URL.",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.UserGameVoteResponse": {
        "description": "Response model for getting the user vote status for a game",
        "type": "object",
        "properties": {
          "canVote": {
            "description": "Whether the user can vote the game",
            "type": "boolean"
          },
          "userVote": {
            "description": "The user's vote status for the game",
            "type": "boolean"
          },
          "reasonForNotVoteable": {
            "description": "The reason why the user can't vote",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.Models.Response.VerifiedBadgeUserResponse": {
        "description": "A response model specific to multi-get user.",
        "type": "object",
        "properties": {
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.PlaceResponse": {
        "description": "Response model for a VIP server place",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "Place id",
            "type": "integer"
          },
          "name": {
            "description": "Place name",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.PrivateServersResponse": {
        "description": "User Presences Response model",
        "type": "object",
        "properties": {
          "privateServerResponses": {
            "description": "A collection of game server responses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse"
            }
          }
        }
      },
      "Roblox.Games.Api.VipServerCanInviteResponse": {
        "description": "Response model for VIP server can-invite user.",
        "type": "object",
        "properties": {
          "canInvite": {
            "description": "Sufficient permissions to invite user",
            "type": "boolean"
          },
          "doesOwnerPrivacyRestrictJoins": {
            "description": "Does owner privacy restrict joins",
            "type": "boolean"
          },
          "inviteResponseType": {
            "format": "int32",
            "description": "Invite response type ['Invalid' = 0, 'CanInvite' = 1, 'UnableToAddAnyUser' = 2, 'UnableToAddNonFriends' = 3, 'UnableToAddSpecificUser' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Games.Api.VipServerPermissionsResponse": {
        "description": "Response model for VIP server permissions.",
        "type": "object",
        "properties": {
          "clanAllowed": {
            "description": "Clan access",
            "type": "boolean"
          },
          "enemyClanId": {
            "format": "int64",
            "description": "EnemyClanId",
            "type": "integer"
          },
          "friendsAllowed": {
            "description": "Friend access",
            "type": "boolean"
          },
          "users": {
            "description": "Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse"
            }
          }
        }
      },
      "Roblox.Games.Api.VipServerResponse": {
        "description": "Response model for a VIP server.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "Server Id",
            "type": "integer"
          },
          "name": {
            "description": "Server name",
            "type": "string"
          },
          "game": {
            "$ref": "#/components/schemas/Roblox.Games.Api.GameResponse"
          },
          "joinCode": {
            "description": "Server join code",
            "type": "string"
          },
          "active": {
            "description": "Server status",
            "type": "boolean"
          },
          "subscription": {
            "$ref": "#/components/schemas/Roblox.Games.Api.VipServerSubscriptionResponse"
          },
          "permissions": {
            "$ref": "#/components/schemas/Roblox.Games.Api.VipServerPermissionsResponse"
          },
          "voiceSettings": {
            "$ref": "#/components/schemas/Roblox.Games.Api.VipServerVoiceSettingsResponse"
          },
          "link": {
            "description": "Private server link",
            "type": "string"
          }
        }
      },
      "Roblox.Games.Api.VipServerSubscriptionResponse": {
        "description": "Response model for VIP server subscription.",
        "type": "object",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "expired": {
            "description": "Expired",
            "type": "boolean"
          },
          "expirationDate": {
            "format": "date-time",
            "description": "Expiration date",
            "type": "string"
          },
          "price": {
            "format": "int64",
            "description": "Price",
            "type": "integer"
          },
          "canRenew": {
            "description": "Can renew a subscription",
            "type": "boolean"
          },
          "hasInsufficientFunds": {
            "description": "Subscription cancelled due to insufficient funds",
            "type": "boolean"
          },
          "hasRecurringProfile": {
            "description": "Subscription has a recurring profile",
            "type": "boolean"
          },
          "hasPriceChanged": {
            "description": "Subscriptions price has changed",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.VipServerUpdatePermissionsRequest": {
        "description": "Request model for updating permissions for a VIP server.",
        "type": "object",
        "properties": {
          "clanAllowed": {
            "description": "Clan access",
            "type": "boolean"
          },
          "enemyClanId": {
            "format": "int32",
            "description": "EnemyClanId",
            "type": "integer"
          },
          "friendsAllowed": {
            "description": "Friend access",
            "type": "boolean"
          },
          "usersToAdd": {
            "description": "Users to add",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "usersToRemove": {
            "description": "Users to remove",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Games.Api.VipServerUpdateRequest": {
        "description": "Request model to update a VIP server.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Server name",
            "type": "string"
          },
          "newJoinCode": {
            "description": "Server join code",
            "type": "boolean"
          },
          "active": {
            "description": "Server status",
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.VipServerUpdateSubscriptionRequest": {
        "description": "Request model to update subscriptions for a VIP server.",
        "type": "object",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "Price",
            "type": "integer"
          }
        }
      },
      "Roblox.Games.Api.VipServerUpdateVoiceSettingsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Games.Api.VipServerVoiceSettingsResponse": {
        "description": "Contains voice settings of a vip server",
        "type": "object",
        "properties": {
          "enabled": {
            "description": "Whether the voice chat is enabled",
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.Responses.Games.GameServerResponse": {
        "description": "Game server list response model.",
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "description": "The game server ID.",
            "type": "string"
          },
          "maxPlayers": {
            "format": "int32",
            "description": "The max number of players allowed to enter the server at the same time.",
            "type": "integer"
          },
          "playing": {
            "format": "int32",
            "description": "The number of players actively in the server.",
            "type": "integer"
          },
          "playerTokens": {
            "description": "The thumbnail tokens for all the players in the server.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "players": {
            "description": "The players in the server.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.GameServerPlayerResponse"
            }
          },
          "fps": {
            "format": "double",
            "description": "The current frames per second the server is running at.",
            "type": "number"
          },
          "ping": {
            "format": "int32",
            "description": "The game server ping time (measured in milliseconds).",
            "type": "integer"
          },
          "name": {
            "description": "The name of the private server.",
            "type": "string"
          },
          "vipServerId": {
            "format": "int64",
            "description": "The private server ID.",
            "type": "integer"
          },
          "accessCode": {
            "format": "uuid",
            "description": "The private server access code.",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.VerifiedBadgeUserResponse"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameDetailResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameDetailResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameMediaItem_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameMediaItem"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameProductResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameProductResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Games.Api.Models.Response.GameVoteResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GameVoteResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Games.Api.Models.Response.GamePassResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Games.Api.Models.Response.GamePassResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Web.Responses.Games.GameServerResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Games.GameServerResponse"
            }
          }
        }
      },
      "Roblox.Groups.Api.CreateWallPostRequest": {
        "description": "A request model for creating a group wall post",
        "type": "object",
        "properties": {
          "body": {
            "description": "The wall post body",
            "type": "string"
          },
          "captchaId": {
            "type": "string"
          },
          "captchaToken": {
            "type": "string"
          },
          "captchaProvider": {
            "type": "string"
          },
          "challengeId": {
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.GroupMembershipResponse": {
        "description": "A basic group membership response model",
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Groups.GroupBasicResponse"
          },
          "role": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Groups.GroupRoleBasicResponse"
          },
          "isNotificationsEnabled": {
            "description": "Whether the group notification preferences are enabled for the user",
            "type": "boolean"
          },
          "notificationPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupNotificationPreferenceData"
            }
          }
        }
      },
      "Roblox.Groups.Api.GroupNotificationPreferenceData": {
        "type": "object",
        "properties": {
          "type": {
            "format": "int32",
            "description": " ['AnnouncementCreatedNotification' = 0, 'ForumPostCreatedNotification' = 1, 'ForumCommentCreatedNotification' = 2, 'ForumCommentReplyCreatedNotification' = 3, 'ForumSubscriberNotification' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.GroupRoleResponse": {
        "description": "A group role response model",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The role id",
            "type": "integer"
          },
          "name": {
            "description": "The role name",
            "type": "string"
          },
          "description": {
            "description": "The role description",
            "type": "string"
          },
          "rank": {
            "format": "int32",
            "description": "The role rank",
            "type": "integer"
          },
          "memberCount": {
            "format": "int64",
            "description": "The number of members in the role.",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupWallPostV2Model": {
        "description": "A response model for group wall post information",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The group wall post Id.",
            "type": "integer"
          },
          "poster": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.UserGroupRoleResponse"
          },
          "body": {
            "description": "The group wall post body.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "When the group wall post was posted.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the group wall post was last updated.",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.Models.Response.UserModel": {
        "description": "A model representing data about an Roblox.Platform.Membership.IUser",
        "type": "object",
        "properties": {
          "buildersClubMembershipType": {
            "format": "int32",
            "description": "The user's builders club membership type",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.UserGroupRoleResponse": {
        "description": "A user group role response model",
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "role": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
          }
        }
      },
      "Roblox.Web.Responses.Groups.GroupBasicResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "memberCount": {
            "format": "int64",
            "type": "integer"
          },
          "hasVerifiedBadge": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.Responses.Groups.GroupResponseV2": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Web.Responses.Groups.GroupOwnerType_"
          },
          "memberCount": {
            "format": "int64",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "hasVerifiedBadge": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.Responses.Groups.GroupRoleBasicResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "rank": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Web.Responses.Groups.GroupOwnerType_": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "description": " ['User' = 0]",
            "enum": [0],
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupMembershipResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Groups.GroupResponseV2_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Groups.GroupResponseV2"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.GroupWallPostV2Model_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupWallPostV2Model"
            }
          }
        }
      },
      "Roblox.Groups.Api.ChangeOwnerRequest": {
        "description": "A request model for changing the group owner.",
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "description": "The user id.",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupAllRolesResponse": {
        "description": "A group roles response model",
        "type": "object",
        "properties": {
          "groupId": {
            "format": "int64",
            "description": "The group id",
            "type": "integer"
          },
          "roles": {
            "description": "The roles in the group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
            }
          }
        }
      },
      "Roblox.Groups.Api.GroupConfigurationDisplayOptionsResponse": {
        "description": "A response model for group configuration",
        "type": "object",
        "properties": {
          "groupConfiguration": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupConfigurationResponse"
          },
          "recurringPayoutsConfiguration": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.RecurringPayoutsConfigurationResponse"
          },
          "roleConfiguration": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.RoleConfigurationResponse"
          },
          "groupNameChangeConfiguration": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupNameChangeConfigurationResponse"
          },
          "isPremiumPayoutsEnabled": {
            "description": "The configuration of premium payouts shows in Group Revenue Summary page",
            "type": "boolean"
          },
          "isDefaultEmblemPolicyEnabled": {
            "description": "If set to true, default group emblem policies handled by GUAC will be enabled\r\n            \r\nIf set to false, default group emblem policies will not be enabled",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupConfigurationResponse": {
        "description": "A response model for group configuration",
        "type": "object",
        "properties": {
          "nameMaxLength": {
            "format": "int32",
            "description": "The maximum length of a group name",
            "type": "integer"
          },
          "descriptionMaxLength": {
            "format": "int32",
            "description": "The maximum length of a group description",
            "type": "integer"
          },
          "iconMaxFileSizeMb": {
            "format": "int32",
            "description": "The maximum file size of the group icon in megabytes",
            "type": "integer"
          },
          "cost": {
            "format": "int64",
            "description": "The cost of purchasing a group",
            "type": "integer"
          },
          "isUsingTwoStepWebviewComponent": {
            "description": "Should the frontend use the 2sv webview component (as opposed to the built-in 2sv pop up)",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupContentModerationPermissionsModel": {
        "description": "A model representing group content moderation permissions",
        "type": "object",
        "properties": {
          "manageKeywordBlockList": {
            "description": "Manage keyword block list permission",
            "type": "boolean"
          },
          "viewKeywordBlockList": {
            "description": "View keyword block list permission",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupDescriptionResponse": {
        "type": "object",
        "properties": {
          "newDescription": {
            "description": "The new description returned",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.GroupDetailResponse": {
        "description": "A detailed group response model",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The group id",
            "type": "integer"
          },
          "name": {
            "description": "The group name",
            "type": "string"
          },
          "description": {
            "description": "The group description",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "shout": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.ShoutResponse"
          },
          "memberCount": {
            "format": "int32",
            "description": "The number of members in the group",
            "type": "integer"
          },
          "isBuildersClubOnly": {
            "description": "Whether the group is Builders Club only",
            "type": "boolean"
          },
          "publicEntryAllowed": {
            "description": "Whether the group is public (no approval required)",
            "type": "boolean"
          },
          "isLocked": {
            "description": "Whether the group is locked",
            "type": "boolean"
          },
          "hasVerifiedBadge": {
            "description": "Whether the group has a verified badge.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupEconomyPermissionsModel": {
        "description": "A model representing data about an Roblox.Platform.Membership.IUser",
        "type": "object",
        "properties": {
          "spendGroupFunds": {
            "description": "Spend group funds permission",
            "type": "boolean"
          },
          "advertiseGroup": {
            "description": "Advertise group permission",
            "type": "boolean"
          },
          "createItems": {
            "description": "Create items permission",
            "type": "boolean"
          },
          "manageItems": {
            "description": "Manage items permission",
            "type": "boolean"
          },
          "addGroupPlaces": {
            "description": "Add group places permission",
            "type": "boolean"
          },
          "manageGroupGames": {
            "description": "Manage group games permission",
            "type": "boolean"
          },
          "viewGroupPayouts": {
            "description": "Manage group games permission",
            "type": "boolean"
          },
          "viewAnalytics": {
            "description": "Permission to view universe analytics from the creator dashboard.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupForumsPermissionsModel": {
        "description": "A model representing group posts permissions",
        "type": "object",
        "properties": {
          "manageCategories": {
            "description": "Manage categories permission",
            "type": "boolean"
          },
          "createPosts": {
            "description": "Create posts permission",
            "type": "boolean"
          },
          "removePosts": {
            "description": "Remove posts permission",
            "type": "boolean"
          },
          "lockPosts": {
            "description": "Lock posts permission",
            "type": "boolean"
          },
          "pinPosts": {
            "description": "Pin posts permission",
            "type": "boolean"
          },
          "createComments": {
            "description": "Create comments permission",
            "type": "boolean"
          },
          "removeComments": {
            "description": "Remove comments permission",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupJoinRequestResponse": {
        "description": "Response model for a group join request",
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "created": {
            "format": "date-time",
            "description": "The DateTime the request was created",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.GroupManagementPermissionsModel": {
        "description": "A model representing data about an Roblox.Platform.Membership.IUser",
        "type": "object",
        "properties": {
          "manageRelationships": {
            "description": "Manage group relationships permission",
            "type": "boolean"
          },
          "manageClan": {
            "description": "Manage clan permission",
            "type": "boolean"
          },
          "viewAuditLogs": {
            "description": "View audit logs permission",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupMembershipDetailResponse": {
        "description": "A group membership response model",
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDetailResponse"
          },
          "role": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
          },
          "isPrimaryGroup": {
            "description": "Whether the group is the user's Primary Group",
            "type": "boolean"
          },
          "isNotificationsEnabled": {
            "description": "Whether the group notification preferences are enabled for the user",
            "type": "boolean"
          },
          "notificationPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupNotificationPreferenceData"
            }
          }
        }
      },
      "Roblox.Groups.Api.GroupMembershipMetadataResponse": {
        "description": "A user's group membership metadata response model",
        "type": "object",
        "properties": {
          "groupId": {
            "format": "int64",
            "description": "The group id",
            "type": "integer"
          },
          "isPrimary": {
            "description": "Whether the group is primary",
            "type": "boolean"
          },
          "isPendingJoin": {
            "description": "Whether there has been a request to join this group",
            "type": "boolean"
          },
          "userRole": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.UserGroupRoleResponse"
          },
          "permissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsModel"
          },
          "areGroupGamesVisible": {
            "description": "Whether group games are visible",
            "type": "boolean"
          },
          "areGroupFundsVisible": {
            "description": "Whether group funds are visible",
            "type": "boolean"
          },
          "areEnemiesAllowed": {
            "description": "Whether enemies are allowed",
            "type": "boolean"
          },
          "canConfigure": {
            "description": "If the user can configure the group",
            "type": "boolean"
          },
          "isNotificationsEnabled": {
            "description": "Whether the group's notification preferences set to enabled for the user",
            "type": "boolean"
          },
          "notificationPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupNotificationPreferenceData"
            }
          },
          "isBannedFromGroup": {
            "description": "Whether the user is banned from the group",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupMembershipPermissionsModel": {
        "description": "A model representing data about an Roblox.Platform.Membership.IUser",
        "type": "object",
        "properties": {
          "changeRank": {
            "description": "View wall permission",
            "type": "boolean"
          },
          "inviteMembers": {
            "description": "Post to wall permission",
            "type": "boolean"
          },
          "removeMembers": {
            "description": "Remove from group permission",
            "type": "boolean"
          },
          "banMembers": {
            "description": "Ban from group permission",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupNameChangeConfigurationResponse": {
        "type": "object",
        "properties": {
          "cost": {
            "format": "int64",
            "description": "The cost of renaming a group",
            "type": "integer"
          },
          "cooldownInDays": {
            "format": "int32",
            "description": "The cooldown for group name changes in days",
            "type": "integer"
          },
          "ownershipCooldownInDays": {
            "format": "int32",
            "description": "The ownership cooldown for group name changes in days",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupOpenCloudPermissionsModel": {
        "type": "object",
        "properties": {
          "useCloudAuthentication": {
            "description": "Permission to create and use API keys on the group's resources.",
            "type": "boolean"
          },
          "administerCloudAuthentication": {
            "description": "Permission to administer all of the group's API keys.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupPayoutResponse": {
        "description": "A group payout response",
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "percentage": {
            "format": "int32",
            "description": "The group payout percentage for the user",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupPayoutRestrictionResponse": {
        "description": "Response model for Group Payout Restriction",
        "type": "object",
        "properties": {
          "canUseRecurringPayout": {
            "description": "Whether the group can use recurring payout feature.",
            "type": "boolean"
          },
          "canUseOneTimePayout": {
            "description": "Whether the group can use one-time payout feature.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupPermissionsModel": {
        "description": "A model for group permissions.",
        "type": "object",
        "properties": {
          "groupPostsPermissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPostsPermissionsModel"
          },
          "groupForumsPermissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupForumsPermissionsModel"
          },
          "groupContentModerationPermissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupContentModerationPermissionsModel"
          },
          "groupMembershipPermissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipPermissionsModel"
          },
          "groupManagementPermissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupManagementPermissionsModel"
          },
          "groupEconomyPermissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupEconomyPermissionsModel"
          },
          "groupOpenCloudPermissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupOpenCloudPermissionsModel"
          }
        }
      },
      "Roblox.Groups.Api.GroupPermissionsResponse": {
        "description": "A group role's permissions response model",
        "type": "object",
        "properties": {
          "groupId": {
            "format": "int64",
            "description": "The group id",
            "type": "integer"
          },
          "role": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleResponse"
          },
          "permissions": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsModel"
          }
        }
      },
      "Roblox.Groups.Api.GroupPoliciesResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPolicyResponse"
            }
          }
        }
      },
      "Roblox.Groups.Api.GroupPolicyRequest": {
        "type": "object",
        "properties": {
          "groupIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Groups.Api.GroupPolicyResponse": {
        "type": "object",
        "properties": {
          "canViewGroup": {
            "type": "boolean"
          },
          "groupId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupPostsPermissionsModel": {
        "description": "A model representing group posts permissions",
        "type": "object",
        "properties": {
          "viewWall": {
            "description": "View wall permission",
            "type": "boolean"
          },
          "postToWall": {
            "description": "Post to wall permission",
            "type": "boolean"
          },
          "deleteFromWall": {
            "description": "Delete from wall permission",
            "type": "boolean"
          },
          "viewStatus": {
            "description": "View status permission",
            "type": "boolean"
          },
          "postToStatus": {
            "description": "Post to status permission",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupRelationshipsResponse": {
        "description": "A group relationships response model",
        "type": "object",
        "properties": {
          "groupId": {
            "format": "int64",
            "description": "The group id",
            "type": "integer"
          },
          "relationshipType": {
            "format": "int32",
            "description": "The group relationship type ['Allies' = 1, 'Enemies' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "totalGroupCount": {
            "format": "int64",
            "description": "The total number of groups for this relationship type",
            "type": "integer"
          },
          "relatedGroups": {
            "description": "The related or requested groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDetailResponse"
            }
          },
          "nextRowIndex": {
            "format": "int64",
            "description": "The index for the next page of related groups",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupRoleDetailResponse": {
        "type": "object",
        "properties": {
          "groupId": {
            "format": "int64",
            "description": "The id of the group the role belongs to",
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "description": "The role id",
            "type": "integer"
          },
          "name": {
            "description": "The role name",
            "type": "string"
          },
          "description": {
            "description": "The role description",
            "type": "string"
          },
          "rank": {
            "format": "int32",
            "description": "The role rank",
            "type": "integer"
          },
          "memberCount": {
            "format": "int64",
            "description": "The number of members in the role.",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupSearchMetadataResponse": {
        "description": "Response Model For Group Search Metadata Endpoint",
        "type": "object",
        "properties": {
          "SuggestedGroupKeywords": {
            "description": "Suggested Group Category translation keys",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ShowFriendsGroupsSort": {
            "description": "Whether or not the Friends' Groups sort should show for the authenticated user",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupSearchPageResponse": {
        "description": "ApiPageResponse for catalog search",
        "type": "object",
        "properties": {
          "keyword": {
            "description": "Keyword used for search query",
            "type": "string"
          },
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupSearchResponseItem"
            }
          }
        }
      },
      "Roblox.Groups.Api.GroupSearchResponseItem": {
        "description": "A group search response",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The group id",
            "type": "integer"
          },
          "name": {
            "description": "The group name",
            "type": "string"
          },
          "description": {
            "description": "The group description",
            "type": "string"
          },
          "memberCount": {
            "format": "int32",
            "description": "The number of members in the group",
            "type": "integer"
          },
          "previousName": {
            "description": "The previous name of the group",
            "type": "string"
          },
          "publicEntryAllowed": {
            "description": "When true anyone can join the group. When false manual approval\r\nis required to join the group",
            "type": "boolean"
          },
          "created": {
            "format": "date-time",
            "description": "When the group was created",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the group was last updated",
            "type": "string"
          },
          "hasVerifiedBadge": {
            "description": "The group's verified badge status",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.GroupSettingsResponse": {
        "description": "Response model for Group Settings",
        "type": "object",
        "properties": {
          "isApprovalRequired": {
            "description": "Whether public entry is allowed.",
            "type": "boolean"
          },
          "isBuildersClubRequired": {
            "description": "Whether Builder's Club is required.",
            "type": "boolean"
          },
          "areEnemiesAllowed": {
            "description": "Whether enemy club declarations are allowed.",
            "type": "boolean"
          },
          "areGroupFundsVisible": {
            "description": "Whether funds are publicly visible.",
            "type": "boolean"
          },
          "areGroupGamesVisible": {
            "description": "Whether games are publicly visible.",
            "type": "boolean"
          },
          "isGroupNameChangeEnabled": {
            "description": "If the group name change feature is enabled for this group.",
            "type": "boolean"
          },
          "verificationLevel": {
            "format": "int32",
            "description": "The verification level for the group. Null if the verification level could not be determined due to an error.",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "accountTenureRequirement": {
            "format": "int32",
            "description": "The account tenure requirement for the group. Null if the account tenure requirement could not be determined due to an error.",
            "enum": [0, 1, 2, 3, 4, 5],
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.GroupsDisplayOptionsResponse": {
        "description": "A group roles response model",
        "type": "object",
        "properties": {
          "groupLimit": {
            "format": "int32",
            "description": "The user's builders club membership group limit",
            "type": "integer"
          },
          "currentGroupCount": {
            "format": "int32",
            "description": "The user's current group membership count",
            "type": "integer"
          },
          "groupStatusMaxLength": {
            "format": "int32",
            "description": "The maximum length of a group status",
            "type": "integer"
          },
          "groupPostMaxLength": {
            "format": "int32",
            "description": "The maximum length of a group wall post",
            "type": "integer"
          },
          "isGroupWallNotificationsEnabled": {
            "description": "If set to true, group details will subscribe and respond to wall notifications.",
            "type": "boolean"
          },
          "groupWallNotificationsSubscribeIntervalInMilliseconds": {
            "format": "int32",
            "description": "Time in milliseconds between calls to subscribe to group wall notifications.",
            "type": "integer"
          },
          "areProfileGroupsHidden": {
            "description": "If set to true, groups showcase will not show on users profiles.\r\n            \r\nIf set to false, group showcase will display on users profiles.",
            "type": "boolean"
          },
          "isGroupDetailsPolicyEnabled": {
            "description": "If set to true, group details will respect GUAC policies for group details\r\n            \r\nIf set to false, group details will not respect GUAC policies",
            "type": "boolean"
          },
          "showPreviousGroupNames": {
            "description": "Whether or not we should show previous names of this group",
            "type": "boolean"
          },
          "areGroupBansEnabled": {
            "description": "Whether or not group bans are enabled",
            "type": "boolean"
          },
          "canEnableGroupNotifications": {
            "description": "Whether or not group notifications can be enabled",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.JoinGroupRequest": {
        "description": "A request model for joining group.",
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "redemptionToken": {
            "type": "string"
          },
          "captchaId": {
            "type": "string"
          },
          "captchaToken": {
            "type": "string"
          },
          "captchaProvider": {
            "type": "string"
          },
          "challengeId": {
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.MembersRequest": {
        "type": "object",
        "properties": {
          "UserIds": {
            "description": "The user ids being either accepted or declined",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Groups.Api.Models.Request.CreateRoleSetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the roleset.",
            "type": "string"
          },
          "description": {
            "description": "The description of the roleset.",
            "type": "string"
          },
          "rank": {
            "format": "int32",
            "description": "The rank/positioning of the roleset.",
            "type": "integer"
          },
          "usingGroupFunds": {
            "description": "Setting to use group funds or not.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the roleset.",
            "type": "string"
          },
          "description": {
            "description": "The description of the roleset.",
            "type": "string"
          },
          "rank": {
            "format": "int32",
            "description": "The rank/positioning of the roleset.",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem": {
        "description": "A group audit log response model",
        "type": "object",
        "properties": {
          "actor": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.UserGroupRoleResponse"
          },
          "actionType": {
            "description": "The action type",
            "type": "string"
          },
          "description": {
            "description": "Information on the action performed"
          },
          "created": {
            "format": "date-time",
            "description": "Date the group action was performed",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem": {
        "description": "A group name history response model",
        "type": "object",
        "properties": {
          "name": {
            "description": "The group name before the change",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "Date the name change was applied",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.Models.Response.GroupWallPostModel": {
        "description": "A response model for group wall post information",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The group wall post Id.",
            "type": "integer"
          },
          "poster": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "body": {
            "description": "The group wall post body.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "When the group wall post was posted.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the group wall post was last updated.",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.PayoutRecipientRequest": {
        "description": "A request model for paying out Robux.",
        "type": "object",
        "properties": {
          "recipientId": {
            "format": "int64",
            "description": "The recipient id.",
            "type": "integer"
          },
          "recipientType": {
            "format": "int32",
            "description": "The recipient type. ['User' = 0, 'Group' = 1]",
            "enum": [0, 1],
            "type": "integer"
          },
          "amount": {
            "format": "int64",
            "description": "The amount to payout.",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.PayoutRequest": {
        "description": "Multi-payout request information.",
        "type": "object",
        "properties": {
          "PayoutType": {
            "format": "int32",
            "description": "The Roblox.Groups.Api.PayoutType. ['FixedAmount' = 1, 'Percentage' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "Recipients": {
            "description": "The recipients of the payouts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.PayoutRecipientRequest"
            }
          },
          "IdempotencyKey": {
            "description": "The idempotency key of the payout request.",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.PostGroupStatusRequest": {
        "description": "A request model for setting the authenticated user's primary group.",
        "type": "object",
        "properties": {
          "message": {
            "description": "The message to set the group status to.",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.PrimaryGroupRequest": {
        "description": "A request model for setting the authenticated user's primary group.",
        "type": "object",
        "properties": {
          "groupId": {
            "format": "int64",
            "description": "The group id.",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.RecurringPayoutsConfigurationResponse": {
        "description": "A response model for recurring payout configuration",
        "type": "object",
        "properties": {
          "maxPayoutPartners": {
            "format": "int32",
            "description": "The maximum number of recurring payout partners",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.RelationshipsRequest": {
        "type": "object",
        "properties": {
          "GroupIds": {
            "description": "The group ids being either accepted or declined",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Groups.Api.RoleConfigurationResponse": {
        "description": "A response model for role configuration",
        "type": "object",
        "properties": {
          "nameMaxLength": {
            "format": "int32",
            "description": "The maximum length of a role name",
            "type": "integer"
          },
          "descriptionMaxLength": {
            "format": "int32",
            "description": "The maximum length of a role description",
            "type": "integer"
          },
          "limit": {
            "format": "int32",
            "description": "The maximum number of roles in a group",
            "type": "integer"
          },
          "cost": {
            "format": "int64",
            "description": "The cost of purchasing a role",
            "type": "integer"
          },
          "minRank": {
            "format": "int32",
            "description": "The minimum rank a role can have",
            "type": "integer"
          },
          "maxRank": {
            "format": "int32",
            "description": "The maximum rank a role can have",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.ShoutResponse": {
        "type": "object",
        "properties": {
          "body": {
            "description": "The shout's message",
            "type": "string"
          },
          "poster": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "created": {
            "format": "date-time",
            "description": "The shout's created time",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The shout's last updated time",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.SocialLinkRequest": {
        "description": "An update request for a social link",
        "type": "object",
        "properties": {
          "type": {
            "format": "int32",
            "description": "What type of social media this points to",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8],
            "type": "integer"
          },
          "url": {
            "description": "The url of the link",
            "type": "string"
          },
          "title": {
            "description": "The title of the link",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.SocialLinkResponse": {
        "description": "A social link response from a create request",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The id of the social link",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "description": "What type of social media (including Roblox Group) this points to ['Facebook' = 0, 'Twitter' = 1, 'YouTube' = 2, 'Twitch' = 3, 'GooglePlus' = 4, 'Discord' = 5, 'RobloxGroup' = 6, 'Amazon' = 7, 'Guilded' = 8]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8],
            "type": "integer"
          },
          "url": {
            "description": "The url of the link",
            "type": "string"
          },
          "title": {
            "description": "The title of the link",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.UpdateGroupDescriptionRequest": {
        "description": "A request model for setting a description for the group",
        "type": "object",
        "properties": {
          "description": {
            "description": "The group description being set.",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.UpdateGroupNameRequest": {
        "description": "A request model for setting a name for the group",
        "type": "object",
        "properties": {
          "name": {
            "description": "The group name being set.",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.UpdateGroupNameResponse": {
        "type": "object",
        "properties": {
          "newName": {
            "description": "The new description returned",
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.UpdateGroupNotificationPreferenceRequest": {
        "description": "A request model for updating a group's notification preference.",
        "type": "object",
        "properties": {
          "notificationsEnabled": {
            "description": "Whether the user wants to receive notifications from the group.",
            "type": "boolean"
          },
          "type": {
            "format": "int32",
            "description": " ['AnnouncementCreatedNotification' = 0, 'ForumPostCreatedNotification' = 1, 'ForumCommentCreatedNotification' = 2, 'ForumCommentReplyCreatedNotification' = 3, 'ForumSubscriberNotification' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.UpdateGroupSettingsRequest": {
        "description": "A request model for updating a group's settings.",
        "type": "object",
        "properties": {
          "isApprovalRequired": {
            "description": "Whether public entry is allowed.",
            "type": "boolean"
          },
          "areEnemiesAllowed": {
            "description": "Whether enemy club declarations are allowed.",
            "type": "boolean"
          },
          "areGroupFundsVisible": {
            "description": "Whether funds are publicly visible.",
            "type": "boolean"
          },
          "areGroupGamesVisible": {
            "description": "Whether games are publicly visible.",
            "type": "boolean"
          },
          "verificationLevel": {
            "format": "int32",
            "description": "The verification level for the group.",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "accountTenureRequirement": {
            "format": "int32",
            "description": "The account tenure requirement for the group.",
            "enum": [0, 1, 2, 3, 4, 5],
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.UpdatePermissionsRequest": {
        "description": "A request model for updating a group's roleset's permissions.",
        "type": "object",
        "properties": {
          "permissions": {
            "description": "The permission-value pairs to be updated.",
            "type": "object",
            "properties": {
              "DeleteFromWall": {
                "type": "boolean"
              },
              "PostToWall": {
                "type": "boolean"
              },
              "InviteMembers": {
                "type": "boolean"
              },
              "PostToStatus": {
                "type": "boolean"
              },
              "RemoveMembers": {
                "type": "boolean"
              },
              "BanMembers": {
                "type": "boolean"
              },
              "ViewStatus": {
                "type": "boolean"
              },
              "ViewWall": {
                "type": "boolean"
              },
              "ChangeRank": {
                "type": "boolean"
              },
              "AdvertiseGroup": {
                "type": "boolean"
              },
              "ManageRelationships": {
                "type": "boolean"
              },
              "AddGroupPlaces": {
                "type": "boolean"
              },
              "ViewAuditLogs": {
                "type": "boolean"
              },
              "CreateItems": {
                "type": "boolean"
              },
              "ManageItems": {
                "type": "boolean"
              },
              "SpendGroupFunds": {
                "type": "boolean"
              },
              "ManageClan": {
                "type": "boolean"
              },
              "ManageGroupGames": {
                "type": "boolean"
              },
              "UseCloudAuthentication": {
                "type": "boolean"
              },
              "AdministerCloudAuthentication": {
                "type": "boolean"
              },
              "ViewAnalytics": {
                "type": "boolean"
              },
              "ManageCategories": {
                "type": "boolean"
              },
              "CreatePosts": {
                "type": "boolean"
              },
              "RemovePosts": {
                "type": "boolean"
              },
              "LockPosts": {
                "type": "boolean"
              },
              "PinPosts": {
                "type": "boolean"
              },
              "CreateComments": {
                "type": "boolean"
              },
              "RemoveComments": {
                "type": "boolean"
              },
              "ManageKeywordBlockList": {
                "type": "boolean"
              },
              "ViewKeywordBlockList": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Roblox.Groups.Api.UpdateUserRoleRequest": {
        "description": "A request model for setting a users role in a group.",
        "type": "object",
        "properties": {
          "roleId": {
            "format": "int64",
            "description": "The role in the group the user should be put into.",
            "type": "integer"
          }
        }
      },
      "Roblox.Groups.Api.UserGroupMembershipResponse": {
        "description": "A users group membership response model",
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "groups": {
            "description": "The list of group memberships",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipDetailResponse"
            }
          }
        }
      },
      "Roblox.Groups.Client.GroupFeaturedContentResponse": {
        "type": "object",
        "properties": {
          "groupId": {
            "format": "int64",
            "type": "integer"
          },
          "contentType": {
            "type": "string"
          },
          "contentId": {
            "type": "string"
          }
        }
      },
      "Roblox.Groups.Api.GroupAuditLogPageResponse_Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem_": {
        "description": "ApiPageResponse for group audit log",
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupDetailResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupDetailResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupMembershipDetailResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupMembershipDetailResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupPayoutResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPayoutResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupPermissionsResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupPermissionsResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.GroupRoleDetailResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupRoleDetailResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.SocialLinkResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.SocialLinkResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Groups.Api.UserGroupMembershipResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.UserGroupMembershipResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Groups.GroupBasicResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Groups.GroupBasicResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.GroupJoinRequestResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.GroupJoinRequestResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.GroupWallPostModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.GroupWallPostModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.Models.Response.UserModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.Models.Response.UserModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Groups.Api.UserGroupRoleResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.UserGroupRoleResponse"
            }
          }
        }
      },
      "Roblox.Inventory.Api.Models.AssetIdListModel": {
        "description": "A model that contains a list of asset ids",
        "type": "object",
        "properties": {
          "assetIds": {
            "description": "The asset ids",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.Inventory.Api.Models.AssetsExplorerCategoryItemModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "description": "Describes what type an AssetsExplorerCategoryItemModel contains ['AssetType' = 0, 'Bundle' = 1, 'Outfit' = 2, 'Set' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "categoryType": {
            "type": "string"
          }
        }
      },
      "Roblox.Inventory.Api.Models.AssetsExplorerCategoryModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "categoryType": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.AssetsExplorerCategoryItemModel"
            }
          }
        }
      },
      "Roblox.Inventory.Api.Models.CanViewInventoryResponse": {
        "type": "object",
        "properties": {
          "canView": {
            "description": "Boolean describing if the user's inventory can be viewed",
            "type": "boolean"
          }
        }
      },
      "Roblox.Inventory.Api.Models.CategoriesModel": {
        "description": "Model class that contains the categories of the Inventory or Favorites page",
        "type": "object",
        "properties": {
          "categories": {
            "description": "Categories to show up in Inventory or Favorites page",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.AssetsExplorerCategoryModel"
            }
          }
        }
      },
      "Roblox.Inventory.Api.Models.CollectibleUserAssetModel": {
        "description": "A model containing information about a Roblox.Platform.AssetOwnership.UserAsset",
        "type": "object",
        "properties": {
          "userAssetId": {
            "format": "int64",
            "description": "The user asset id",
            "type": "integer"
          },
          "serialNumber": {
            "format": "int64",
            "description": "The serial number of the user asset",
            "type": "integer"
          },
          "assetId": {
            "format": "int64",
            "description": "The asset id of the user asset",
            "type": "integer"
          },
          "name": {
            "description": "The asset name of the asset",
            "type": "string"
          },
          "recentAveragePrice": {
            "format": "int64",
            "description": "The recent average price of the asset",
            "type": "integer"
          },
          "originalPrice": {
            "format": "int64",
            "description": "The original price of the asset",
            "type": "integer"
          },
          "assetStock": {
            "format": "int64",
            "description": "The recent average price of the user asset",
            "type": "integer"
          },
          "buildersClubMembershipType": {
            "format": "int32",
            "description": "The recent average price of the user asset ['None' = 0, 'BC' = 1, 'TBC' = 2, 'OBC' = 3, 'RobloxPremium' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          },
          "isOnHold": {
            "description": "Whether the user asset has an active hold.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Inventory.Api.Models.CreatorModel": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "format": "int32",
            "description": " ['User' = 1, 'Group' = 2]",
            "enum": [1, 2],
            "type": "integer"
          }
        }
      },
      "Roblox.Inventory.Api.Models.IItemModel": {
        "description": "Model representing an inventory item",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The ID of the item",
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "description": "The name of the item",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "format": "int32",
            "description": "The type of the item ['Asset' = 0, 'GamePass' = 1, 'Badge' = 2, 'Bundle' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer",
            "readOnly": true
          },
          "instanceId": {
            "format": "int64",
            "description": "The instance id of the item if applicable",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "Roblox.Inventory.Api.Models.PlaceModel": {
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "type": "integer"
          },
          "placeId": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CreatorModel"
          },
          "priceInRobux": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.CollectibleUserAssetModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.CollectibleUserAssetModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.IItemModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.IItemModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.PlaceModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.PlaceModel"
            }
          }
        }
      },
      "Roblox.Inventory.Api.Models.InventoryItemModel": {
        "description": "A model containing information about an inventory item.",
        "type": "object",
        "properties": {
          "userAssetId": {
            "format": "int64",
            "description": "The user asset id",
            "type": "integer"
          },
          "assetId": {
            "format": "int64",
            "description": "The asset id of the user asset",
            "type": "integer"
          },
          "assetName": {
            "description": "The asset name of the user asset",
            "type": "string"
          },
          "collectibleItemId": {
            "description": "The id of the corresponding collectible item",
            "type": "string"
          },
          "collectibleItemInstanceId": {
            "description": "The id of the corresponding collectible item instance",
            "type": "string"
          },
          "serialNumber": {
            "format": "int64",
            "description": "The serial number of the user asset",
            "type": "integer"
          },
          "owner": {
            "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.UserModel"
          },
          "created": {
            "format": "date-time",
            "description": "The creation date of the user asset",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The updated date of the user asset",
            "type": "string"
          }
        }
      },
      "Roblox.Inventory.Api.Models.UserModel": {
        "description": "A model representing data about an Roblox.Platform.Membership.IUser",
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "description": "The user id",
            "type": "integer"
          },
          "username": {
            "description": "The username",
            "type": "string"
          },
          "buildersClubMembershipType": {
            "format": "int32",
            "description": "The user's builders club membership type ['None' = 0, 'BC' = 1, 'TBC' = 2, 'OBC' = 3, 'RobloxPremium' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Inventory.Api.V2.AssetOwnerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "collectibleItemInstanceId": {
            "type": "string"
          },
          "serialNumber": {
            "format": "int64",
            "type": "integer"
          },
          "owner": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Agents.AgentType_"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.Inventory.Api.V2.UserAssetItemModelV2": {
        "description": "The user asset item model for V2 controllers.",
        "type": "object",
        "properties": {
          "assetId": {
            "format": "int64",
            "description": "The asset id of the user asset.",
            "type": "integer"
          },
          "name": {
            "description": "The name of asset with id Roblox.Inventory.Api.V2.UserAssetItemModelV2.AssetId.",
            "type": "string"
          },
          "assetType": {
            "format": "int32",
            "description": "The asset type id of asset with id Roblox.Inventory.Api.V2.UserAssetItemModelV2.AssetId. ['Image' = 1, 'TShirt' = 2, 'Audio' = 3, 'Mesh' = 4, 'Lua' = 5, 'HTML' = 6, 'Text' = 7, 'Hat' = 8, 'Place' = 9, 'Model' = 10, 'Shirt' = 11, 'Pants' = 12, 'Decal' = 13, 'Avatar' = 16, 'Head' = 17, 'Face' = 18, 'Gear' = 19, 'Badge' = 21, 'GroupEmblem' = 22, 'Animation' = 24, 'Arms' = 25, 'Legs' = 26, 'Torso' = 27, 'RightArm' = 28, 'LeftArm' = 29, 'LeftLeg' = 30, 'RightLeg' = 31, 'Package' = 32, 'YouTubeVideo' = 33, 'GamePass' = 34, 'App' = 35, 'Code' = 37, 'Plugin' = 38, 'SolidModel' = 39, 'MeshPart' = 40, 'HairAccessory' = 41, 'FaceAccessory' = 42, 'NeckAccessory' = 43, 'ShoulderAccessory' = 44, 'FrontAccessory' = 45, 'BackAccessory' = 46, 'WaistAccessory' = 47, 'ClimbAnimation' = 48, 'DeathAnimation' = 49, 'FallAnimation' = 50, 'IdleAnimation' = 51, 'JumpAnimation' = 52, 'RunAnimation' = 53, 'SwimAnimation' = 54, 'WalkAnimation' = 55, 'PoseAnimation' = 56, 'LocalizationTableManifest' = 59, 'LocalizationTableTranslation' = 60, 'EmoteAnimation' = 61, 'Video' = 62, 'TexturePack' = 63, 'TShirtAccessory' = 64, 'ShirtAccessory' = 65, 'PantsAccessory' = 66, 'JacketAccessory' = 67, 'SweaterAccessory' = 68, 'ShortsAccessory' = 69, 'LeftShoeAccessory' = 70, 'RightShoeAccessory' = 71, 'DressSkirtAccessory' = 72, 'FontFamily' = 73, 'FontFace' = 74, 'MeshHiddenSurfaceRemoval' = 75, 'EyebrowAccessory' = 76, 'EyelashAccessory' = 77, 'MoodAnimation' = 78, 'DynamicHead' = 79, 'CodeSnippet' = 80, 'AdsVideo' = 81, 'OtaUpdate' = 82, 'Screenshot' = 83, 'RuntimePropertySet' = 84, 'StorePreviewVideo' = 85, 'GamePreviewVideo' = 86]",
            "enum": [
              1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22,
              24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40,
              41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
              59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
              75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
            ],
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The created date time of the user asset.",
            "type": "string"
          }
        }
      },
      "Roblox.Web.Responses.RelatedEntityTypeResponse_Roblox.Agents.AgentType_": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "format": "int32",
            "description": " ['User' = 1, 'Group' = 2]",
            "enum": [1, 2],
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.Models.InventoryItemModel_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.Models.InventoryItemModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.V2.AssetOwnerResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.V2.AssetOwnerResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Inventory.Api.V2.UserAssetItemModelV2_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Inventory.Api.V2.UserAssetItemModelV2"
            }
          }
        }
      },
      "Roblox.ItemConfiguration.Api.AssetCreationsDetailsRequest": {
        "type": "object",
        "properties": {
          "AssetIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.ItemConfiguration.Api.AssetCreationsDetailsResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "format": "int64",
            "description": "The asset Id.",
            "type": "integer"
          },
          "name": {
            "description": "The asset name.",
            "type": "string"
          },
          "status": {
            "description": "The asset status. ['Unknown' = 0, 'ReviewPending' = 1, 'Moderated' = 2, 'ReviewApproved' = 3, 'OnSale' = 4, 'OffSale' = 5, 'DelayedRelease' = 6, 'Free' = 7]",
            "enum": [
              "Unknown",
              "ReviewPending",
              "Moderated",
              "ReviewApproved",
              "OnSale",
              "OffSale",
              "DelayedRelease",
              "Free"
            ],
            "type": "string"
          },
          "description": {
            "description": "The asset description.",
            "type": "string"
          },
          "creatorType": {
            "description": "The creator type. ['Unknown' = 0, 'User' = 1, 'Group' = 2]",
            "enum": ["Unknown", "User", "Group"],
            "type": "string"
          },
          "creatorTargetId": {
            "format": "int64",
            "description": "The creator target Id.",
            "type": "integer"
          },
          "price": {
            "format": "int64",
            "description": "The Price for onSale asset\r\nNote: This is now considered deprecated in favor of PriceConfiguration.",
            "type": "integer"
          },
          "priceConfiguration": {
            "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.PriceConfigurationModel"
          },
          "isArchived": {
            "description": "Is the asset archived.",
            "type": "boolean"
          },
          "assetType": {
            "description": "Type of the asset.",
            "type": "string"
          },
          "releaseConfiguration": {
            "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.ReleaseConfigurationResponseModel"
          },
          "created": {
            "format": "date-time",
            "description": "Date asset was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "Date asset was created.",
            "type": "string"
          },
          "isDelisted": {
            "description": "If the asset is delisted.",
            "type": "boolean"
          },
          "isCreatedForBundle": {
            "description": "If the asset is part of a bundle.",
            "type": "boolean"
          }
        }
      },
      "Roblox.ItemConfiguration.Api.AssetCreationsResponse": {
        "description": "Asset Status response model.",
        "type": "object",
        "properties": {
          "assetId": {
            "format": "int64",
            "description": "The asset Id.",
            "type": "integer"
          },
          "name": {
            "description": "The asset name.",
            "type": "string"
          }
        }
      },
      "Roblox.ItemConfiguration.Api.CreateItemTagRequest": {
        "description": "Request model to add a tag to an item.",
        "type": "object",
        "properties": {
          "itemId": {
            "description": "Gets or sets the item Id.",
            "type": "string"
          },
          "tagId": {
            "description": "Gets or sets the tag Id.",
            "type": "string"
          }
        }
      },
      "Roblox.ItemConfiguration.Api.ItemTagDetails": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Gets or sets the item tag id.",
            "type": "string"
          },
          "tag": {
            "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.TagDetails"
          }
        }
      },
      "Roblox.ItemConfiguration.Api.ItemTagsMetadataResponse": {
        "description": "Item-tags related metadata response model.",
        "type": "object",
        "properties": {
          "isItemTagsFeatureEnabled": {
            "description": "Gets or sets a value indicating whether the item tags feature is enabled.",
            "type": "boolean"
          },
          "enabledAssetTypes": {
            "description": "Gets or sets the asset types where item tagging is enabled.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maximumItemTagsPerItem": {
            "format": "int32",
            "description": "Gets or sets the maximum item tags per item limit.",
            "type": "integer"
          }
        }
      },
      "Roblox.ItemConfiguration.Api.ItemWithTags": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Gets or sets the item id.",
            "type": "string"
          },
          "itemTags": {
            "description": "Gets or sets the item tag details related to this item.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.ItemTagDetails"
            }
          }
        }
      },
      "Roblox.ItemConfiguration.Api.PriceConfigurationModel": {
        "description": "Defines the configuration options for an items price.",
        "type": "object",
        "properties": {
          "priceInRobux": {
            "format": "int64",
            "description": "Gets or sets the standard price of the item in Robux.",
            "type": "integer"
          },
          "premiumDiscountPercentage": {
            "format": "int32",
            "description": "Gets or sets the discount rate on the price of the item that is given to premium users\r\nShould not be used while applying a PremiumPriceInRobux.",
            "type": "integer"
          },
          "premiumPriceInRobux": {
            "format": "int64",
            "description": "Gets or sets the price of the item in Robux that applies only to premium users\r\nShould not be used while applying a PremiumDiscountPercentage.",
            "type": "integer"
          },
          "priceOffset": {
            "format": "int64",
            "description": "Gets or sets the price offset of the item in Robux above the price floor.",
            "type": "integer"
          }
        }
      },
      "Roblox.ItemConfiguration.Api.ReleaseConfigurationResponseModel": {
        "description": "Defines the configuration options associated with releasing an item.",
        "type": "object",
        "properties": {
          "saleAvailabilityLocations": {
            "description": "Get or sets the sale availability locations list.",
            "type": "array",
            "items": {
              "description": " ['Undefined' = 0, 'Catalog' = 1, 'AllUniverses' = 2, 'MyUniverses' = 3]",
              "enum": ["Undefined", "Catalog", "AllUniverses", "MyUniverses"],
              "type": "string"
            }
          }
        }
      },
      "Roblox.ItemConfiguration.Api.TagDetails": {
        "description": "The tag model for any tag-related gets.",
        "type": "object",
        "properties": {
          "tagId": {
            "description": "Gets or sets the tag Id.",
            "type": "string"
          },
          "name": {
            "description": "Gets or sets the name of the tag.",
            "type": "string"
          },
          "localizedDisplayName": {
            "description": "Gets or sets the localized display name of the tag.",
            "type": "string"
          },
          "status": {
            "description": "Gets or sets the status for the fetch of this tag. ['Success' = 0, 'MissingItem' = 1]",
            "enum": ["Success", "MissingItem"],
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.ItemWithTags_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.ItemWithTags"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.ItemConfiguration.Api.TagDetails_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.TagDetails"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.ItemConfiguration.Api.AssetCreationsResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.ItemConfiguration.Api.AssetCreationsResponse"
            }
          }
        }
      },
      "Roblox.Locale.Api.CountryRegion": {
        "description": "Model for Country Regions",
        "type": "object",
        "properties": {
          "code": {
            "description": "code of country region",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "native name of country region",
            "type": "string",
            "readOnly": true
          },
          "displayName": {
            "description": "localized name of country region. Example \"Afghanistan\"",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Roblox.Locale.Api.CountryRegionListResponse": {
        "description": "Returns list of supported country/regions",
        "type": "object",
        "properties": {
          "countryRegionList": {
            "description": "List of supported country/regions. Will be empty on error.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Locale.Api.CountryRegion"
            }
          }
        }
      },
      "Roblox.Locale.Api.Language": {
        "description": "Model for Language",
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "description": "id of language",
            "type": "integer"
          },
          "name": {
            "description": "name of language",
            "type": "string"
          },
          "nativeName": {
            "description": "native name of language",
            "type": "string"
          },
          "languageCode": {
            "description": "language code of language",
            "type": "string"
          },
          "isRightToLeft": {
            "description": "whether or not the language is read right-to-left",
            "type": "boolean"
          }
        }
      },
      "Roblox.Locale.Api.SetShowRobloxTranslationsRequest": {
        "description": "Request entity to set the ShowRobloxTranslations field for an account",
        "type": "object",
        "properties": {
          "showRobloxTranslations": {
            "description": "Value to set the ShowRobloxTranslations field to",
            "type": "boolean"
          }
        }
      },
      "Roblox.Locale.Api.SetSupportedLocaleForUserRequest": {
        "description": "Request entity to set Supported Locale for user",
        "type": "object",
        "properties": {
          "supportedLocaleCode": {
            "description": "SupportedLocale code",
            "type": "string"
          }
        }
      },
      "Roblox.Locale.Api.SuccessResponse": {
        "description": "Tells the operation is successful or not",
        "type": "object",
        "properties": {
          "success": {
            "description": "Returns true on success otherwise false",
            "type": "boolean"
          }
        }
      },
      "Roblox.Locale.Api.SupportedLocale": {
        "description": "Model for Supported locale",
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "description": "id of supported locale",
            "type": "integer",
            "readOnly": true
          },
          "locale": {
            "description": "locale of supported locale. Example \"en-us\"",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "Name of supported locale.",
            "type": "string",
            "readOnly": true
          },
          "nativeName": {
            "description": "Name of supported locale in native language. Example \"English\"",
            "type": "string",
            "readOnly": true
          },
          "language": {
            "$ref": "#/components/schemas/Roblox.Locale.Api.Language"
          }
        }
      },
      "Roblox.Locale.Api.SupportedLocaleLocus": {
        "description": "Model for Supported locale with user locus information",
        "type": "object",
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocale"
          },
          "isEnabledForFullExperience": {
            "description": "Is locale enabled for full experience",
            "type": "boolean"
          },
          "isEnabledForSignupAndLogin": {
            "description": "Is locale enabled for signup and login",
            "type": "boolean"
          },
          "isEnabledForInGameUgc": {
            "description": "Is locale enabled for in game ugc",
            "type": "boolean"
          }
        }
      },
      "Roblox.Locale.Api.SupportedLocalesResponse": {
        "description": "Returns list of supported locales",
        "type": "object",
        "properties": {
          "supportedLocales": {
            "description": "List of supported locales. Will be empty on error.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocale"
            }
          }
        }
      },
      "Roblox.Locale.Api.UserLocaleResponse": {
        "type": "object",
        "properties": {
          "supportedLocale": {
            "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocale"
          },
          "nativeLanguage": {
            "$ref": "#/components/schemas/Roblox.Locale.Api.Language"
          }
        }
      },
      "Roblox.Locale.Api.UserLocalizationLocusLocalesResponse": {
        "description": "Returns available Roblox.Locale.Api.SupportedLocale models.",
        "type": "object",
        "properties": {
          "signupAndLogin": {
            "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocale"
          },
          "generalExperience": {
            "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocale"
          },
          "ugc": {
            "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocale"
          },
          "showRobloxTranslations": {
            "description": "Whether Roblox-suggested translations should be shown to the user.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Locale.Api.SupportedLocaleLocus_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Locale.Api.SupportedLocaleLocus"
            }
          }
        }
      },
      "Roblox.InGameContentTables.Client.GameLocation": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.AutoLocalizationMetadataResponse": {
        "type": "object",
        "properties": {
          "isReactVersionEnabledForAutoLocalizationSettings": {
            "description": "Is React Implementation of AutoLocalization Settings Enabled",
            "type": "boolean"
          },
          "isTabbedUIEnabledForConfigureLocalizationPage": {
            "description": "Is Tabbed UI Enabled for Configure Localization Page",
            "type": "boolean"
          },
          "isAutomaticTranslationToggleUIEnabled": {
            "description": "Is Toggle UI Enabled for Automatic Translations",
            "type": "boolean"
          },
          "isAutomaticTranslationQuotaUIEnabled": {
            "description": "Is Quota UI Enabled for Automatic Translations",
            "type": "boolean"
          }
        }
      },
      "Roblox.LocalizationTables.Api.AutoScrapeEntry": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "screenshot": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.AutoScrapeEntryMetadata"
          }
        }
      },
      "Roblox.LocalizationTables.Api.AutoScrapeEntryMetadata": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "osPlatform": {
            "type": "string"
          },
          "sessionId": {
            "format": "uuid",
            "type": "string"
          },
          "matchedEntry": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.MatchedEntry"
          }
        }
      },
      "Roblox.LocalizationTables.Api.CreateTableRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "ownerType": {
            "enum": ["User", "Group"],
            "type": "string"
          },
          "ownerId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.CreateTableResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "assetId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.CursorEntryIdentifier": {
        "description": "A model that contains an entry identifier and an associated cursor for paged lookups.",
        "type": "object",
        "properties": {
          "cursor": {
            "description": "The location to begin our query.",
            "type": "string"
          },
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifier"
          },
          "count": {
            "format": "int32",
            "description": "The translation history count to get.",
            "type": "integer"
          },
          "sortOrder": {
            "description": "In which order the data is sorted. ['Asc' = 1, 'Desc' = 2]",
            "enum": ["Asc", "Desc"],
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.Entry": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifier"
          },
          "metadata": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryMetadata"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Translation"
            }
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.EntryIdentifier": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.EntryIdentifierWithTranslation": {
        "type": "object",
        "properties": {
          "translation": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Translation"
          },
          "key": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.EntryMetadata": {
        "type": "object",
        "properties": {
          "example": {
            "type": "string"
          },
          "gameLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.InGameContentTables.Client.GameLocation"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.EntryOperationLimits": {
        "type": "object",
        "properties": {
          "maxContextLength": {
            "format": "int32",
            "description": "Maximum character limit for entry context",
            "type": "integer"
          },
          "maxKeyLength": {
            "format": "int32",
            "description": "Maximum character limit for entry key",
            "type": "integer"
          },
          "maxSourceLength": {
            "format": "int32",
            "description": "Maximum character limit for entry source text",
            "type": "integer"
          },
          "maxExampleLength": {
            "format": "int32",
            "description": "Maximum character limit for entry example",
            "type": "integer"
          },
          "maxGameLocationPathLength": {
            "format": "int32",
            "description": "Maximum character limit for game location path",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.EntryTranslationFeedback": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifierWithTranslation"
          },
          "feedbackCount": {
            "format": "int32",
            "description": "The number of unique reporters that send feedback to the given entry identifier.",
            "type": "integer"
          },
          "playerSuggestionText": {
            "description": "A set of player translation suggestion in text for the given entry identifier.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reasons": {
            "description": "A set of translation feedback reasons for the given entry identifier.",
            "type": "array",
            "items": {
              "description": "Enum for translation feedback reason. ['None' = 0, 'Untranslated' = 1, 'Inaccurate' = 2, 'SpellingOrGrammar' = 3, 'Inappropriate' = 4]",
              "enum": [
                "None",
                "Untranslated",
                "Inaccurate",
                "SpellingOrGrammar",
                "Inappropriate"
              ],
              "type": "string"
            }
          },
          "robloxSuggestionText": {
            "description": "Roblox translation suggestion in text for the given entry identifier.",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.EntryTranslationHistoryPaged": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifier"
          },
          "history": {
            "description": "A batch of TranslationHistory for the given entry identifier.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.TranslationHistory"
            }
          },
          "nextCursor": {
            "description": "The cursor to send up on the next request if more history data is required.",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.Error": {
        "type": "object",
        "properties": {
          "errorCode": {
            "format": "int32",
            "type": "integer"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.FailedEntry": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Error"
          },
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifier"
          },
          "metadata": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryMetadata"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Translation"
            }
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.FailedEntryTranslationHistoryPaged": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifier"
          },
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "error": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Error"
          }
        }
      },
      "Roblox.LocalizationTables.Api.GameAutolocalizationInformationResponse": {
        "type": "object",
        "properties": {
          "isAutolocalizationEnabled": {
            "type": "boolean"
          },
          "isAutomaticEntriesSettingEnabled": {
            "type": "boolean"
          },
          "isAutomaticEntriesDeletionEnabled": {
            "type": "boolean"
          },
          "shouldUseLocalizationTable": {
            "type": "boolean"
          },
          "autoLocalizationTableId": {
            "format": "uuid",
            "type": "string"
          },
          "sourceLanguage": {
            "type": "string"
          },
          "assetId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetLimitsResponse": {
        "type": "object",
        "properties": {
          "entryOperationLimits": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryOperationLimits"
          },
          "tableOperationLimits": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.TableOperationLimits"
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetTableEntriesPagedResponse": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Entry"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetTableEntriesTranslationFeedbackRequest": {
        "description": "A request model for GetTableEntriesTranslationFeedback.",
        "type": "object",
        "properties": {
          "sourceLocale": {
            "description": "locale code of source language, we only accept language code at the moment.",
            "type": "string"
          },
          "entries": {
            "description": "entry identifier",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifierWithTranslation"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetTableEntriesTranslationFeedbackResponse": {
        "description": "A response model for GetTableEntriesTranslationFeedback.",
        "type": "object",
        "properties": {
          "tableId": {
            "format": "uuid",
            "description": "The entries' tableId.",
            "type": "string"
          },
          "entries": {
            "description": "The entries with their identifier, translation feedback details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryTranslationFeedback"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryRequest": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.CursorEntryIdentifier"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetTableEntriesTranslationHistoryResponse": {
        "description": "A response model for GetTableEntriesTranslationHistory.",
        "type": "object",
        "properties": {
          "tableId": {
            "format": "uuid",
            "description": "The entries' tableId.",
            "type": "string"
          },
          "locale": {
            "description": "The locale of the translations.",
            "type": "string"
          },
          "entries": {
            "description": "The entries with their identifier, translation history, and next cursor.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryTranslationHistoryPaged"
            }
          },
          "failedEntries": {
            "description": "The failed entries.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.FailedEntryTranslationHistoryPaged"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetTableEntryCountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "entryCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.GetTableResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerType": {
            "description": "Enum for valid OwnerTypes. ['User' = 0, 'Group' = 1]",
            "enum": ["User", "Group"],
            "type": "string"
          },
          "ownerId": {
            "format": "int64",
            "type": "integer"
          },
          "assetId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.IngestAutoScrapedContentForGameRequest": {
        "description": "An ingest content request to IngestAutoScrapedContentForGame.",
        "type": "object",
        "properties": {
          "entries": {
            "description": "The entries of an ingest content request.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.AutoScrapeEntry"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.IngestContentMetadata"
          }
        }
      },
      "Roblox.LocalizationTables.Api.IngestContentMetadata": {
        "description": "The metadata of an ingest content request.",
        "type": "object",
        "properties": {
          "placeInformation": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.IngestContentMetadataPlaceInformation"
          }
        }
      },
      "Roblox.LocalizationTables.Api.IngestContentMetadataPlaceInformation": {
        "description": "The place information metadata of an ingest content request.",
        "type": "object",
        "properties": {
          "placeId": {
            "format": "int64",
            "description": "The place id of an ingest content request.",
            "type": "integer"
          },
          "placeVersionNumber": {
            "format": "int32",
            "description": "The place version number of an ingest content request.",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.LocalizationTablesMetadataResponse": {
        "type": "object",
        "properties": {
          "isBulkUploadFeatureEnabled": {
            "description": "Is bulk upload feature enabled",
            "type": "boolean"
          },
          "isCsvDownloadEnabled": {
            "description": "Is CSV download feature enabled",
            "type": "boolean"
          },
          "isAccessToTranslationMetaDataEnabled": {
            "description": "Is access to translation metadata feature enabled",
            "type": "boolean"
          },
          "isTranslationManagementRedirectionEnabled": {
            "description": "Is access to translation metadata feature enabled",
            "type": "boolean"
          },
          "isUntranslatedFilterEnabled": {
            "description": "Is untranslated filter on UI is enabled",
            "type": "boolean"
          },
          "isAutomaticTranslationFilterEnabled": {
            "description": "Is filter for automatic translations on UI is enabled",
            "type": "boolean"
          }
        }
      },
      "Roblox.LocalizationTables.Api.MatchedEntry": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "matchedParamIndex": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.ModifiedEntry": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifier"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Translation"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.PatchEntry": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryIdentifier"
          },
          "metadata": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.EntryMetadata"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.PatchTranslation"
            }
          },
          "delete": {
            "type": "boolean"
          }
        }
      },
      "Roblox.LocalizationTables.Api.PatchTranslation": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "translationText": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "changeAgent": {
            "$ref": "#/components/schemas/Roblox.Localizationtables.Localizationtables.V1.ChangeAgent"
          },
          "updatedTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.RaiseEventForAutoScrapedEntriesCleanupRequest": {
        "type": "object",
        "properties": {
          "maxAgeForFlush": {
            "description": "The time range to remove entries from. Following ISO 8601 Durations format",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.SetAutolocalizationSettingsForGameRequest": {
        "type": "object",
        "properties": {
          "isAutolocalizationEnabled": {
            "type": "boolean"
          },
          "isAutomaticEntriesSettingEnabled": {
            "type": "boolean"
          },
          "isAutomaticEntriesDeletionsEnabled": {
            "type": "boolean"
          },
          "shouldUseLocalizationTable": {
            "type": "boolean"
          }
        }
      },
      "Roblox.LocalizationTables.Api.SetAutolocalizationTableForGameRequest": {
        "type": "object",
        "properties": {
          "tableId": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.TableOperationLimits": {
        "type": "object",
        "properties": {
          "maxEntriesPerUpdate": {
            "format": "int32",
            "description": "Maximum number of entries for a patch request",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.Translation": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "translationText": {
            "type": "string"
          },
          "translator": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Translator"
          },
          "updatedTime": {
            "format": "date-time",
            "type": "string"
          },
          "feedbackCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.LocalizationTables.Api.TranslationHistory": {
        "description": "A model containing a translation, translator, and translation time.",
        "type": "object",
        "properties": {
          "translationText": {
            "description": "The translation provided by the translator.",
            "type": "string"
          },
          "translator": {
            "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.Translator"
          },
          "created": {
            "format": "date-time",
            "description": "The time the translation was provided.",
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.Translator": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "agentType": {
            "description": " ['User' = 0, 'Automation' = 1]",
            "enum": ["User", "Automation"],
            "type": "string"
          }
        }
      },
      "Roblox.LocalizationTables.Api.UpdateTableContentsRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.PatchEntry"
            }
          }
        }
      },
      "Roblox.LocalizationTables.Api.UpdateTableContentsResponse": {
        "type": "object",
        "properties": {
          "failedEntriesAndTranslations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.FailedEntry"
            }
          },
          "modifiedEntriesAndTranslations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.ModifiedEntry"
            }
          }
        }
      },
      "Roblox.Localizationtables.Localizationtables.V1.ChangeAgent": {
        "type": "object",
        "properties": {
          "ChangeAgentType": {
            "description": " ['Invalid' = 0, 'User' = 1, 'Automation' = 2, 'Default' = 3]",
            "enum": ["Invalid", "User", "Automation", "Default"],
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "OptionalIdCase": {
            "description": " ['None' = 0, 'Id' = 2]",
            "enum": ["None", "Id"],
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Roblox.Metrics.Api.RecordBundleLoadRequest": {
        "description": "Request parameters for tracking a bundle load.",
        "type": "object",
        "properties": {
          "bundleUrl": {
            "format": "uri",
            "description": "The bundle url that loaded.",
            "type": "string"
          },
          "bundleName": {
            "description": "The name of the bundle.",
            "type": "string"
          },
          "loadTimeInMilliseconds": {
            "format": "int64",
            "description": "How long it took to load.",
            "type": "integer"
          },
          "cdnProviderName": {
            "description": "The CDN that served the bundle.",
            "type": "string"
          },
          "loadState": {
            "format": "int32",
            "description": "Whether or not the bundle loaded successfully. ['Unknown' = 0, 'LoadSuccess' = 1, 'LoadFailure' = 2, 'ExecutionFailure' = 3]",
            "enum": [0, 1, 2, 3],
            "type": "integer"
          },
          "bundleContentType": {
            "format": "int32",
            "description": "The content type of the bundle. ['Unknown' = 0, 'JavaScript' = 1, 'Css' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          }
        }
      },
      "Roblox.Metrics.Api.RecordThumbnailLoadRequest": {
        "description": "Request to add measurement.",
        "type": "object",
        "properties": {
          "duration": {
            "format": "int32",
            "description": "The time it took in milliseconds for final thumbnail to load",
            "type": "integer"
          },
          "loadState": {
            "format": "int32",
            "description": "The load state. Roblox.Metrics.Api.ThumbnailLoadState ['Unknown' = 0, 'Complete' = 1, 'Timeout' = 2]",
            "enum": [0, 1, 2],
            "type": "integer"
          },
          "thumbnailType": {
            "description": "The type of thumbnail.",
            "type": "string"
          }
        }
      },
      "Roblox.Metrics.Api.ThumbnailLoadMetadataResponse": {
        "description": "Response for thumbnail metrics related metadata.",
        "type": "object",
        "properties": {
          "logRatio": {
            "format": "double",
            "description": "The probability that the metrics get logged",
            "type": "number"
          }
        }
      },
      "Roblox.Api.Notifications.Models.ChromeManifestModel": {
        "description": "Chrome Manifest to link GCM project to Chrome browser",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "gcm_sender_id": {
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.GameUpdateNotificationModel": {
        "description": "Model for a game update message to be displayed in notification stream.",
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "description": "ID of the game.",
            "type": "integer"
          },
          "rootPlaceId": {
            "format": "int64",
            "description": "ID of the game.",
            "type": "integer"
          },
          "createdOn": {
            "format": "date-time",
            "description": "Creation date of the update message.",
            "type": "string"
          },
          "createdOnKey": {
            "description": "Key of Creation date ticks (dynamo table sort key).",
            "type": "string"
          },
          "content": {
            "description": "Content of the update message.",
            "type": "string"
          },
          "universeName": {
            "description": "Name of the game.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.GetCurrentPushDestinationResponseModel": {
        "type": "object",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.UserPushDestination"
          },
          "statusMessage": {
            "description": "Message for the success response",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.GetMetadataResponseModel": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.PushNotificationClientMetadata"
          },
          "statusMessage": {
            "description": "Message for the success response",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.GetPushDestinationsResponseModel": {
        "type": "object",
        "properties": {
          "destinations": {
            "description": "List of destinations for the user push notification",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.UserPushDestination"
            }
          },
          "statusMessage": {
            "description": "Message for the success response",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.NotificationStreamEntriesModel": {
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "description": "Id of the notification stream entry",
            "type": "string"
          },
          "notificationSourceType": {
            "description": "Type of the notification source ['Test' = 0, 'FriendRequestReceived' = 1, 'FriendRequestAccepted' = 2, 'PartyInviteReceived' = 3, 'PartyMemberJoined' = 4, 'ChatNewMessage' = 5, 'PrivateMessageReceived' = 6, 'UserAddedToPrivateServerWhiteList' = 7, 'ConversationUniverseChanged' = 8, 'TeamCreateInvite' = 9, 'GameUpdate' = 10, 'DeveloperMetricsAvailable' = 11, 'GroupJoinRequestAccepted' = 12, 'Sendr' = 13, 'ExperienceInvitation' = 14]",
            "enum": [
              "Test",
              "FriendRequestReceived",
              "FriendRequestAccepted",
              "PartyInviteReceived",
              "PartyMemberJoined",
              "ChatNewMessage",
              "PrivateMessageReceived",
              "UserAddedToPrivateServerWhiteList",
              "ConversationUniverseChanged",
              "TeamCreateInvite",
              "GameUpdate",
              "DeveloperMetricsAvailable",
              "GroupJoinRequestAccepted",
              "Sendr",
              "ExperienceInvitation"
            ],
            "type": "string"
          },
          "eventDate": {
            "format": "date-time",
            "description": "Datetime when the notification stream entry event had occured",
            "type": "string"
          },
          "timestamp": {
            "description": "Relative timestamp for sendr notification stream entry",
            "type": "string"
          },
          "isInteracted": {
            "description": "Has the user interacted with the notification stream entry",
            "type": "boolean"
          },
          "metadataCollection": {
            "description": "List of metadata objects showing more details related to the notification stream entry",
            "type": "array",
            "items": {}
          },
          "eventCount": {
            "format": "int64",
            "description": "Count of events corresponding to the group of notification stream entry",
            "type": "integer"
          },
          "content": {
            "description": "Content object for sendr notification stream entry"
          }
        }
      },
      "Roblox.Api.Notifications.Models.NotificationUser": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the user",
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "description": "Id of the user",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Notifications.Models.PushNotificationClientMetadata": {
        "type": "object",
        "properties": {
          "notificationId": {
            "format": "uuid",
            "description": "Id for the push client notification",
            "type": "string"
          },
          "type": {
            "description": "Type of the push client notification",
            "type": "string"
          },
          "detail": {
            "description": "Details corresponding to the notification"
          },
          "fallbackDelivered": {
            "description": "Is fallback delivered for the notification metadata",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Notifications.Models.PushNotificationRegistration": {
        "type": "object",
        "properties": {
          "userPushNotificationDestinationId": {
            "format": "int64",
            "description": "Id of the push notification destination",
            "type": "integer"
          },
          "name": {
            "description": "Name of the push Notification destination",
            "type": "string"
          },
          "notificationToken": {
            "description": "Notification token",
            "type": "string"
          },
          "application": {
            "description": "Notification application\r\nExample : \"Roblox\"",
            "type": "string"
          },
          "platform": {
            "description": "Notification platform ['ChromeOnDesktop' = 0, 'AndroidNative' = 1, 'FirefoxOnDesktop' = 2, 'IOSNative' = 3, 'AndroidAmazon' = 4, 'IOSTencent' = 5, 'AndroidTencentService' = 6, 'IOSPushKit' = 7]",
            "enum": [
              "ChromeOnDesktop",
              "AndroidNative",
              "FirefoxOnDesktop",
              "IOSNative",
              "AndroidAmazon",
              "IOSTencent",
              "AndroidTencentService",
              "IOSPushKit"
            ],
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.RegisterAndroidRequestModel": {
        "type": "object",
        "properties": {
          "notificationToken": {
            "description": "Token for notification",
            "type": "string"
          },
          "authorizeForUser": {
            "description": "Is this call authorized for user",
            "type": "boolean"
          },
          "oldNotificationToken": {
            "description": "Old notification token",
            "type": "string"
          },
          "deviceName": {
            "description": "Name of the requesting device",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.RegisterIOSNativeRequestModel": {
        "type": "object",
        "properties": {
          "notificationToken": {
            "description": "Token for notification",
            "type": "string"
          },
          "destinationIdentifier": {
            "description": "Identifier string for the destination",
            "type": "string"
          },
          "authorizeForUser": {
            "description": "Is call authorized for user",
            "type": "boolean"
          },
          "oldNotificationToken": {
            "description": "Old notification token",
            "type": "string"
          },
          "deviceName": {
            "description": "Name of the requesting device",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.RegisterIOSPushKitRequestModel": {
        "type": "object",
        "properties": {
          "notificationToken": {
            "description": "Token for notification",
            "type": "string"
          },
          "destinationIdentifier": {
            "description": "Identifier string for the destination",
            "type": "string"
          },
          "authorizeForUser": {
            "description": "Is call authorized for user",
            "type": "boolean"
          },
          "oldNotificationToken": {
            "description": "Old notification token",
            "type": "string"
          },
          "deviceName": {
            "description": "Name of the requesting device",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.RegistrationResponseModel": {
        "type": "object",
        "properties": {
          "registration": {
            "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.PushNotificationRegistration"
          },
          "statusMessage": {
            "description": "Message for the success response",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.ResponseModels.NotificationStreamMetadataResponse": {
        "type": "object",
        "properties": {
          "bannerDismissTimeSpan": {
            "format": "int32",
            "type": "integer"
          },
          "signalRDisconnectionResponseInMilliseconds": {
            "format": "int64",
            "type": "integer"
          },
          "canLaunchGameFromGameUpdate": {
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Notifications.Models.SuccessResponseModel": {
        "type": "object",
        "properties": {
          "statusMessage": {
            "description": "Message for the success response",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.UnreadStreamNotificationsModel": {
        "type": "object",
        "properties": {
          "unreadNotifications": {
            "format": "int64",
            "description": "Count of unread notifications in the stream",
            "type": "integer"
          },
          "statusMessage": {
            "description": "Message for the success response",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Notifications.Models.UserPushDestination": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Api.Notifications.Models.NotificationUser"
          },
          "name": {
            "description": "Name of the destination",
            "type": "string"
          },
          "notificationToken": {
            "description": "Token for the corresponding notification",
            "type": "string"
          },
          "supportsUpdateNotifications": {
            "description": "Is Update notification feature supported",
            "type": "boolean"
          },
          "userPushNotificationDestinationId": {
            "format": "int64",
            "description": "Destination Id for the push notification",
            "type": "integer"
          },
          "application": {
            "description": "application for the corresponding notification\r\nExample : \"Roblox\"",
            "type": "string"
          },
          "platform": {
            "description": "Platform for the corresponding notification ['ChromeOnDesktop' = 0, 'AndroidNative' = 1, 'FirefoxOnDesktop' = 2, 'IOSNative' = 3, 'AndroidAmazon' = 4, 'IOSTencent' = 5, 'AndroidTencentService' = 6, 'IOSPushKit' = 7]",
            "enum": [
              "ChromeOnDesktop",
              "AndroidNative",
              "FirefoxOnDesktop",
              "IOSNative",
              "AndroidAmazon",
              "IOSTencent",
              "AndroidTencentService",
              "IOSPushKit"
            ],
            "type": "string"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.AnnouncementsDetailsResponse": {
        "description": "A message details response.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The message's ID.",
            "type": "integer"
          },
          "sender": {
            "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.VerifiedSkinnyUserResponse"
          },
          "subject": {
            "description": "The subject of the message.",
            "type": "string"
          },
          "body": {
            "description": "The body of the message.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "When the message was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the message was last updated.",
            "type": "string"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.AnnouncementsMetadataResponse": {
        "description": "A message details response.",
        "type": "object",
        "properties": {
          "numOfAnnouncements": {
            "format": "int32",
            "description": "Number of incoming news",
            "type": "integer"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.BatchMessagesRequest": {
        "type": "object",
        "properties": {
          "messageIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.BatchMessagesResponse": {
        "type": "object",
        "properties": {
          "failedMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.FailedMessageResponse"
            }
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.FailedMessageResponse": {
        "type": "object",
        "properties": {
          "messageId": {
            "format": "int64",
            "type": "integer"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.GetAnnouncementsResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.AnnouncementsDetailsResponse"
            }
          },
          "totalCollectionSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.GetMessagesResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.MessageDetailsResponse"
            }
          },
          "totalCollectionSize": {
            "format": "int64",
            "type": "integer"
          },
          "totalPages": {
            "format": "int32",
            "type": "integer"
          },
          "pageNumber": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.MessageDetailsResponse": {
        "description": "A message details response.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The message's ID.",
            "type": "integer"
          },
          "sender": {
            "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.VerifiedSkinnyUserResponse"
          },
          "recipient": {
            "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.VerifiedSkinnyUserResponse"
          },
          "subject": {
            "description": "The subject of the message.",
            "type": "string"
          },
          "body": {
            "description": "The body of the message.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "When the message was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "When the message was last updated.",
            "type": "string"
          },
          "isRead": {
            "description": "Whether or not the message has been read.",
            "type": "boolean"
          },
          "isSystemMessage": {
            "description": "Whether or not the message is a system message.",
            "type": "boolean"
          },
          "isReportAbuseDisplayed": {
            "description": "Whether or not the abuse report link is displayed for the message.",
            "type": "boolean"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.UnreadMessagesCountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.PrivateMessages.Api.Models.VerifiedSkinnyUserResponse": {
        "description": "A response model representing user basic information and the user's verified badge status.",
        "type": "object",
        "properties": {
          "hasVerifiedBadge": {
            "description": "Whether the user has a verified badge.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Publish.Api.AssetQuota": {
        "description": "Model for asset quota.",
        "type": "object",
        "properties": {
          "duration": {
            "description": "Duration type of the quota.",
            "type": "string"
          },
          "usage": {
            "format": "int64",
            "description": "Current usage of the quota.",
            "type": "integer"
          },
          "capacity": {
            "format": "int64",
            "description": "Capacity of the quota.",
            "type": "integer"
          },
          "expirationTime": {
            "description": "Expiration time of current usage limit.",
            "type": "string"
          }
        }
      },
      "Roblox.Publish.Api.AssetQuotasResponse": {
        "description": "Response model for asset quotas.",
        "type": "object",
        "properties": {
          "quotas": {
            "description": "A list of quotas.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Publish.Api.AssetQuota"
            }
          }
        }
      },
      "Roblox.Publish.Api.PublishAudioResponse": {
        "description": "Response model for publish audio.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "Id of the published asset.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the published asset.",
            "type": "string"
          }
        }
      },
      "Roblox.Publish.Api.UploadAudioRequest": {
        "description": "A request model for uploading an audio file.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name for the audio file.",
            "type": "string"
          },
          "file": {
            "description": "File to be uploaded. Formatted as a base64 string.",
            "type": "string"
          },
          "groupId": {
            "format": "int64",
            "description": "Id of the group you are publishing the audio asset for. Null if not publishing under a group.",
            "type": "integer"
          },
          "paymentSource": {
            "description": "The source of funds for payment.\r\n  User: Use personal funds of authenticated user.\r\n  Group: Use group funds from Roblox.Publish.Api.UploadAudioRequest.GroupId.\r\n  Null/Empty: Will default to authenticated user funds.",
            "type": "string"
          },
          "estimatedFileSize": {
            "format": "int64",
            "description": "Estimated file size of the audio file in bytes.",
            "type": "integer"
          },
          "estimatedDuration": {
            "format": "double",
            "description": "Estimated duration of the audio file in seconds.",
            "type": "number"
          },
          "assetPrivacy": {
            "format": "int32",
            "description": "The asset privacy of the audio asset.",
            "enum": [1, 2],
            "type": "integer"
          }
        }
      },
      "Roblox.Publish.Api.UploadResponse": {
        "description": "A response used when an upload has completed.",
        "type": "object",
        "properties": {
          "targetId": {
            "format": "int64",
            "description": "The target Id of the uploaded item.",
            "type": "integer"
          }
        }
      },
      "Roblox.Publish.Api.VerifyAudioRequest": {
        "description": "Request model to publish an audio asset.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Gets or sets the name of the audio asset.",
            "type": "string"
          },
          "file": {
            "description": "File to be uploaded. Formatted as a base64 string.",
            "type": "string"
          },
          "groupId": {
            "format": "int64",
            "description": "Gets or sets the ID of the group if applicable. Optional.",
            "type": "integer"
          },
          "paymentSource": {
            "description": "Gets or sets the payment source. 'User' or 'Group'. Required if Group ID is set.",
            "type": "string"
          },
          "fileSize": {
            "format": "int64",
            "description": "Gets or sets the size of the audio file in bytes.",
            "type": "integer"
          },
          "duration": {
            "format": "double",
            "description": "Gets or sets the duration of the audio in seconds.",
            "type": "number"
          }
        }
      },
      "Roblox.Publish.Api.VerifyAudioResponse": {
        "description": "Response model for verify audio endpoint.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the audio file.",
            "type": "string"
          },
          "price": {
            "format": "int64",
            "description": "Price in robux to publish the audio file.",
            "type": "integer"
          },
          "balance": {
            "format": "int64",
            "description": "User's current Robux balance.",
            "type": "integer"
          },
          "canAfford": {
            "description": "Boolean, true if the user can afford to purchase the publishing of the audio file.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Thumbnails.Api.Models.UniverseThumbnailsResponse": {
        "description": "A response model for thumbnails which belong to a specific universe ID",
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "description": "Integer universe ID",
            "type": "integer"
          },
          "error": {
            "$ref": "#/components/schemas/Roblox.Web.WebAPI.Models.ApiErrorModel"
          },
          "thumbnails": {
            "description": "An array of ThumbnailResponse objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
            }
          }
        }
      },
      "Roblox.Thumbnails.Apis.Models.ThumbnailBatchRequest": {
        "type": "object",
        "properties": {
          "requestId": {
            "description": "The request id. (Generated client side, used to represent the items in the request)",
            "type": "string"
          },
          "targetId": {
            "format": "int64",
            "description": "The thumbnail target id",
            "type": "integer"
          },
          "token": {
            "description": "Alternative ase token used to identify a thumbnail",
            "type": "string"
          },
          "alias": {
            "description": "Alternative string used to identify a thumbnail\r\ninstead of targetId",
            "type": "string"
          },
          "type": {
            "description": "The type of the thumbnails ['Avatar' = 1, 'AvatarHeadShot' = 2, 'GameIcon' = 3, 'BadgeIcon' = 4, 'GameThumbnail' = 5, 'GamePass' = 6, 'Asset' = 7, 'BundleThumbnail' = 8, 'Outfit' = 9, 'GroupIcon' = 10, 'DeveloperProduct' = 11, 'AvatarBust' = 12, 'AutoGeneratedAsset' = 13, 'PlaceIcon' = 14, 'AutoGeneratedGameIcon' = 15, 'ForceAutoGeneratedGameIcon' = 16, 'Look' = 17, 'CreatorContextAsset' = 18, 'Screenshot' = 19]",
            "enum": [
              "Avatar",
              "AvatarHeadShot",
              "GameIcon",
              "BadgeIcon",
              "GameThumbnail",
              "GamePass",
              "Asset",
              "BundleThumbnail",
              "Outfit",
              "GroupIcon",
              "DeveloperProduct",
              "AvatarBust",
              "AutoGeneratedAsset",
              "PlaceIcon",
              "AutoGeneratedGameIcon",
              "ForceAutoGeneratedGameIcon",
              "Look",
              "CreatorContextAsset",
              "Screenshot"
            ],
            "type": "string"
          },
          "size": {
            "description": "The thumbnail size",
            "type": "string"
          },
          "format": {
            "description": "The thumbnail format",
            "type": "string"
          },
          "isCircular": {
            "description": "Is the thumbnail circular shape",
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.Responses.Thumbnails.ThumbnailBatchResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string"
          },
          "errorCode": {
            "format": "int32",
            "type": "integer"
          },
          "errorMessage": {
            "type": "string"
          },
          "targetId": {
            "format": "int64",
            "type": "integer"
          },
          "state": {
            "description": " ['Error' = 0, 'Completed' = 1, 'InReview' = 2, 'Pending' = 3, 'Blocked' = 4, 'TemporarilyUnavailable' = 5]",
            "enum": [
              "Error",
              "Completed",
              "InReview",
              "Pending",
              "Blocked",
              "TemporarilyUnavailable"
            ],
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.Responses.Thumbnails.ThumbnailResponse": {
        "type": "object",
        "properties": {
          "targetId": {
            "format": "int64",
            "type": "integer"
          },
          "state": {
            "description": " ['Error' = 0, 'Completed' = 1, 'InReview' = 2, 'Pending' = 3, 'Blocked' = 4, 'TemporarilyUnavailable' = 5]",
            "enum": [
              "Error",
              "Completed",
              "InReview",
              "Pending",
              "Blocked",
              "TemporarilyUnavailable"
            ],
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiErrorModel": {
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "userFacingMessage": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "fieldData": {}
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Thumbnails.Api.Models.UniverseThumbnailsResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Thumbnails.Api.Models.UniverseThumbnailsResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailBatchResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailBatchResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Web.Responses.Thumbnails.ThumbnailResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Web.Responses.Thumbnails.ThumbnailResponse"
            }
          }
        }
      },
      "Roblox.Trades.Api.CanTradeResponse": {
        "type": "object",
        "properties": {
          "canTrade": {
            "description": "Returns true if you can trade with the given user.",
            "type": "boolean"
          },
          "status": {
            "format": "int32",
            "description": "If you can't trade with a user, status explains why you can't trade with them. ['Unknown' = 0, 'CanTrade' = 1, 'CannotTradeWithSelf' = 2, 'SenderCannotTrade' = 3, 'ReceiverCannotTrade' = 4, 'SenderPrivacyTooStrict' = 5, 'UsersCannotTrade' = 6, 'TradeAccepterNeedsFriction' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          }
        }
      },
      "Roblox.Trades.Api.TradeCountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.Trades.Api.TradeDetailResponse": {
        "type": "object",
        "properties": {
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Trades.Api.TradeOfferResponse"
            }
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "status": {
            "description": " ['Unknown' = 1, 'Open' = 2, 'Pending' = 3, 'Completed' = 4, 'Expired' = 5, 'Declined' = 6, 'RejectedDueToError' = 7, 'Countered' = 8, 'Processing' = 9, 'InterventionRequired' = 10, 'TwoStepVerificationRequired' = 11]",
            "enum": [
              "Unknown",
              "Open",
              "Pending",
              "Completed",
              "Expired",
              "Declined",
              "RejectedDueToError",
              "Countered",
              "Processing",
              "InterventionRequired",
              "TwoStepVerificationRequired"
            ],
            "type": "string"
          }
        }
      },
      "Roblox.Trades.Api.TradeMetadata": {
        "type": "object",
        "properties": {
          "maxItemsPerSide": {
            "format": "int32",
            "type": "integer"
          },
          "minValueRatio": {
            "format": "float",
            "type": "number"
          },
          "tradeSystemMaxRobuxPercent": {
            "format": "float",
            "type": "number"
          },
          "tradeSystemRobuxFee": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "Roblox.Trades.Api.TradeOfferResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse"
          },
          "userAssets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Trades.Api.UserAssetResponse"
            }
          },
          "robux": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.Trades.Api.TradeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "status": {
            "description": " ['Unknown' = 1, 'Open' = 2, 'Pending' = 3, 'Completed' = 4, 'Expired' = 5, 'Declined' = 6, 'RejectedDueToError' = 7, 'Countered' = 8, 'Processing' = 9, 'InterventionRequired' = 10, 'TwoStepVerificationRequired' = 11]",
            "enum": [
              "Unknown",
              "Open",
              "Pending",
              "Completed",
              "Expired",
              "Declined",
              "RejectedDueToError",
              "Countered",
              "Processing",
              "InterventionRequired",
              "TwoStepVerificationRequired"
            ],
            "type": "string"
          }
        }
      },
      "Roblox.Trades.Api.UserAssetResponse": {
        "description": "A model containing information about a UserAsset.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The user asset id",
            "type": "integer"
          },
          "serialNumber": {
            "format": "int64",
            "description": "The serial number of the user asset",
            "type": "integer"
          },
          "assetId": {
            "format": "int64",
            "description": "The asset id of the user asset",
            "type": "integer"
          },
          "name": {
            "description": "The asset name of the asset",
            "type": "string"
          },
          "recentAveragePrice": {
            "format": "int64",
            "description": "The recent average price of the asset",
            "type": "integer"
          },
          "originalPrice": {
            "format": "int64",
            "description": "The original price of the asset",
            "type": "integer"
          },
          "assetStock": {
            "format": "int64",
            "description": "The asset stock.",
            "type": "integer"
          },
          "membershipType": {
            "format": "int32",
            "description": "The minimum MembershipType required to own the userAsset. ['None' = 0, 'BC' = 1, 'TBC' = 2, 'OBC' = 3, 'RobloxPremium' = 4]",
            "enum": [0, 1, 2, 3, 4],
            "type": "integer"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Trades.Api.TradeResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Trades.Api.TradeResponse"
            }
          }
        }
      },
      "Roblox.Trades.Api.Models.V2.GetUserTradableItemsResponse": {
        "description": "The response for the GetUserTradableItems endpoint.",
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "description": "The ID of the user.",
            "type": "integer"
          },
          "items": {
            "description": "The items that the user can trade.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.TradableItem"
            }
          },
          "nextPageCursor": {
            "description": "The cursor for the next page of items.",
            "type": "string"
          }
        }
      },
      "Roblox.Trades.Api.Models.V2.ItemTarget": {
        "description": "The underlying of a tradable item.",
        "type": "object",
        "properties": {
          "itemType": {
            "description": "The type of the underlying. ['Unknown' = 0, 'Asset' = 1, 'Bundle' = 2]",
            "enum": ["Unknown", "Asset", "Bundle"],
            "type": "string"
          },
          "targetId": {
            "description": "The id of the underlying.",
            "type": "string"
          }
        }
      },
      "Roblox.Trades.Api.Models.V2.TradableItem": {
        "description": "A tradable item.",
        "type": "object",
        "properties": {
          "collectibleItemId": {
            "description": "The collectible item id.",
            "type": "string"
          },
          "itemTarget": {
            "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.ItemTarget"
          },
          "itemName": {
            "description": "The name of the item.",
            "type": "string"
          },
          "originalPrice": {
            "format": "int64",
            "description": "The original price of the item.",
            "type": "integer"
          },
          "recentAveragePrice": {
            "format": "int64",
            "description": "The recent average price of the item.",
            "type": "integer"
          },
          "assetStock": {
            "format": "int64",
            "description": "Total quantity of the item.",
            "type": "integer"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.TradableItemInstance"
            }
          }
        }
      },
      "Roblox.Trades.Api.Models.V2.TradableItemInstance": {
        "description": "A tradable item instance.",
        "type": "object",
        "properties": {
          "collectibleItemInstanceId": {
            "description": "The collectible item instance id.",
            "type": "string"
          },
          "itemTarget": {
            "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.ItemTarget"
          },
          "itemName": {
            "description": "The name of the item.",
            "type": "string"
          },
          "serialNumber": {
            "format": "int64",
            "description": "The serial number of the item if it is LimitedUnique.",
            "type": "integer"
          },
          "originalPrice": {
            "format": "int64",
            "description": "The original price of the item.",
            "type": "integer"
          },
          "recentAveragePrice": {
            "format": "int64",
            "description": "The recent average price of the item.",
            "type": "integer"
          },
          "assetStock": {
            "format": "int64",
            "description": "Total quantity of the item.",
            "type": "integer"
          },
          "isOnHold": {
            "description": "Whether the item is on hold.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Trades.Api.Models.V2.TradeDetailsResponse": {
        "description": "The response for the TradeDetailsV2 endpoint.",
        "type": "object",
        "properties": {
          "tradeId": {
            "format": "int64",
            "description": "The ID of the trade.",
            "type": "integer"
          },
          "status": {
            "description": "The status of the trade. ['Unknown' = 1, 'Open' = 2, 'Pending' = 3, 'Completed' = 4, 'Expired' = 5, 'Declined' = 6, 'RejectedDueToError' = 7, 'Countered' = 8, 'Processing' = 9, 'InterventionRequired' = 10, 'TwoStepVerificationRequired' = 11]",
            "enum": [
              "Unknown",
              "Open",
              "Pending",
              "Completed",
              "Expired",
              "Declined",
              "RejectedDueToError",
              "Countered",
              "Processing",
              "InterventionRequired",
              "TwoStepVerificationRequired"
            ],
            "type": "string"
          },
          "participantAOffer": {
            "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.TradeOffer"
          },
          "participantBOffer": {
            "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.TradeOffer"
          }
        }
      },
      "Roblox.Trades.Api.Models.V2.TradeOffer": {
        "description": "Represents a trade offer.",
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Roblox.Web.Responses.Users.SkinnyUserResponse"
          },
          "robux": {
            "format": "int64",
            "description": "The amount of Robux in the trade offer.",
            "type": "integer"
          },
          "items": {
            "description": "The items in the trade offer.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Trades.Api.Models.V2.TradableItemInstance"
            }
          }
        }
      },
      "Roblox.GameLocalization.Client.GameLocalizationRoles.Assignee": {
        "type": "object",
        "properties": {
          "assigneeType": {
            "description": " ['User' = 0, 'Group' = 1, 'GroupRole' = 2]",
            "enum": ["user", "group", "groupRole"],
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleAssignment": {
        "type": "object",
        "properties": {
          "gameId": {
            "format": "int64",
            "type": "integer"
          },
          "assignee": {
            "$ref": "#/components/schemas/Roblox.GameLocalization.Client.GameLocalizationRoles.Assignee"
          }
        }
      },
      "Roblox.TranslationRoles.Api.Assignee": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "description": " ['User' = 0, 'Group' = 1, 'GroupRole' = 2]",
            "enum": ["user", "group", "groupRole"],
            "type": "string"
          }
        }
      },
      "Roblox.TranslationRoles.Api.GetGameLocalizationRoleAssignmentsForUserResponse": {
        "description": "Response model containing a list of games and associated role assignment info for the requested user and role.",
        "type": "object",
        "properties": {
          "games": {
            "description": "List of games with associated role assignment info.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleAssignment"
            }
          },
          "previousPageCursor": {
            "description": "Cursor which can be used for navigating to previous page.",
            "type": "string"
          },
          "nextPageCursor": {
            "description": "Cursor which can be used for navigating to next page.",
            "type": "string"
          }
        }
      },
      "Roblox.TranslationRoles.Api.UpdateRoleRequest": {
        "description": "The request body for update role endpoints",
        "type": "object",
        "properties": {
          "assigneeId": {
            "format": "int64",
            "description": "The id of the assignee",
            "type": "integer"
          },
          "assigneeType": {
            "description": "The type of the assignee ['User' = 0, 'Group' = 1, 'GroupRole' = 2]",
            "enum": ["user", "group", "groupRole"],
            "type": "string"
          },
          "role": {
            "description": "The role to be assigned or revoked ['Translator' = 0]",
            "enum": ["translator"],
            "type": "string"
          },
          "revoke": {
            "description": "To assign or to revoke",
            "type": "boolean"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.TranslationRoles.Api.Assignee_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.TranslationRoles.Api.Assignee"
            }
          }
        }
      },
      "Roblox.TwoStepVerification.Api.ClearRecoveryCodesRequest": {
        "description": "Request information needed to clear existing recovery codes.",
        "type": "object",
        "properties": {
          "password": {
            "description": "The user's password.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.DisableSecurityKeyRequest": {
        "description": "Request information needed to disable two step verification.",
        "type": "object",
        "properties": {
          "credentialNicknames": {
            "description": "A array of nicknames of credentials to be deleted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest": {
        "description": "Request information needed to disable two step verification.",
        "type": "object",
        "properties": {
          "password": {
            "description": "The user's password.",
            "type": "string"
          },
          "reauthenticationToken": {
            "description": "A re-authentication token redeemable for any password check.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.EnableAuthenticatorResponse": {
        "description": "Response parameters for initiating enabling authenticator-based two step verification.",
        "type": "object",
        "properties": {
          "setupToken": {
            "description": "The setup token for turning on authenticator.",
            "type": "string"
          },
          "qrCodeImageUrl": {
            "description": "The Url to the QR code image to scan into the authenticator app.",
            "type": "string"
          },
          "manualEntryKey": {
            "description": "The manual entry key to input into the authenticator app.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.EnableSecurityKeyResponse": {
        "description": "Response parameters for initiating enabling security key-based two step verification.",
        "type": "object",
        "properties": {
          "creationOptions": {
            "description": "The credential registration options for the hardware key.",
            "type": "string"
          },
          "sessionId": {
            "description": "The session of the registration attempt.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest": {
        "description": "Request parameters for enabling two step verification.",
        "type": "object",
        "properties": {
          "password": {
            "description": "The user's password.",
            "type": "string"
          },
          "secureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.Models.Request.SecureAuthenticationIntentModel"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.EnableVerifyAuthenticatorRequest": {
        "description": "Request parameters for authenticator enabling-verify.",
        "type": "object",
        "properties": {
          "setupToken": {
            "description": "The setup token from the enable authenticator request.",
            "type": "string"
          },
          "code": {
            "description": "The code from the authenticator app.",
            "type": "string"
          },
          "password": {
            "description": "The user's password.",
            "type": "string"
          },
          "secureAuthenticationIntent": {
            "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.Models.Request.SecureAuthenticationIntentModel"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.EnableVerifyAuthenticatorResponse": {
        "description": "Response parameters for finishing enabling authenticator-based two-step verification.",
        "type": "object",
        "properties": {
          "recoveryCodes": {
            "description": "Recovery codes automatically generated for the user (when applicable; the user should\r\nnot already have a set of recovery codes).",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.TwoStepVerification.Api.EnableVerifySecurityKeyRequest": {
        "description": "Request information needed to complete the registration of a security key.",
        "type": "object",
        "properties": {
          "sessionId": {
            "description": "The session of the registration attempt.",
            "type": "string"
          },
          "credentialNickname": {
            "description": "The nickname of the new credential.",
            "type": "string"
          },
          "attestationResponse": {
            "description": "The hardware key's response.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.ListSecurityKeyResponse": {
        "description": "Response parameters for listing all credentials under a user.",
        "type": "object",
        "properties": {
          "credentials": {
            "description": "An array of credentials for a user.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.SecurityKeyCredential"
            }
          }
        }
      },
      "Roblox.TwoStepVerification.Api.MetadataResponse": {
        "description": "Two step verification system metadata.",
        "type": "object",
        "properties": {
          "twoStepVerificationEnabled": {
            "description": "Whether or not two step verification is globally enabled.",
            "type": "boolean"
          },
          "authenticatorQrCodeSize": {
            "description": "Authenticator QR code image dimensions.",
            "type": "string"
          },
          "emailCodeLength": {
            "format": "int32",
            "description": "Number of characters in an email-based two step verification code.",
            "type": "integer"
          },
          "authenticatorCodeLength": {
            "format": "int32",
            "description": "Number of characters in an authenticator-based two step verification code.",
            "type": "integer",
            "readOnly": true
          },
          "authenticatorHelpSiteAddress": {
            "description": "Address of the help site provided to users to help them with authenticator.",
            "type": "string"
          },
          "isPasswordRequiredForEnablingAuthenticator": {
            "description": "Whether or not a password is required for enabling authenticator.",
            "type": "boolean"
          },
          "isPasswordRequiredForEnablingEmailTwoStepVerification": {
            "description": "Whether or not a password is required for enabling email 2sv.",
            "type": "boolean"
          },
          "isUsingTwoStepWebviewComponent": {
            "description": "Whether or not we're using the new 2sv webview component or the manual pop up",
            "type": "boolean"
          },
          "isTwoStepEnabledRequiredForEmailPasswordRequirement": {
            "description": "Whether or not a 2sv method has to be enabled to require password when enabling email two step verification.",
            "type": "boolean"
          },
          "isTwoStepEnabledRequiredForAuthenticatorPasswordRequirement": {
            "description": "Whether or not a 2sv method has to be enabled to require password when enabling authenticator.",
            "type": "boolean"
          },
          "isSingleMethodEnforcementEnabled": {
            "description": "Whether or not the frontend should enforce single method logic.",
            "type": "boolean"
          },
          "isSmsTwoStepVerificationAvailable": {
            "description": "Whether or not sms two step verification is available for the user.",
            "type": "boolean"
          },
          "isSecurityKeyTwoStepVerificationAvailable": {
            "description": "Whether or not security key two step verification is available for the user.",
            "type": "boolean"
          },
          "isAuthenticatorWithVerifiedPhoneEnabled": {
            "description": "Whether or not someone can enable authenticator with just a verified phone number.",
            "type": "boolean"
          },
          "isPasswordRequiredForEnablingSecurityKey": {
            "description": "Whether or not a password is required for enabling Security Key 2SV.",
            "type": "boolean"
          },
          "isPasswordRequiredForEnablingSms2SV": {
            "description": "Whether or not a password is required for enabling SMS 2SV.",
            "type": "boolean"
          },
          "isPasswordRequiredForChangingRecoveryCodes": {
            "description": "Whether or not a password is required for making updates to recovery codes.",
            "type": "boolean"
          },
          "isPasswordRequiredForDisablingAuthenticator": {
            "description": "Whether or not a password is required for disabling authenticator.",
            "type": "boolean"
          },
          "isPasswordRequiredForDisablingEmailTwoStepVerification": {
            "description": "Whether or not a password is required for disabling email 2sv.",
            "type": "boolean"
          },
          "isPasswordRequiredForDisablingSms2SV": {
            "description": "Whether or not a password is required for disabling SMS 2SV.",
            "type": "boolean"
          },
          "isRecoveryCodeGenerationForAuthenticatorSetupEnabled": {
            "description": "Whether recovery code generation is attempted upon completion of authenticator setup.",
            "type": "boolean"
          },
          "isSecurityKeyOnAllPlatformsEnabled": {
            "description": "Whether security keys on all platforms is enabled.",
            "type": "boolean"
          },
          "receiveWarningsOnDisableTwoStep": {
            "description": "Whether users should receive additional warnings when disabling 2SV.",
            "type": "boolean"
          },
          "isAndroidSecurityKeyEnabled": {
            "description": "Whether Android security keys is enabled.",
            "type": "boolean"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.Models.Request.SecureAuthenticationIntentModel": {
        "description": "Model describing secure auth intent.",
        "type": "object",
        "properties": {
          "clientPublicKey": {
            "type": "string"
          },
          "clientEpochTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "saiSignature": {
            "type": "string"
          },
          "serverNonce": {
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.RecoveryCodesStatusResponse": {
        "description": "The response for getting the status of recovery codes for a user.",
        "type": "object",
        "properties": {
          "activeCount": {
            "format": "int32",
            "description": "The number of unused recovery codes the user has available.",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The date time the recovery codes were generated at.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.RegenerateRecoveryCodesRequest": {
        "description": "Request information needed to regenerate recovery codes.",
        "type": "object",
        "properties": {
          "password": {
            "description": "The user's password.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.RegenerateRecoveryCodesResponse": {
        "description": "The response for regenerating recovery codes.",
        "type": "object",
        "properties": {
          "recoveryCodes": {
            "description": "The collection of generated recovery codes.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.TwoStepVerification.Api.RetractDialogRequest": {
        "description": "Request parameters for retracting a Cross Device dialog from state ACTIVE to PENDING.",
        "type": "object",
        "properties": {
          "challengeId": {
            "description": "The two step verification challenge ID.",
            "type": "string"
          },
          "actionType": {
            "format": "int32",
            "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType associated with the challenge. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8],
            "type": "integer"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.RetractDialogResponse": {
        "description": "Result for a successful attempt to retract a Cross Device state from ACTIVE to PENDING.",
        "type": "object"
      },
      "Roblox.TwoStepVerification.Api.RetryApprovalRequest": {
        "description": "Request parameters for retrying a Cross Device two step verification approval.",
        "type": "object",
        "properties": {
          "challengeId": {
            "description": "The two step verification challenge ID.",
            "type": "string"
          },
          "actionType": {
            "format": "int32",
            "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType associated with the challenge. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8],
            "type": "integer"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.RetryApprovalResponse": {
        "description": "Result for a successful Cross Device approval retry, an empty JSON.",
        "type": "object"
      },
      "Roblox.TwoStepVerification.Api.SecurityKeyCredential": {
        "description": "Credential information that includes its nickname and any additional metadata.",
        "type": "object",
        "properties": {
          "nickname": {
            "description": "Nickname the user has chosen for this credential.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.SendCodeRequest": {
        "description": "Request parameters for sending a two step verification code.",
        "type": "object",
        "properties": {
          "challengeId": {
            "description": "The two step verification challenge ID.",
            "type": "string"
          },
          "actionType": {
            "format": "int32",
            "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType associated with the challenge. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8],
            "type": "integer"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.UserConfiguration": {
        "description": "The users two step verification configuration.",
        "type": "object",
        "properties": {
          "primaryMediaType": {
            "format": "int32",
            "description": "The preferred two step verification method for the user.",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          },
          "methods": {
            "description": "The two step verification methods associated with the user.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.UserConfigurationMethod"
            }
          }
        }
      },
      "Roblox.TwoStepVerification.Api.UserConfigurationMethod": {
        "description": "A user configuration method option.",
        "type": "object",
        "properties": {
          "mediaType": {
            "format": "int32",
            "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationMediaType for the method. ['Email' = 0, 'SMS' = 1, 'Authenticator' = 2, 'RecoveryCode' = 3, 'SecurityKey' = 4, 'CrossDevice' = 5, 'Password' = 6, 'Passkey' = 7]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7],
            "type": "integer"
          },
          "enabled": {
            "description": "Whether or not the method is enabled.",
            "type": "boolean"
          },
          "updated": {
            "format": "date-time",
            "description": "The last time this method was updated for the user.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.VerifyApprovalRequest": {
        "description": "Request parameters for verifying a Cross Device two step verification approval. Does not use verification code.",
        "type": "object",
        "properties": {
          "challengeId": {
            "description": "The two step verification challenge ID.",
            "type": "string"
          },
          "actionType": {
            "format": "int32",
            "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType associated with the challenge. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8],
            "type": "integer"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.VerifyApprovalResponse": {
        "description": "Result for a successful Cross Device approval verification.",
        "type": "object",
        "properties": {
          "verificationToken": {
            "description": "The verification token.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.VerifyCodeRequest": {
        "description": "Request parameters for verifying a two step verification code.",
        "type": "object",
        "properties": {
          "challengeId": {
            "description": "The two step verification challenge ID.",
            "type": "string"
          },
          "actionType": {
            "format": "int32",
            "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType associated with the challenge. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
            "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8],
            "type": "integer"
          },
          "code": {
            "description": "The two step verification code.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.VerifyCodeResponse": {
        "description": "Result for a successful verification.",
        "type": "object",
        "properties": {
          "verificationToken": {
            "description": "The verification token.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.VerifyStartPasskeyResponse": {
        "description": "Result for a successful verification.",
        "type": "object",
        "properties": {
          "authenticationOptions": {
            "description": "The authentication options for the passkey.",
            "type": "string"
          },
          "sessionId": {
            "description": "The session of the authentication attempt.",
            "type": "string"
          }
        }
      },
      "Roblox.TwoStepVerification.Api.VerifyStartSecurityKeyResponse": {
        "description": "Result for a successful verification.",
        "type": "object",
        "properties": {
          "authenticationOptions": {
            "description": "The authentication options for the hardware key.",
            "type": "string"
          },
          "sessionId": {
            "description": "The session of the authentication attempt.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.AuthenticatedGetUserResponse": {
        "description": "A response model representing absolute minimal authenticating user information.\r\nNo new attributes should be added to this response since it is in the critical path of app launch and we want to minimize dependencies.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.BirthdateRequest": {
        "description": "The birthdate request",
        "type": "object",
        "properties": {
          "birthMonth": {
            "format": "int32",
            "description": "The birth month",
            "type": "integer"
          },
          "birthDay": {
            "format": "int32",
            "description": "The birth day",
            "type": "integer"
          },
          "birthYear": {
            "format": "int32",
            "description": "The birth year",
            "type": "integer"
          },
          "password": {
            "description": "Password",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.BirthdateResponse": {
        "description": "The birthdate response",
        "type": "object",
        "properties": {
          "birthMonth": {
            "format": "int32",
            "description": "The birth month",
            "type": "integer"
          },
          "birthDay": {
            "format": "int32",
            "description": "The birth day",
            "type": "integer"
          },
          "birthYear": {
            "format": "int32",
            "description": "The birth year",
            "type": "integer"
          }
        }
      },
      "Roblox.Users.Api.DescriptionRequest": {
        "description": "The description request",
        "type": "object",
        "properties": {
          "description": {
            "description": "The description",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.DescriptionResponse": {
        "description": "The description response",
        "type": "object",
        "properties": {
          "description": {
            "description": "The description",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.GenderRequest": {
        "description": "The gender request",
        "type": "object",
        "properties": {
          "gender": {
            "format": "int32",
            "description": "The gender ['Unknown' = 1, 'Male' = 2, 'Female' = 3]",
            "enum": [1, 2, 3],
            "type": "integer"
          }
        }
      },
      "Roblox.Users.Api.GenderResponse": {
        "description": "The gender response",
        "type": "object",
        "properties": {
          "gender": {
            "format": "int32",
            "description": "The gender",
            "type": "integer"
          }
        }
      },
      "Roblox.Users.Api.GetUserResponse": {
        "description": "A response model representing user information.",
        "type": "object",
        "properties": {
          "description": {
            "description": "The user description.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "When the user signed up.",
            "type": "string"
          },
          "isBanned": {
            "description": "Whether the user is banned",
            "type": "boolean"
          },
          "externalAppDisplayName": {
            "description": "Unused, legacy attribute. For now always null to not disturb existing client code that might rely on its existence.",
            "type": "string"
          },
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.MultiGetByUserIdRequest": {
        "description": "Request model for getting users by ids.",
        "type": "object",
        "properties": {
          "userIds": {
            "description": "The user ids.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "excludeBannedUsers": {
            "description": "Whether the response should exclude banned users",
            "type": "boolean"
          }
        }
      },
      "Roblox.Users.Api.MultiGetByUsernameRequest": {
        "description": "Request model for getting users by usernames.",
        "type": "object",
        "properties": {
          "usernames": {
            "description": "The usernames.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludeBannedUsers": {
            "description": "Whether the response should exclude banned users",
            "type": "boolean"
          }
        }
      },
      "Roblox.Users.Api.MultiGetUserByNameResponse": {
        "description": "A response model specific to multi-get user by name.",
        "type": "object",
        "properties": {
          "requestedUsername": {
            "description": "The username the user was requested with.",
            "type": "string"
          },
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.MultiGetUserResponse": {
        "description": "<p>A response model specific to multi-get user.</p>\r\n<p>\r\n            Note: Currently the MultiGet responses don't have all the data that the single gets have, to reduce payload size!\r\n            We might want to revisit this decision in the future.\r\n            </p>",
        "type": "object",
        "properties": {
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.SearchGetUserResponse": {
        "description": "A user response model specific to getting a user from user search.",
        "type": "object",
        "properties": {
          "previousUsernames": {
            "description": "Previous usernames for a user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hasVerifiedBadge": {
            "description": "The user's verified badge status.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "description": "The user Id.",
            "type": "integer"
          },
          "name": {
            "description": "The user name.",
            "type": "string"
          },
          "displayName": {
            "description": "The user DisplayName.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.SetDisplayNameRequest": {
        "description": "Request model for changing a display name.",
        "type": "object",
        "properties": {
          "newDisplayName": {
            "description": "The users new display name.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.UserAgeBracketResponse": {
        "description": "A user age bracket response model.",
        "type": "object",
        "properties": {
          "ageBracket": {
            "format": "int32",
            "description": "The age bracket of the user.",
            "type": "integer"
          }
        }
      },
      "Roblox.Users.Api.UserCountryCodeResponse": {
        "description": "A user country code response model.",
        "type": "object",
        "properties": {
          "countryCode": {
            "description": "The country code of the user.",
            "type": "string"
          }
        }
      },
      "Roblox.Users.Api.UserRolesResponse": {
        "description": "A user roles response model.",
        "type": "object",
        "properties": {
          "roles": {
            "description": "The roles of the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Roblox.Users.Api.UsernameHistoryResponse": {
        "type": "object",
        "properties": {
          "name": {
            "description": "A past username belonging to a particular userId",
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Users.Api.MultiGetUserByNameResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Users.Api.MultiGetUserByNameResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse_Roblox.Users.Api.MultiGetUserResponse_": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Users.Api.MultiGetUserResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Users.Api.SearchGetUserResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Users.Api.SearchGetUserResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse_Roblox.Users.Api.UsernameHistoryResponse_": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Roblox.Users.Api.UsernameHistoryResponse"
            }
          }
        }
      },
      "ToolboxService.Asset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the asset.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of the asset.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the asset.",
            "nullable": true
          },
          "assetTypeId": {
            "type": "integer",
            "description": "The type that the asset belongs to.",
            "format": "int32",
            "nullable": true
          },
          "socialLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialLinkModel"
            },
            "description": "The social links associated with the asset.",
            "nullable": true
          },
          "createTime": {
            "type": "string",
            "description": "The time the asset was created.",
            "format": "date-time",
            "nullable": true
          },
          "updateTime": {
            "type": "string",
            "description": "The time the asset was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of an asset.",
        "nullable": true
      },
      "Audio": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolboxService.Asset"
          }
        ],
        "properties": {
          "durationSeconds": {
            "type": "integer",
            "description": "The duration of the audio file in seconds.",
            "format": "int32"
          },
          "audioType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAudioTypeModel"
              }
            ],
            "description": "The type of audio (Music or SoundEffect).",
            "deprecated": true
          },
          "artist": {
            "type": "string",
            "description": "The audio artist.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The audio title.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of an audio asset.",
        "nullable": true
      },
      "CreatorModelV2": {
        "type": "object",
        "properties": {
          "creator": {
            "type": "string",
            "description": "Deprecated: Please refer to the 'userId' and 'groupId' properties instead.\r\nThe creator type and ID. E.g. user/123 or group/456.",
            "nullable": true,
            "deprecated": true
          },
          "userId": {
            "type": "integer",
            "description": "The User ID of the creator. Required if the asset is individual-user-owned.",
            "format": "int64",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "description": "The Group ID. Required if the asset is group-owned.",
            "format": "int64",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The creator's name.",
            "nullable": true
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the creator is verified.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model representing a creator.",
        "nullable": true
      },
      "CreatorStoreAsset": {
        "type": "object",
        "properties": {
          "voting": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VotingModel"
              }
            ],
            "description": "The asset's voting details.",
            "nullable": true
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatorModelV2"
              }
            ],
            "description": "The asset creator's details.",
            "nullable": true
          },
          "creatorStoreProduct": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolboxService.CreatorStoreProduct"
              }
            ],
            "description": "The asset's product details.",
            "nullable": true
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ToolboxService.Asset"
              },
              {
                "$ref": "#/components/schemas/Audio"
              },
              {
                "$ref": "#/components/schemas/Decal"
              },
              {
                "$ref": "#/components/schemas/MeshPart"
              },
              {
                "$ref": "#/components/schemas/Model"
              },
              {
                "$ref": "#/components/schemas/Music"
              },
              {
                "$ref": "#/components/schemas/Plugin"
              },
              {
                "$ref": "#/components/schemas/SoundEffect"
              }
            ],
            "description": "The asset information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a creator store asset.",
        "nullable": true
      },
      "ToolboxService.CreatorStoreProduct": {
        "type": "object",
        "properties": {
          "purchasePrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolboxService.Money"
              }
            ],
            "description": "The price of the asset, including the currency code.",
            "nullable": true
          },
          "purchasable": {
            "type": "boolean",
            "description": "Whether or not the asset can be purchased in the Creator Store."
          }
        },
        "additionalProperties": false,
        "description": "The asset's creator store product information.",
        "nullable": true
      },
      "Decal": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolboxService.Asset"
          }
        ],
        "properties": {
          "textureId": {
            "type": "integer",
            "description": "The texture id of the decal.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a decal asset.",
        "nullable": true
      },
      "ToolboxService.Decimal": {
        "type": "object",
        "properties": {
          "significand": {
            "type": "integer",
            "format": "int64"
          },
          "exponent": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "nullable": true
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          }
        ],
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": {
          "nullable": true
        },
        "nullable": true
      },
      "InstanceCounts": {
        "type": "object",
        "properties": {
          "script": {
            "type": "integer",
            "description": "The number of Script instances.",
            "format": "int32"
          },
          "meshPart": {
            "type": "integer",
            "description": "The number of MeshPart instances.",
            "format": "int32"
          },
          "animation": {
            "type": "integer",
            "description": "The number of Animation instances.",
            "format": "int32"
          },
          "decal": {
            "type": "integer",
            "description": "The number of Decal instances.",
            "format": "int32"
          },
          "audio": {
            "type": "integer",
            "description": "The number of Audio instances.",
            "format": "int32"
          },
          "tool": {
            "type": "integer",
            "description": "The number of Tool instances.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents the count of various instance types within an asset.\r\nSee [Instance](https://create.roblox.com/docs/reference/engine/classes/Instance).",
        "nullable": true
      },
      "LinkType": {
        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "type": "integer",
        "format": "int32"
      },
      "MeshPart": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolboxService.Asset"
          }
        ],
        "properties": {
          "meshId": {
            "type": "integer",
            "description": "The mesh id of the meshpart.",
            "format": "int64"
          },
          "textureId": {
            "type": "integer",
            "description": "The texture id of the meshpart.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a mesh asset.",
        "nullable": true
      },
      "Model": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolboxService.Asset"
          }
        ],
        "properties": {
          "subTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelSubType"
            },
            "description": "The subtypes that the model belongs to.",
            "nullable": true
          },
          "hasScripts": {
            "type": "boolean",
            "description": "Whether the model has scripts."
          },
          "scriptCount": {
            "type": "integer",
            "description": "The number of scripts that are in the model.",
            "format": "int32"
          },
          "objectMeshSummary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectMeshSummary"
              }
            ],
            "description": "The summary of the meshes within the model, if they exist.",
            "nullable": true
          },
          "instanceCounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCounts"
              }
            ],
            "description": "The number of studio Instance types in the model.\r\nSee [Instance](https://create.roblox.com/docs/reference/engine/classes/Instance).\r\nThese are broken down into specific types, such as MeshPart, Part, Script,\r\nTool, Animation, etc.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a model asset.",
        "nullable": true
      },
      "ModelInstanceType": {
        "enum": ["Script", "MeshPart", "Decal", "Animation", "Audio", "Tool"],
        "type": "string",
        "description": "A list of model instance types. See Toolbox.Service.Models.Internal.InstanceCounts and [Instance](https://create.roblox.com/docs/reference/engine/classes/Instance) for more details."
      },
      "ModelSubType": {
        "enum": ["Ad", "MaterialPack", "Package"],
        "type": "string",
        "description": "The supported model subtypes."
      },
      "ToolboxService.Money": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolboxService.Decimal"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "nullable": true
      },
      "Music": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Audio"
          }
        ],
        "properties": {
          "album": {
            "type": "string",
            "description": "The album the music belongs to.",
            "nullable": true
          },
          "genre": {
            "type": "string",
            "description": "The genre of the music.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a music asset.",
        "nullable": true
      },
      "MusicChartType": {
        "enum": ["None", "Current", "Week", "Month", "Year"],
        "type": "string",
        "description": "Represents which music chart to pull entries from, if any"
      },
      "ObjectMeshSummary": {
        "type": "object",
        "properties": {
          "triangles": {
            "type": "integer",
            "description": "The total number of triangles in the object's mesh.",
            "format": "int32"
          },
          "vertices": {
            "type": "integer",
            "description": "The total number of vertices in the object's mesh.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Provides a summary of the mesh characteristics of an object, such as triangle and vertex counts.",
        "nullable": true
      },
      "Plugin": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolboxService.Asset"
          }
        ],
        "properties": {
          "hasScripts": {
            "type": "boolean",
            "description": "Whether the plugin has scripts."
          },
          "scriptCount": {
            "type": "integer",
            "description": "The number of scripts that are in the plugin.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a plugin asset.",
        "nullable": true
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "nullable": true
        },
        "nullable": true
      },
      "QueryFacets": {
        "type": "object",
        "properties": {
          "appliedFacets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Facets that are already applied to the search.",
            "nullable": true
          },
          "availableFacets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The unused and still available facets.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The facets of a query.",
        "nullable": true
      },
      "SearchAudioTypeModel": {
        "enum": ["Music", "SoundEffect"],
        "type": "string",
        "description": "Represents audio type values that will be properly displayed in Swagger UI."
      },
      "SearchCategoryType": {
        "enum": [
          "Audio",
          "Model",
          "Decal",
          "Plugin",
          "MeshPart",
          "Video",
          "FontFamily"
        ],
        "type": "string",
        "description": "This represents a \"subset\" of Toolbox.Service.CategoryType options and represent the full set\r\nof \"categories\" (or asset types) that can be searched upon from the toolbox search API."
      },
      "SearchCreatorStoreAssetsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The page token to view the next page of results.",
            "nullable": true
          },
          "queryFacets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QueryFacets"
              }
            ],
            "description": "The applied and available facets of a query.",
            "nullable": true
          },
          "creatorStoreAssets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatorStoreAsset"
            },
            "description": "The list of creator store assets returned by the search query.",
            "nullable": true
          },
          "totalResults": {
            "type": "integer",
            "description": "The total number of results for the given search query.",
            "format": "int64"
          },
          "filteredKeyword": {
            "type": "string",
            "description": "The filtered keyword that was used to search for assets, if applicable.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response for the SearchCreatorStoreAssets endpoint.",
        "nullable": true
      },
      "SearchView": {
        "enum": ["IDs", "Core", "Full"],
        "type": "string",
        "description": "This view controls which fields are populated in the search response. A lighter\r\nview will result in faster response times and higher reliability."
      },
      "SocialLinkModel": {
        "type": "object",
        "properties": {
          "linkType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkType"
              }
            ],
            "description": "Gets or sets the link type."
          },
          "url": {
            "type": "string",
            "description": "Gets or sets the Url.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Gets or sets the title.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for a Social Link.",
        "nullable": true
      },
      "SortCategory": {
        "enum": [
          "Relevance",
          "Trending",
          "Top",
          "AudioDuration",
          "CreateTime",
          "UpdatedTime",
          "Ratings"
        ],
        "type": "string",
        "description": "The category to sort the search results by."
      },
      "SortDirection": {
        "enum": ["None", "Ascending", "Descending"],
        "type": "string",
        "description": "Represents the direction in which to sort the results"
      },
      "SoundEffect": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Audio"
          }
        ],
        "properties": {
          "category": {
            "type": "string",
            "description": "The sound effect category.",
            "nullable": true
          },
          "subcategory": {
            "type": "string",
            "description": "The sound effect subcategory.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a sound effect asset.",
        "nullable": true
      },
      "VotingModel": {
        "type": "object",
        "properties": {
          "showVotes": {
            "type": "boolean",
            "description": "Gets or sets show votes."
          },
          "upVotes": {
            "type": "integer",
            "description": "Gets or sets success.",
            "format": "int64"
          },
          "downVotes": {
            "type": "integer",
            "description": "Gets or sets down votes.",
            "format": "int64"
          },
          "canVote": {
            "type": "boolean",
            "description": "Gets or sets can vote."
          },
          "userVote": {
            "type": "boolean",
            "description": "Gets or sets user vote.",
            "nullable": true
          },
          "hasVoted": {
            "type": "boolean",
            "description": "Gets UserVote.",
            "readOnly": true
          },
          "voteCount": {
            "type": "integer",
            "description": "The total number of votes",
            "format": "int64"
          },
          "upVotePercent": {
            "type": "integer",
            "description": "The percentage of total votes that have been UpVotes",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "model for voting.",
        "nullable": true
      }
    },
    "requestBodies": {
      "Roblox.AccountInformation.Api.Models.PhoneRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PhoneRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.AccountInformation.Api.Models.PhoneRequest"
            }
          }
        },
        "description": "Roblox.AccountInformation.Api.Models.PhoneRequest",
        "required": true
      },
      "Roblox.AccountSettings.Api.UpdateEmailRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.AccountSettings.Api.UpdateEmailRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.AccountSettings.Api.UpdateEmailRequest"
            }
          }
        },
        "description": "The request body.",
        "required": true
      },
      "Roblox.Authentication.Api.Models.SignupRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Authentication.Api.Models.SignupRequest"
            }
          }
        },
        "description": "Roblox.Authentication.Api.Models.SignupRequest",
        "required": true
      },
      "Roblox.Api.Avatar.Models.OutfitUpdateModelV2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
            }
          }
        },
        "description": "The updated outfit.",
        "required": true
      },
      "Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest"
            }
          }
        },
        "description": "The request body containing the team create settings.",
        "required": true
      },
      "Roblox.Api.Develop.Models.PlaceConfigurationModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceConfigurationModel"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.PlaceConfigurationModel"
            }
          }
        },
        "required": true
      },
      "Roblox.Api.Develop.Models.TeamCreateMembershipRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.TeamCreateMembershipRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Api.Develop.Models.TeamCreateMembershipRequest"
            }
          }
        },
        "description": "The request body.",
        "required": true
      },
      "postV1Badges_badgeid_iconsLanguageCodes_languagecode_": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "Files": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "Roblox.GameJoin.Api.TeamCreateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.GameJoin.Api.TeamCreateRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.GameJoin.Api.TeamCreateRequest"
            }
          }
        },
        "description": "The Roblox.GameJoin.Api.TeamCreateRequest in JSON format",
        "required": true
      },
      "Roblox.Groups.Api.MembersRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.MembersRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.MembersRequest"
            }
          }
        },
        "description": "The Roblox.Groups.Api.MembersRequest.",
        "required": true
      },
      "Roblox.Groups.Api.PayoutRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.PayoutRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.PayoutRequest"
            }
          }
        },
        "description": "The Roblox.Groups.Api.PayoutRequest.",
        "required": true
      },
      "Roblox.Groups.Api.RelationshipsRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.RelationshipsRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.Groups.Api.RelationshipsRequest"
            }
          }
        },
        "description": "The Roblox.Groups.Api.RelationshipsRequest.",
        "required": true
      },
      "Roblox.LocalizationTables.Api.IngestAutoScrapedContentForGameRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.IngestAutoScrapedContentForGameRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.LocalizationTables.Api.IngestAutoScrapedContentForGameRequest"
            }
          }
        },
        "description": "The request body.",
        "required": true
      },
      "Roblox.PrivateMessages.Api.Models.BatchMessagesRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.PrivateMessages.Api.Models.BatchMessagesRequest"
            }
          }
        },
        "required": true
      },
      "postV1Badges_badgeid_icon": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "Files": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest"
            }
          }
        },
        "description": "The Roblox.TwoStepVerification.Api.DisableTwoStepVerificationRequest.",
        "required": true
      },
      "Roblox.TwoStepVerification.Api.VerifyCodeRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
            }
          }
        },
        "description": "The request bodyRoblox.TwoStepVerification.Api.VerifyCodeRequest.",
        "required": true
      },
      "Roblox.TwoStepVerification.Api.VerifyCodeRequest2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
            }
          }
        },
        "description": "The Roblox.TwoStepVerification.Api.VerifyCodeRequest.",
        "required": true
      },
      "Roblox.TwoStepVerification.Api.SendCodeRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.SendCodeRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.SendCodeRequest"
            }
          }
        },
        "description": "The request body.Roblox.TwoStepVerification.Api.SendCodeRequest.",
        "required": true
      },
      "Roblox.TwoStepVerification.Api.VerifyCodeRequest3": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.VerifyCodeRequest"
            }
          }
        },
        "description": "The request body.Roblox.TwoStepVerification.Api.VerifyCodeRequest.",
        "required": true
      },
      "Roblox.TwoStepVerification.Api.SendCodeRequest2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.SendCodeRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.SendCodeRequest"
            }
          }
        },
        "description": "The request bodyRoblox.TwoStepVerification.Api.SendCodeRequest.",
        "required": true
      },
      "Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
            }
          },
          "text/json": {
            "schema": {
              "$ref": "#/components/schemas/Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest"
            }
          }
        },
        "description": "The request body.Roblox.TwoStepVerification.Api.EnableTwoStepVerificationRequest.",
        "required": true
      }
    },
    "securitySchemes": {
      "roblox-legacy-cookie": {
        "type": "apiKey",
        "description": "A browser cookie that represents the identity of a Roblox user. DO NOT SHARE THIS. Sharing this will allow someone to log in as you and to steal your Robux and items. We do not recommend using cookies to call endpoints. When possible, use API keys with the x-api-key header or OAuth 2.0 instead for authentication.",
        "in": "cookie",
        "name": ".ROBLOSECURITY"
      },
      "roblox-api-key": {
        "type": "apiKey",
        "description": "A configurable key that allows granular access to Roblox resources. See https://create.roblox.com/docs/cloud/auth/api-keys for more information.",
        "name": "x-api-key",
        "in": "header"
      },
      "roblox-oauth2": {
        "type": "oauth2",
        "description": "Build or authorize apps to access Roblox resources. See https://create.roblox.com/docs/cloud/auth/oauth2-overview for more information.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://apis.roblox.com/oauth/v1/authorize",
            "tokenUrl": "https://apis.roblox.com/oauth/v1/token",
            "refreshUrl": "https://apis.roblox.com/oauth/v1/token",
            "scopes": {}
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "HTTP APIs for working with accounts on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "accounts",
        "content": "Lists all HTTP APIs for working with accounts, including legacy APIs for account information, settings, authentication, games, inventory, notifications, private messages, and two-step verification.",
        "ordering": []
      }
    },
    {
      "name": "Assets",
      "description": "HTTP APIs for working with assets on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "assets",
        "content": "Lists all HTTP APIs for working with assets, such as creating, retrieving, updating, and archiving them.",
        "ordering": [
          "Assets_CreateAsset",
          "Assets_GetAsset",
          "Assets_UpdateAsset",
          "Assets_ArchiveAsset",
          "Assets_RestoreAsset",
          "listAssetVersions",
          "Assets_RollbackAssetVersion",
          "Assets_GetAssetVersion",
          "Assets_GetOperation",
          "Cloud_GenerateSpeechAsset",
          "Cloud_ListAssetQuotas"
        ]
      }
    },
    {
      "name": "Avatars",
      "description": "HTTP APIs for working with avatars on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "avatars",
        "content": "Lists all HTTP APIs for working with avatars, such as generating thumbnails, creating outfits, and more.",
        "ordering": ["Cloud_GenerateUserThumbnail"]
      }
    },
    {
      "name": "Badges",
      "description": "HTTP APIs for working with badges on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "badges",
        "content": "Lists all HTTP APIs for working with badges, such as creating them and updating their translations.",
        "ordering": []
      }
    },
    {
      "name": "Bans and blocks",
      "description": "HTTP APIs for working with bans and blocks on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "bans-and-blocks",
        "content": "Lists all HTTP APIs for working with bans and blocks, such as listing and updating user restrictions.",
        "ordering": [
          "Cloud_ListUserRestrictions__Using_Universes",
          "Cloud_GetUserRestriction__Using_Universes_Places",
          "Cloud_UpdateUserRestriction__Using_Universes_Places",
          "Cloud_ListUserRestrictions",
          "Cloud_ListUserRestrictionLogs",
          "Cloud_GetUserRestriction__Using_Universes",
          "Cloud_UpdateUserRestriction__Using_Universes"
        ]
      }
    },
    {
      "name": "Chats",
      "description": "HTTP APIs for working with chats on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "chats",
        "content": "Lists all HTTP APIs for working with chats, such as getting unread messages and marking messages as read.",
        "ordering": []
      }
    },
    {
      "name": "Creator Store",
      "description": "HTTP APIs for working with the Creator Store on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "creator-store",
        "content": "Lists all HTTP APIs for working with the Creator Store.",
        "ordering": [
          "Cloud_CreateCreatorStoreProduct",
          "Cloud_GetCreatorStoreProduct",
          "Cloud_UpdateCreatorStoreProduct"
        ]
      }
    },
    {
      "name": "Developer products",
      "description": "HTTP APIs for working with developer products on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "developer-products",
        "content": "Lists all HTTP APIs for working with developer products.",
        "ordering": []
      }
    },
    {
      "name": "Connections",
      "description": "HTTP APIs for working with connections on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "friends",
        "content": "Lists all HTTP APIs for working with connections, such as declining all connection requests or retrieving a connection list.",
        "ordering": []
      }
    },
    {
      "name": "Game passes",
      "description": "HTTP APIs for working with game passes on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "game-passes",
        "content": "Lists all HTTP APIs for working with game passes.",
        "ordering": []
      }
    },
    {
      "name": "Generative AI",
      "description": "HTTP APIs related to Generative AI and LLMs on Open Cloud.",
      "x-roblox-tag-info": {
        "path": "generative-ai",
        "content": "Lists all HTTP APIs related to Generative AI and LLMs on Open Cloud.",
        "ordering": ["Cloud_GenerateSpeech", "Cloud_GenerateSpeechAsset"]
      }
    },
    {
      "name": "Groups",
      "description": "HTTP APIs for working with groups on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "groups",
        "content": "Lists all HTTP APIs for working with groups, including accepting join requests and listing group memberships.",
        "ordering": [
          "Cloud_GetGroup",
          "Cloud_ListGroupJoinRequests",
          "Cloud_AcceptGroupJoinRequest",
          "Cloud_DeclineGroupJoinRequest",
          "Cloud_ListGroupMemberships",
          "Cloud_UpdateGroupMembership",
          "Cloud_ListGroupRoles",
          "Cloud_GetGroupRole",
          "Cloud_GetGroupShout"
        ]
      }
    },
    {
      "name": "Interactions",
      "description": "HTTP APIs for working with favorites, followings, and other player interactions on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "interactions",
        "content": "Lists all HTTP APIs for interactions, such as getting all universes a user has followed or retrieving favorites.",
        "ordering": []
      }
    },
    {
      "name": "Inventories",
      "description": "HTTP APIs for working with inventories on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "inventories",
        "content": "Lists all HTTP APIs for working with user inventories, such as listing items or adding items to collections.",
        "ordering": ["Cloud_ListInventoryItems"]
      }
    },
    {
      "name": "Localization",
      "description": "HTTP APIs for localization on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "localization",
        "content": "Lists all HTTP APIs for working with localizations, such as updating localized descriptions for badges, game passes, or developer products.",
        "ordering": []
      }
    },
    {
      "name": "Luau Execution",
      "description": "HTTP APIs for Luau execution on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "luau-execution",
        "content": "Lists all HTTP APIs for Luau execution, which lets you run scripts on a specific version of a place.",
        "ordering": [
          "Cloud_CreateLuauExecutionSessionTaskBinaryInput",
          "Cloud_CreateLuauExecutionSessionTask__Using_Universes",
          "Cloud_CreateLuauExecutionSessionTask__Using_Universes_Places",
          "Cloud_GetLuauExecutionSessionTask",
          "Cloud_ListLuauExecutionSessionTaskLogs"
        ]
      }
    },
    {
      "name": "Metadata",
      "description": "HTTP APIs for working with metadata on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "metadata",
        "content": "Lists all HTTP APIs for metadata, such as auto-localization configuration information or authorization metadata.",
        "ordering": []
      }
    },
    {
      "name": "Notifications",
      "description": "HTTP APIs for working with notifications on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "notifications",
        "content": "Lists all HTTP APIs for working with notifications, such as creating user notifications or modifying push settings.",
        "ordering": ["Cloud_CreateUserNotification"]
      }
    },
    {
      "name": "Places",
      "description": "HTTP APIs for working with places on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "places",
        "content": "Lists all HTTP APIs for working with places. You can update instances, get children for a given instance in the place, and more.",
        "ordering": [
          "Cloud_GetPlace",
          "Cloud_UpdatePlace",
          "Cloud_GetInstance",
          "Cloud_UpdateInstance",
          "Cloud_ListInstanceChildren",
          "Cloud_CreateLuauExecutionSessionTask__Using_Universes",
          "Cloud_ListUserRestrictions__Using_Universes",
          "Cloud_GetUserRestriction__Using_Universes_Places",
          "Cloud_UpdateUserRestriction__Using_Universes_Places",
          "Cloud_CreateLuauExecutionSessionTask__Using_Universes_Places",
          "Cloud_GetLuauExecutionSessionTask",
          "Cloud_ListLuauExecutionSessionTaskLogs",
          "Places_CreatePlaceVersionApiKey"
        ]
      }
    },
    {
      "name": "Private servers",
      "description": "HTTP APIs for working with private servers on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "private-servers",
        "content": "Lists all HTTP APIs for working with private servers, including listing them and updating access settings.",
        "ordering": []
      }
    },
    {
      "name": "Sponsored campaigns",
      "description": "HTTP APIs for working with sponsored campaigns on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "sponsored-campaigns",
        "content": "Lists all HTTP APIs for working with sponsored campaigns.",
        "ordering": []
      }
    },
    {
      "name": "Data and memory stores",
      "description": "HTTP APIs for working with data and memory stores on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "storage",
        "content": "Lists all HTTP APIs for working with data stores and memory stores.",
        "ordering": [
          "Cloud_ListDataStores",
          "Cloud_SnapshotDataStores",
          "Cloud_ListDataStoreEntries__Using_Universes",
          "Cloud_CreateDataStoreEntry__Using_Universes",
          "Cloud_DeleteDataStoreEntry__Using_Universes_DataStores",
          "Cloud_GetDataStoreEntry__Using_Universes_DataStores",
          "Cloud_UpdateDataStoreEntry__Using_Universes_DataStores",
          "Cloud_IncrementDataStoreEntry__Using_Universes_DataStores",
          "Cloud_ListDataStoreEntryRevisions__Using_Universes_DataStores",
          "Cloud_ListDataStoreEntries__Using_Universes_DataStores",
          "Cloud_CreateDataStoreEntry__Using_Universes_DataStores",
          "Cloud_DeleteDataStoreEntry__Using_Universes_DataStores_Scopes",
          "Cloud_GetDataStoreEntry__Using_Universes_DataStores_Scopes",
          "Cloud_UpdateDataStoreEntry__Using_Universes_DataStores_Scopes",
          "Cloud_IncrementDataStoreEntry__Using_Universes_DataStores_Scopes",
          "Cloud_ListDataStoreEntryRevisions__Using_Universes_DataStores_Scopes",
          "Cloud_FlushMemoryStore",
          "Cloud_CreateMemoryStoreQueueItem",
          "Cloud_DiscardMemoryStoreQueueItems",
          "Cloud_ReadMemoryStoreQueueItems",
          "Cloud_ListMemoryStoreSortedMapItems",
          "Cloud_CreateMemoryStoreSortedMapItem",
          "Cloud_DeleteMemoryStoreSortedMapItem",
          "Cloud_GetMemoryStoreSortedMapItem",
          "Cloud_UpdateMemoryStoreSortedMapItem",
          "Cloud_ListOrderedDataStoreEntries",
          "Cloud_CreateOrderedDataStoreEntry",
          "Cloud_DeleteOrderedDataStoreEntry",
          "Cloud_GetOrderedDataStoreEntry",
          "Cloud_UpdateOrderedDataStoreEntry",
          "Cloud_IncrementOrderedDataStoreEntry",
          "Datastores_ListDatastoresAsync",
          "Entries_ListKeysAsync",
          "Entries_DeleteEntryAsync",
          "Entries_GetEntryAsync",
          "Entries_SetEntryAsync",
          "Entries_IncrementEntryAsync",
          "Entries_ListEntryVersionsAsync",
          "Entries_GetEntryVersionAsync",
          "OrderedDataStores_ListEntries",
          "OrderedDataStores_CreateEntry",
          "OrderedDataStores_DeleteEntry",
          "OrderedDataStores_GetEntry",
          "OrderedDataStores_UpdateEntry",
          "OrderedDataStores_IncrementEntry"
        ]
      }
    },
    {
      "name": "Team Create",
      "description": "HTTP APIs for working with Team Create on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "team-create",
        "content": "Lists all HTTP APIs for working with Team Create.",
        "ordering": []
      }
    },
    {
      "name": "Thumbnails",
      "description": "HTTP APIs for working with user thumbnails on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "thumbnails",
        "content": "Lists all HTTP APIs for generating, retrieving, and updating thumbnails.",
        "ordering": ["Cloud_GenerateUserThumbnail"]
      }
    },
    {
      "name": "Trades",
      "description": "HTTP APIs for working with trades on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "trades",
        "content": "Lists all HTTP APIs for trades.",
        "ordering": []
      }
    },
    {
      "name": "Universes",
      "description": "HTTP APIs for working with universes on Roblox Cloud, including subscriptions, place and instance updates, user restrictions, and more.",
      "x-roblox-tag-info": {
        "path": "universes",
        "content": "Lists all HTTP APIs for working with universes, including restarting servers and getting user subscriptions.",
        "ordering": [
          "Cloud_GetUniverse",
          "Cloud_UpdateUniverse",
          "Cloud_PublishUniverseMessage",
          "Cloud_RestartUniverseServers",
          "Cloud_GetPlace",
          "Cloud_UpdatePlace",
          "Cloud_GetInstance",
          "Cloud_UpdateInstance",
          "Cloud_ListInstanceChildren",
          "Cloud_ListUserRestrictions__Using_Universes",
          "Cloud_GetUserRestriction__Using_Universes_Places",
          "Cloud_UpdateUserRestriction__Using_Universes_Places",
          "Cloud_ListUserRestrictions",
          "Cloud_ListUserRestrictionLogs",
          "Cloud_GetUserRestriction__Using_Universes",
          "Cloud_UpdateUserRestriction__Using_Universes",
          "CrossServerMessaging_Publish",
          "Places_CreatePlaceVersionApiKey"
        ]
      }
    },
    {
      "name": "User profiles",
      "description": "HTTP APIs for working with user profiles on Roblox Cloud.",
      "x-roblox-tag-info": {
        "path": "user-profiles",
        "content": "Lists all HTTP APIs for user profiles, such as updating user descriptions and retrieving badges.",
        "ordering": []
      }
    },
    {
      "name": "Users",
      "description": "HTTP APIs for working with users on Roblox Cloud, including inventory items, restrictions, subscriptions, and more.",
      "x-roblox-tag-info": {
        "path": "users",
        "content": "Lists all HTTP APIs for working with users, such as getting user subscriptions or all universes a user is following.",
        "ordering": [
          "Cloud_ListUserRestrictions__Using_Universes",
          "Cloud_GetUserRestriction__Using_Universes_Places",
          "Cloud_UpdateUserRestriction__Using_Universes_Places",
          "Cloud_GetSubscription",
          "Cloud_ListUserRestrictions",
          "Cloud_ListUserRestrictionLogs",
          "Cloud_GetUserRestriction__Using_Universes",
          "Cloud_UpdateUserRestriction__Using_Universes",
          "Cloud_GetUser",
          "Cloud_GenerateUserThumbnail",
          "Cloud_ListAssetQuotas",
          "Cloud_ListInventoryItems",
          "Cloud_CreateUserNotification"
        ]
      }
    }
  ]
}
