name: Animator
type: class
category: Animations
memory_category: Instances
summary: |
  Responsible for the playback and replication of `Class.Animation|Animations`.
description: |
  The main class responsible for the playback and replication of
  `Class.Animation|Animations`. All replication of playing
  `Class.AnimationTrack|AnimationTracks` is handled through the Animator
  instance.

  It is created when `Class.Humanoid:LoadAnimation()` or
  `Class.AnimationController:LoadAnimation()` is called under a `Class.Humanoid`
  or `Class.AnimationController` for the first time.

  For animation replication to function it is important for the Animator to be
  first created on the server.

  ## Whether to load an Animation on the client or server

  In order for AnimationTracks to replicate correctly, it's important to know
  when they should be loaded on the client (via a `Class.LocalScript`) or on the
  server (via a `Class.Script`).

  If an `Class.Animator` is a descendant of a Humanoid or AnimationController in
  a Player's `Class.Player.Character|Character` then animations started on that
  Player's client will be replicated to the server and other clients.

  If the Animator is not a descendant of a player character, its animations must
  be loaded and started on the server to replicate.

  The Animator object must be initially created on the server and replicated to
  clients for animation replication to work at all. If an Animator is created
  locally, then AnimationTracks loaded with that Animator will not replicate.

  Both Humanoid:LoadAnimation() and AnimationController:LoadAnimation() will
  create an Animator if one does not already exist. When calling LoadAnimation
  from LocalScripts you need to be careful to wait for the Animator to replicate
  from the server before calling LoadAnimation if you want character animations
  to replicate. You can do this with WaitForChild("Animator").

  - [Animation Editor](../../../animation/editor.md) to explore this powerful
    built-in plugin for creating custom animations
  - [Using Animations](../../../animation/using.md) to learn how to add
    pre-built and custom animations to your game
code_samples:
  - Animator-LoadAnimation
inherits:
  - Instance
tags: []
deprecation_message: ''
properties:
  - name: Animator.EvaluationThrottled
    summary: ''
    description: ''
    code_samples: []
    type: bool
    tags:
      - ReadOnly
      - NotReplicated
      - NotBrowsable
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: Safe
    category: Behavior
    serialization:
      can_load: false
      can_save: false
  - name: Animator.PreferLodEnabled
    summary: ''
    description: ''
    code_samples: []
    type: bool
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Behavior
    serialization:
      can_load: true
      can_save: true
  - name: Animator.RootMotion
    summary: ''
    description: ''
    code_samples: []
    type: CFrame
    tags:
      - ReadOnly
      - NotReplicated
      - NotBrowsable
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: Safe
    category: Behavior
    serialization:
      can_load: false
      can_save: false
  - name: Animator.RootMotionWeight
    summary: ''
    description: ''
    code_samples: []
    type: float
    tags:
      - ReadOnly
      - NotReplicated
      - NotBrowsable
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: Safe
    category: Behavior
    serialization:
      can_load: false
      can_save: false
methods:
  - name: Animator:ApplyJointVelocities
    summary: |
      Computes relative velocities between parts and apply them to
      `Class.Motor6D.Part1`. These relative velocity calculations and
      assignments happen in the order provided.
    description: |
      Given the current set of `Class.AnimationTrack|AnimationTracks` playing,
      and their current times and play speeds, compute relative velocities
      between the parts and apply them to Motor6D.Part1 (the part which
      `Class.Animator` considers the "child" part). These relative velocity
      calculations and assignments happen in the order provided.

      This method doesn't apply velocities for a given joint if both of the
      joint's parts are currently part of the same assembly, for example, if
      they are still connected directly or indirectly by Motors or Welds.

      This method doesn't disable or remove the joints for you. You must disable
      or otherwise remove the rigid joints from the assembly before calling this
      method.

      The given `Motor6Ds` are not required to be descendants of the
      `Class.DataModel`. Removing the joints from the `Class.DataModel` before
      calling this method is supported.
    code_samples:
    parameters:
      - name: motors
        type: Variant
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: Animator:GetPlayingAnimationTracks
    summary: |
      Returns the list of currently playing `AnimationTracks|AnimationTracks`.
    description: |
      Returns the list of currently playing `AnimationTracks|AnimationTracks`.
    code_samples:
    parameters: []
    returns:
      - type: Array
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: Animator:LoadAnimation
    summary: |
      Loads an `Class.Animation` onto an `Class.Animator`, returning an
      `Class.AnimationTrack`. Used to load animations on locally controlled
      models (such as player characters) from the server.
    description: |
      **LoadAnimation** will load the given `Class.Animation` onto an
      `Class.Animator`, returning a playable `Class.AnimationTrack`. When called
      on Animators within models that the client has network ownership of, ie.
      the local player's character or from `Class.BasePart:SetNetworkOwner()`,
      this function also loads the animation for the server as well.

      You should use this function directly instead of the similarly-named
      `Class.Humanoid:LoadAnimation()` and
      `Class.AnimationController:LoadAnimation()` functions. These are
      deprecated proxies of this function which also create an `Class.Animator`
      if one does not exist; this can cause replication issues if you are not
      careful. For more information, see this
      [announcement post ](https://devforum.roblox.com/t/deprecating-loadanimation-on-humanoid-and-animationcontroller/857129)

      #### Should I load an Animation on the client or server?

      In order for AnimationTracks to replicate correctly, it's important to
      know when they should be loaded on the client (via a `Class.LocalScript`)
      or on the server (via a `Class.Script`).

      If an `Class.Animator` is a descendant of a Humanoid or
      AnimationController in a Player's `Class.Player.Character|Character` then
      animations started on that Player's client will be replicated to the
      server and other clients.

      If the Animator is not a descendant of a player character, its animations
      must be loaded and started on the server to replicate.

      The Animator object must be initially created on the server and replicated
      to clients for animation replication to work at all. If an Animator is
      created locally, then AnimationTracks loaded with that Animator will not
      replicate.

      Both `Class.Humanoid:LoadAnimation()` and
      `Class.AnimationController:LoadAnimation()` will create an Animator if one
      does not already exist. When calling LoadAnimation from LocalScripts you
      need to be careful to wait for the Animator to replicate from the server
      before calling LoadAnimation if you want character animations to
      replicate. You can do this with WaitForChild("Animator").
    code_samples:
      - Animator-LoadAnimation
    parameters:
      - name: animation
        type: Animation
        default:
        summary: |
          The `Class.Animation` to be used.
    returns:
      - type: AnimationTrack
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: Animator:RegisterEvaluationParallelCallback
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: callback
        type: Function
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: Animator:StepAnimations
    summary: |
      Increments the `Class.AnimationTrack.TimePosition` of all playing
      `Class.AnimationTrack|AnimationTracks` that are loaded onto the `Class.Animator`,
      applying the offsets to the model associated with the `Class.Animator`.
      For use in the command bar or by plugins only.
    description: |
      Increments the `Class.AnimationTrack.TimePosition` of all playing
      `Class.AnimationTrack|AnimationTracks` that are loaded onto the `Class.Animator`,
      applying the offsets to the model associated with the `Class.Animator`.
      For use in the command bar or by plugins only.

      The deltaTime parameter determines the number of seconds to increment on
      the animation's progress. Typically this function will be called in a loop
      to preview the length of an animation (see example).

      Note that once animations have stopped playing, the model's joints will
      need to be manually reset to their original positions (see example).

      This function is used to simulate playback of `Class.Animation|Animations` when the
      game isn't running. This allows animations to be previewed without the
      consequences of running the game, such as scripts executing. If the
      function is called while the game is running, or by `Class.Script|Scripts`
      or `Class.LocalScript|LocalScripts`, it will return an error.

      Developers designing their own custom animation editors are advised to use
      this function to preview animations, as it is the method the official
      Roblox Animation Editor plugin uses.
    code_samples:
      - Animator-StepAnimations
    parameters:
      - name: deltaTime
        type: float
        default:
        summary: |
          The amount of time in seconds animation playback is to be incremented
          by.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: PluginSecurity
    thread_safety: Unsafe
events:
  - name: Animator.AnimationPlayed
    summary: |
      Fires when the Animator starts playing an AnimationTrack.
    description: |
      Fires for all `Class.AnimationTrack:Play()` calls on AnimationTracks
      created and owned by the Animator.
    code_samples:
    parameters:
      - name: animationTrack
        type: AnimationTrack
        default:
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
callbacks: []
