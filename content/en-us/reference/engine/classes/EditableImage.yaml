name: EditableImage
type: class
category:
memory_category: Instances
summary: |
  Instance which allows for the runtime creation and manipulation of images.
description: |
  `Class.EditableImage` allows for the runtime creation and manipulation of
  images.

  To create a blank `Class.EditableImage`, use
  `Class.AssetService:CreateEditableImage()`. To create an `Class.EditableImage`
  from an existing image, use `Class.AssetService:CreateEditableImageAsync()`.

  `Class.EditableImage` can be used in any `Datatype.Content` property which
  takes an image, such as `Class.ImageLabel.ImageContent` or
  `Class.MeshPart.TextureContent`. This is done by setting the content property
  to `Datatype.Content.fromObject(editableImage)`.

  The `Class.EditableImage` coordinate system is relative to the top left of the
  image:

  - Top-left: `(0, 0)`
  - Bottom-right: `(Size.X - 1, Size.Y - 1)`

  When you use `Class.AssetService:PromptCreateAssetAsync()` to publish an
  object that has a `Datatype.Content` property which references an
  `Class.EditableImage`, the editable image is published as an image and the
  property is set to a new asset ID.
code_samples: []
inherits:
  - Object
tags:
  - NotCreatable
deprecation_message: ''
properties:
  - name: EditableImage.Size
    summary: |
      Size of the `Class.EditableImage` in pixels.
    description: |
      Size of the `Class.EditableImage` in pixels. The maximum size is
      1024&times;1024. Attempting to set this property to a larger size will
      cause it to be clamped at 1024.

      Setting this property changes the **canvas** size of the editable image
      but does not resize the contents. If changing to a larger size, new pixels
      will be set to an RGBA value of `[0, 0, 0, 0]`. If changing to a smaller
      size, existing pixels will be cropped. Consider using
      `Class.EditableImage:Resize()|Resize()` to update the contents while
      changing the size.
    code_samples: []
    type: Vector2
    tags:
      - ReadOnly
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: false
      can_save: true
    capabilities: []
    writeCapabilities: []
methods:
  - name: EditableImage:Destroy
    summary: ''
    description: ''
    code_samples: []
    parameters: []
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:DrawCircle
    summary: |
      Draws a circle at the specified point.
    description: |
      Draws a circle at the specified point on the `Class.EditableImage`. If the
      circle is semi-transparent, it will be blended with the pixels behind it
      using source over blending.
    code_samples: []
    parameters:
      - name: center
        type: Vector2
        default:
        summary: |
          Center of the circle, relative to the top-left corner of the
          `Class.EditableImage`. Positions outside the canvas bounds are
          allowed.
      - name: radius
        type: int
        default:
        summary: |
          Radius of the circle in pixels.
      - name: color
        type: Color3
        default:
        summary: |
          Color of the circle.
      - name: transparency
        type: float
        default:
        summary: |
          Transparency of the circle with 0 being fully opaque and 1 being fully
          transparent.
      - name: combineType
        type: ImageCombineType
        default:
        summary: |
          How the pixels of the source image are blended with the pixels of the
          added image.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:DrawImage
    summary: |
      Draws another `Class.EditableImage` into this `Class.EditableImage` at the
      given position.
    description: |
      Draws another `Class.EditableImage` into this `Class.EditableImage` at the
      given position. Positions outside the canvas bounds are allowed such that
      only part of the new image is drawn.
    code_samples: []
    parameters:
      - name: position
        type: Vector2
        default:
        summary: |
          Position at which the top-left corner of the added image will be
          drawn.
      - name: image
        type: Object
        default:
        summary: |
          The `Class.EditableImage` to draw into this `Class.EditableImage`.
      - name: combineType
        type: ImageCombineType
        default:
        summary: |
          How the pixels of the source image should be blended with the pixels
          of the added image.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:DrawImageProjected
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: mesh
        type: Object
        default:
        summary: ''
      - name: projection
        type: Dictionary
        default:
        summary: ''
      - name: brushConfig
        type: Dictionary
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:DrawImageTransformed
    summary: |
      Draws an image into this `Class.EditableImage` with transformations
      including scaling and rotation, placing it at the specified position.
    description: |
      This method lets you draw an `EditableImage` into this `EditableImage`
      with transformations applied, such as scaling and rotation. The position
      parameter specifies where the pivot point of the source image will be
      placed on this image after transformations. Positions outside the canvas
      bounds are allowed such that only part of the new image is drawn.
    code_samples:
      - EditableImage-DrawImageTransformed
      - EditableImage-DrawImageTransformed-Crop
    parameters:
      - name: position
        type: Vector2
        default:
        summary: |
          Position in pixels where the pivot point of the source image will be
          placed on this image.
      - name: scale
        type: Vector2
        default:
        summary: |
          Scaling factors for the source image along the X and Y axes.
      - name: rotation
        type: float
        default:
        summary: |
          The rotation angle in degrees, applied around the pivot point of the
          source image.
      - name: image
        type: Object
        default:
        summary: |
          The source `Class.EditableImage` to be drawn into this image.
      - name: options
        type: Dictionary?
        default:
        summary: |
          Optional dictionary for additional configuration:

          - `CombineType`: Specifies how the pixels of the source image blend
            with those of the destination. Default is
            `Enum.ImageCombineType.AlphaBlend`.
          - `SamplingMode`: Specifies the sampling method (e.g. `Default` for
            bilinear or `Pixelated` for nearest neighbor). Default is
            `Enum.ResamplerMode.Default`.
          - `PivotPoint`: Specifies the pivot point within the source image for
            scaling and rotation. Default is the center of the source image
            (i.e. `Image.Size / 2`).
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:DrawLine
    summary: |
      Draws a line between two provided points.
    description: |
      Draws an anti-aliased line on the `Class.EditableImage` one pixel thick
      between the two provided points.
    code_samples: []
    parameters:
      - name: p1
        type: Vector2
        default:
        summary: |
          Start point of the line.
      - name: p2
        type: Vector2
        default:
        summary: |
          End point of the line.
      - name: color
        type: Color3
        default:
        summary: |
          Color of the line.
      - name: transparency
        type: float
        default:
        summary: |
          Transparency of the line.
      - name: combineType
        type: ImageCombineType
        default:
        summary: |
          How the pixels of the source image are blended with the pixels of the
          added image.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:DrawRectangle
    summary: |
      Draws a rectangle of the given size at the given top-left position.
    description: |
      Draws a rectangle on the `Class.EditableImage` of the given size at the
      given top-left position.
    code_samples: []
    parameters:
      - name: position
        type: Vector2
        default:
        summary: |
          Position of the top-left of the rectangle. Unlike other drawing
          methods, this cannot be outside the canvas bounds of the
          `Class.EditableImage`.
      - name: size
        type: Vector2
        default:
        summary: |
          Size of the rectangle to draw, in pixels.
      - name: color
        type: Color3
        default:
        summary: |
          Color of the rectangle.
      - name: transparency
        type: float
        default:
        summary: |
          Transparency of the rectangle.
      - name: combineType
        type: ImageCombineType
        default:
        summary: |
          How the pixels of the source image are blended with the pixels of the
          added image.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:ReadPixelsBuffer
    summary: |
      Reads a rectangular region of pixels into a buffer.
    description: |
      A version of `Class.EditableImage:ReadPixels()|ReadPixels()` that returns
      a buffer instead of a table. Each number in the buffer is a single byte,
      while each number in the table is 4 bytes, making
      `Class.EditableImage:ReadPixelsBuffer()|ReadPixelsBuffer()` more
      memory-efficient than `Class.EditableImage:ReadPixels()|ReadPixels()`.

      Note that this method uses alpha instead of transparency, unlike the
      `Class.EditableImage` drawing methods.
    code_samples:
      - EditableImage-ReadPixels1
    parameters:
      - name: position
        type: Vector2
        default:
        summary: |
          Top-left corner of the rectangular region of pixels to read.
      - name: size
        type: Vector2
        default:
        summary: |
          Size of the rectangular region of pixels to read.
    returns:
      - type: buffer
        summary: |
          Buffer where each pixel is represented by four bytes (red, green, blue
          and alpha respectively). The length of the buffer can be calculated as
          `Size.X * Size.Y * 4` bytes.
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Safe
    capabilities: []
    writeCapabilities: []
  - name: EditableImage:WritePixelsBuffer
    summary: |
      Writes a rectangular region of pixels into the image.
    description: |
      A version of `Class.EditableImage:WritePixels()|WritePixels()` that takes
      a buffer instead of a table. Each number in the buffer is a single byte,
      while each number in the table is 4 bytes, making
      `Class.EditableImage:WritePixelsBuffer()|WritePixelsBuffer()` more
      memory-efficient than `Class.EditableImage:WritePixels()|WritePixels()`.

      Note that this method uses alpha instead of transparency, unlike the
      `Class.EditableImage` drawing methods.
    code_samples:
      - EditableImage-ReadPixelsWritePixels1
    parameters:
      - name: position
        type: Vector2
        default:
        summary: |
          Top-left corner of the rectangular region to draw the pixels into.
      - name: size
        type: Vector2
        default:
        summary: |
          Size of the rectangular region of pixels to write.
      - name: buffer
        type: buffer
        default:
        summary: |
          A buffer where each pixel is represented by four bytes (red, green,
          blue, and alpha respectively). The length of the buffer should be
          `Size.X * Size.Y * 4` bytes.
    returns:
      - type: void
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events: []
callbacks: []
