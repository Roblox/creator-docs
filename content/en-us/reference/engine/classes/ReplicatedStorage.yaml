name: ReplicatedStorage
type: class
category: Utility
memory_category: Instances
summary: |
  A container service for objects that are replicated to all game clients.
description: |
  **ReplicatedStorage** is a general container service for objects that are
  available to both the server and connected game clients. It is ideal for
  `Class.ModuleScript`, `Class.RemoteFunction`, `Class.RemoteEvent` and other
  objects that are useful to both server-side `Class.Script|Scripts` and
  client-side `Class.LocalScript|LocalScripts`.

  `Class.LocalScript|LocalScripts` do not run when parented to this service,
  even if they are `Class.BaseScript.Enabled|Enabled`. Similarly,
  `Class.Script|Scripts` do not run when parented to this service unless you
  change their `Enum.RunContext` property from its default value of `Legacy`.

  If a `Class.ModuleScript` within this service is required by any other script,
  it runs as normal. Such modules typically house code that is shared by the
  server and client. Server-side `Class.Script|Scripts` that run on their own
  should be parented to `Class.ServerScriptService` instead. Client-side
  `Class.LocalScript|LocalScripts` have various other locations where they
  eventually run on a `Class.Player` client: `Class.StarterPlayerScripts`,
  `Class.StarterCharacterScripts`, or `Class.StarterGui`.

  This service behaves similarly to `Class.ServerStorage` except that its
  contents are replicated. If you are storing assets which should not be visible
  on the client or have no use to the client at all, use `Class.ServerStorage`
  instead.

  Objects parented to this service are fully replicated to clients, and normal
  replication rules apply: any changes that are made on the client persist, but
  won't be replicated to the server. Client changes may be overwritten if the
  server does something that overwrites those changes. For instance, a
  `Class.Part` parented to `ReplicatedStorage` by the server may have a blue
  `Class.BasePart.BrickColor|BrickColor`. A client could change this property to
  red locally, but this change remains only on the client. If the server changes
  the color to green, this change is replicated to the client.
code_samples:
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties: []
methods: []
events: []
callbacks: []
