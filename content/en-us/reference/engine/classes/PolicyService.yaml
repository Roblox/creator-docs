name: PolicyService
type: class
category:
memory_category: Instances
summary: |
  Helps you query information regarding policy compliance for players around the
  world based on age range, location, and platform type.
description: |
  `PolicyService` helps you query information regarding policy compliance for
  players around the world based on age range, location, and platform type.
code_samples:
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
  - NotReplicated
deprecation_message: ''
properties: []
methods:
  - name: PolicyService:CanViewBrandProjectAsync
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: player
        type: Player
        default:
        summary: ''
      - name: brandProjectId
        type: string
        default:
        summary: ''
    returns:
      - type: bool
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: PolicyService:GetPolicyInfoForPlayerAsync
    summary: |
      Returns policy information about a player which is based on geolocation,
      age group, and platform.
    description: |
      Returns policy information about a player which is based on geolocation,
      age group, and platform. The structure of the returned dictionary is as
      follows:

      <table>
      <thead>
      <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Required For</th>
      <th>Description</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td><code>AreAdsAllowed</code></td>
      <td>Boolean</td>
      <td>Any experience that includes <a href="../../../production/monetization/immersive-ads.md">immersive ads</a>.</td>
      <td>When <code>true</code>, the player might see immersive ads within an experience.</td>
      </tr>
      <tr>
      <td><code>ArePaidRandomItemsRestricted</code></td>
      <td>Boolean</td>
      <td>Any experience that has paid random items.</td>
      <td>When <code>true</code>, the player can <b>not</b> interact with paid random item generators, either via inâ€‘experience currency bought with Robux or Robux directly.</td>
      </tr>
      <tr>
      <td><code>AllowedExternalLinkReferences</code></td>
      <td>Array</td>
      <td>Any experience that references external links.</td>
      <td>A list of external link references such as social media links, handles, or iconography that a player is permitted to see. Possible values include <code>"Discord"</code>, <code>"Facebook"</code>, <code>"Twitch"</code>, <code>"YouTube"</code>, <code>"X"</code>, <code>"GitHub"</code>, and <code>"Guilded"</code>.</td>
      </tr>
      <tr>
      <td><code>IsContentSharingAllowed</code></td>
      <td>Boolean</td>
      <td>Any experience that allows users to share content off platform.</td>
      <td>When <code>true</code>, the player is allowed to share content using APIs which open external sharing flows such as <code>Class.CaptureService:PromptShareCapture()|PromptShareCapture()</code>.</td>
      </tr>
      <tr>
      <td><code>IsEligibleToPurchaseSubscription</code></td>
      <td>Boolean</td>
      <td>Any experience that wants to sell subscriptions.</td>
      <td>When <code>true</code>, the player is eligible to purchase subscriptions within an experience.</td>
      </tr>
      <tr>
      <td><code>IsPaidItemTradingAllowed</code></td>
      <td>Boolean</td>
      <td>Any experience that allows users to purchase virtual items that they can trade with other players.</td>
      <td>When <code>true</code>, the player can trade virtual items that they purchased with in-experience currency or Robux.</td>
      </tr>
      <tr>
      <td><code>IsSubjectToChinaPolicies</code></td>
      <td>Boolean</td>
      <td>Any experience that is available in China.</td>
      <td>When <code>true</code>, an experience should enforce compliance changes. See <a href="https://devforum.roblox.com/t/new-programs-available-roblox-china-licensed-to-operate/1023361">this forum post</a> for more information.</td>
      </tr>
       	</tbody>
      </table>

      ##### Exceptions

      Like any async call, this method needs to be wrapped in
      `Global.LuaGlobals.pcall()` and error-handled properly. A full list of
      possible error messages and their reasons is:

      <table>
      <thead>
      <tr>
      <th>Message</th>
      <th>Reason</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td>Instance was not a player</td>
      <td>The <code>player</code> parameter is not a <code>Class.Player</code> instance.</td>
      </tr>
      <tr>
      <td>Players not found</td>
      <td>Internal error that the <code>Class.Players</code> object is missing.</td>
      </tr>
       <tr>
      <td>This method cannot be called on the client for a non-local player</td>
      <td>This method cannot be called on the client for a non-local <code>Class.Player</code>.</td>
      </tr>
      <tr>
      <td>GetPolicyInfoForPlayerAsync is called too many times</td>
      <td>Internal error that <code>GetPolicyInfoForPlayerAsync()</code> is called more than 100 (current setting) times before an HTTP response comes back.</td>
      </tr>
      </tbody>
      </table>

      See also `Class.LocalizationService:GetCountryRegionForPlayerAsync()`
      which returns a country/region code string according to the player's
      client IP geolocation.
    code_samples:
      - getting-policy-information-for-a-player
    parameters:
      - name: player
        type: Instance
        default:
        summary: |
          The `Class.Player` to get policy information for.
    returns:
      - type: Dictionary
        summary: |
          A dictionary containing information about the policy information of
          the requested player; see above for the dictionary structure.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events: []
callbacks: []
