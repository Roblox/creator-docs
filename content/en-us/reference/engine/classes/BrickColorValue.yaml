name: BrickColorValue
type: class
category: Values
memory_category: Instances
summary: |
  A container object for a single BrickColor value.
description: |
  An instance which is used to store a BrickColor value.
code_samples:
inherits:
  - ValueBase
tags: []
deprecation_message: ''
properties:
  - name: BrickColorValue.Value
    summary: |
      Used to hold a `Datatype.BrickColor` value.
    description: |
      Used to hold a `Datatype.BrickColor` value.
    code_samples:
    type: BrickColor
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
methods: []
events:
  - name: BrickColorValue.Changed
    summary: |
      Fired whenever the `Class.BrickColorValue.Value` of the BrickColorValue is
      changed.
    description: |
      Fired whenever the `Class.BrickColorValue.Value` of the
      `Class.BrickColorValue` is changed. It will run with the new value being
      stored in the argument object, instead of a string representing the
      property being changed.

      This event, like other changed events, can be used to track when an
      BrickColorValue changes and to track the different values that it may
      change to.

      Equivalent changed events exist for similar objects, such as
      `Class.NumberValue` and `Class.StringValue`, depending on what object type
      best suits the need.
    code_samples:
      - BrickColorValue-Changed1
    parameters:
      - name: value
        type: BrickColor
        default:
        summary: |
          The new value after the change.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: BrickColorValue.changed
    summary: ''
    description: ''
    code_samples:
    parameters:
      - name: value
        type: BrickColor
        default:
        summary: ''
    tags:
      - Deprecated
    deprecation_message: |
      This event is a deprecated variant of `Class.BrickColorValue.Changed`
      which should be used instead.
    security: None
    thread_safety: Unsafe
callbacks: []
