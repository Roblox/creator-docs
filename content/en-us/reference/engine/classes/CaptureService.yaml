name: CaptureService
type: class
memory_category: Instances
summary: |
  A service which provides control over screenshot and video capture features.
description: |
  `CaptureService` is a client-side service that allows developers to control
  how the screenshot and video capture feature integrates with their experiences.
  It can be used to include preset moments where a capture is automatically
  taken for a user, and that user can then save, share, or delete the capture.
code_samples: []
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties: []
methods:
  - name: CaptureService:CaptureScreenshot
    summary: |
      Takes a screenshot and provides a temporary `contentId` to identify it.
    description: |
      This method captures a screenshot for the user but does not immediately
      save it to their **Captures** gallery within the experience's main menu.
      Instead, a temporary `contentId` is created to identify the new capture.

      The `onCaptureReady` callback can be used to prompt the user to save or
      share the screenshot:

      ```lua
      local CaptureService = game:GetService("CaptureService")

      -- Reference to an ImageLabel parent of the script containing this code
      local imageLabel = script.Parent

      local function onCaptureReady(contentId)
      	imageLabel.Image = contentId
      end

      CaptureService:CaptureScreenshot(onCaptureReady)
      ```
    code_samples: []
    parameters:
      - name: onCaptureReady
        type: Function
        default: ''
        summary: |
          A callback function that is called with the `contentId` of the new
          capture once it is ready.
    returns:
      - type: ()
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: CaptureService:PromptSaveCapturesToGallery
    summary: |
      Prompts the user to save specified captures to their gallery.
    description: |
      This method prompts the user to save the captures identified by the
      provided `contentIds` to their **Captures** gallery within the
      experience's main menu.
    code_samples: []
    parameters:
      - name: captures
        type: Array
        default: ''
        summary: ''
      - name: resultCallback
        type: Function
        default: ''
        summary: |
          A callback function that will be invoked with a dictionary mapping
          each `contentId` to a boolean indicating if the user accepted saving
          that capture.
    returns:
      - type: ()
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: CaptureService:PromptShareCapture
    summary: |
      Prompts the user to share a specified capture.
    description: |
      This method prompts the user to share the capture identified by the
      provided `contentId` using the native share sheet on their device.

      The capture is shared along with an invite link to the experience
      when supported. Not all devices support including both a screenshot or video
      and an invite link.

      The `launchData` will be available in the `launchData` field for users who
      join through the invite link.

      To avoid an error when calling this method, first call
      `Class.PolicyService:GetPolicyInfoForPlayerAsync()` and check that
      `IsContentSharingAllowed` is true in the returned dictionary.
    code_samples: []
    parameters:
      - name: captureContent
        type: Content
        default: ''
        summary: ''
      - name: launchData
        type: string
        default: ''
        summary: |
          An optional string to include as launch data in the invite link.
      - name: onAcceptedCallback
        type: Function
        default: ''
        summary: |
          An optional callback function invoked if the user accepts sharing.
      - name: onDeniedCallback
        type: Function
        default: ''
        summary: |
          An optional callback function invoked if the user denies sharing.
    returns:
      - type: ()
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: CaptureService:StopVideoCapture
    summary: |
      Ends a video capture initiated by
      `Class.CaptureService:StartVideoCaptureAsync()|StartVideoCaptureAsync()`.
    description: |
      This method ends a video capture that was started by the
      `Class.CaptureService:StartVideoCaptureAsync()|StartVideoCaptureAsync()`
      method.
    code_samples: []
    parameters: []
    returns:
      - type: ()
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: CaptureService:TakeCapture
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: onCaptureReady
        type: Function
        default: ''
        summary: ''
      - name: captureParams
        type: Dictionary
        default: nil
        summary: ''
    returns:
      - type: ()
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: CaptureService:StartVideoCaptureAsync
    summary: |
      Initiates a video capture recording.
    description: |
      This method initiates a video capture recording. The recording will
      continue until the `Class.CaptureService:StopVideoCapture()|StopVideoCapture()`
      method is called, or when 30 seconds have passed, whichever comes first.

      During the video recording, all user voices are muted.

      The `onCaptureReady` callback can be used to prompt the user to save or
      share the video capture.

      ```lua
      local CaptureService = game:GetService("CaptureService")

      local onCaptureReady = function(videoCapture, result)
      	if result ~= Enum.VideoCaptureResult.Success or not videoCapture then
      		print("Video recording failed to complete for reason: " .. tostring(result))
      	else
      		-- Prompt the user to save the video capture to their gallery
      		CaptureService:PromptSaveCapturesToGallery({ Content.fromObject(videoCapture) })
      	end
      end

      local videoRecordingAllowedResult: Enum.VideoCaptureStartedResult = CaptureService:StartVideoCaptureAsync(onCaptureReady, {})

      if videoRecordingAllowedResult ~= Enum.VideoCaptureStartedResult.Success then
      	print("Video recording failed to start for reason: " .. tostring(videoRecordingAllowedResult))
      end
      ```
    code_samples: []
    parameters:
      - name: onCaptureReady
        type: Function
        default: ''
        summary: |
          A callback function that is called with the `Class.VideoCapture`
          object and the result of type `Enum.VideoCaptureResult` of the video capture
          once it is ready.
      - name: captureParams
        type: Dictionary
        default: nil
        summary: ''
    returns:
      - type: VideoCaptureStartedResult
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events:
  - name: CaptureService.CaptureBegan
    summary: |
      Fires immediately before a capture begins.
    description: |
      This event fires right before a new capture is taken. It can be
      used to customize the capture experience, for example by hiding
      certain GUI elements.
    code_samples: []
    parameters:
      - name: captureType
        type: CaptureType
        default: ''
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    capabilities: []
    writeCapabilities: []
  - name: CaptureService.CaptureEnded
    summary: |
      Fires after a capture finishes.
    description: |
      This event fires after a new capture completes. It can be used
      to restore any changes made when the
      `Class.CaptureService.CaptureBegan|CaptureBegan` event fired.
    code_samples: []
    parameters:
      - name: captureType
        type: CaptureType
        default: ''
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    capabilities: []
    writeCapabilities: []
  - name: CaptureService.CaptureSaved
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: captureInfo
        type: Dictionary
        default: ''
        summary: ''
    tags:
      - Deprecated
    deprecation_message: |
      This event has been superseded by the
      `Class.CaptureService.UserCaptureSaved|UserCaptureSaved` event.
    security: None
    capabilities: []
    writeCapabilities: []
  - name: CaptureService.UserCaptureSaved
    summary: |
      Fires when the user saves a capture.
    description: |
      This event fires when the user saves a screenshot using the Roblox
      screenshot capture UI. It can be used for analytics or to prompt the user
      to share their capture.
    code_samples: []
    parameters:
      - name: captureContentId
        type: ContentId
        default: ''
        summary: |
          The `contentId` identifying the screenshot that the user saved.
    tags: []
    deprecation_message: ''
    security: None
    capabilities: []
    writeCapabilities: []
callbacks: []
