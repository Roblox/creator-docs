name: UIGridStyleLayout
type: class
category:
memory_category: Instances
summary: |
  The base class for grid style UI layouts.
description: |
  The base class for grid style UI layouts.
code_samples:
inherits:
  - UILayout
tags:
  - NotCreatable
  - NotBrowsable
deprecation_message: ''
properties:
  - name: UIGridStyleLayout.AbsoluteContentSize
    summary: |
      The absolute size of space being taken up by the grid layout.
    description: |
      The **AbsoluteContentSize** property of a `Class.UIGridStyleLayout`
      reveals how much space the elements of the grid are taking up, including
      any padding created by the grid. This property is particularly useful to
      size containers of grids such as `Class.Frame|Frames` to make sure they
      aren't any larger than the grid itself.

      This property updates as soon as it's read. It will not fire a
      `Class.Instance.Changed` event immediately after the UI has changed, but
      if the value is read, it will become current and a
      `Class.Instance.Changed` event will fire on the next render step.
    code_samples:
    type: Vector2
    tags:
      - ReadOnly
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: Unsafe
    category: Data
    serialization:
      can_load: false
      can_save: false
  - name: UIGridStyleLayout.FillDirection
    summary: |
      Determines the axis in which UI objects are laid out.
    description: |
      The **FillDirection** property determines the axis in which UI elements
      are laid out. `Enum.FillDirection.Horizontal` arranges objects from left
      to right, while `Enum.FillDirection.Vertical` arranges objects from top to
      bottom. To reverse elements, such as to arrange right to left, you'll need
      to reverse the sorting; for example by negating the child UI objects'
      `Class.GuiObject.LayoutOrder` values when
      `Class.UIGridStyleLayout.SortOrder` is set to
      `Enum.SortOrder.LayoutOrder`.

      <img src="../../../assets/engine-api/classes/UIListLayout/FillDirection.png" width="720" />
    code_samples:
    type: FillDirection
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Behavior
    serialization:
      can_load: true
      can_save: true
  - name: UIGridStyleLayout.HorizontalAlignment
    summary: |
      Determines the horizontal alignment of UI elements within the parent
      element.
    description: |
      The **HorizontalAlignment** property determines the **X** axis alignment
      of the grid of UI elements, much like `Class.TextLabel.TextXAlignment`
      does with `Class.TextLabel.Text`.
    code_samples:
    type: HorizontalAlignment
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Behavior
    serialization:
      can_load: true
      can_save: true
  - name: UIGridStyleLayout.SortOrder
    summary: |
      Determines the order in which child UI objects are placed in a layout.
    description: |
      The **SortOrder** property determines the order in which child UI objects
      are placed in a layout.

      For `Enum.SortOrder.LayoutOrder`, an ascending sort is used on the
      `Class.GuiObject.LayoutOrder|LayoutOrder` property of child UI objects. If
      two children share the same `Class.GuiObject.LayoutOrder|LayoutOrder`,
      whichever was added sooner to the parent object takes precedence.

      For `Enum.SortOrder.Name`, an alphanumeric sort is used on the
      `Class.Instance.Name` of the child UI objects.

      <img src="../../../assets/engine-api/classes/UIListLayout/SortOrder.png" width="720" />
    code_samples:
    type: SortOrder
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Behavior
    serialization:
      can_load: true
      can_save: true
  - name: UIGridStyleLayout.VerticalAlignment
    summary: |
      Determines the vertical alignment of UI elements within the parent
      element.
    description: |
      The **VerticalAlignment** property determines the **Y** axis alignment of
      the grid of UI elements, much like `Class.TextLabel.TextYAlignment` does
      with `Class.TextLabel.Text`.
    code_samples:
    type: VerticalAlignment
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Behavior
    serialization:
      can_load: true
      can_save: true
methods:
  - name: UIGridStyleLayout:ApplyLayout
    summary: |
      Force re-layout of sibling UI elements.
    description: |
      The ApplyLayout method forces sibling UI elements to be re-laid out in
      case the sorting criteria may have changed (such as when
      `Class.UIGridStyleLayout.SortOrder` is set to Custom, and the
      `Class.UIGridStyleLayout:SetCustomSortFunction()` behavior changed).
      Re-layouts automatically happen when UI elements are added/removed, or
      their `Class.Instance.Name` or `Class.GuiObject.LayoutOrder` change.

      The manner in which sibling UI elements are laid out is dependent on the
      implementation of this abstract class. In other words, a concrete class
      like `Class.UIListLayout` or `Class.UIGridLayout` is responsible for the
      actual element positioning.
    code_samples:
      - UI-Sort-Order
    parameters: []
    returns:
      - type: void
        summary: ''
    tags:
      - Deprecated
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: UIGridStyleLayout:SetCustomSortFunction
    summary: |
      Sets the function used to determine the order of elements when SortOrder
      is set to Custom.
    description: |
      This method is deprecated. Use `Class.UIGridStyleLayout.SortOrder`
      instead.

      The function should take two arguments (each will be an `Class.Instance`
      child to compare), and return true if a comes before b, otherwise return
      false. In other words, use this function the same way you would use a '
      function. The sorting should be deterministic, otherwise sort will fail
      and fall back to name order.
    code_samples:
    parameters:
      - name: function
        type: Function
        default: nil
        summary: ''
    returns:
      - type: void
        summary: ''
    tags:
      - Deprecated
    deprecation_message: |
      This method is deprecated in favor of using other SortOrder means, such as
      by Name or LayoutOrder.
    security: None
    thread_safety: Unsafe
events: []
callbacks: []
