name: MeshPart
type: class
category: Meshes
memory_category: PhysicsParts
summary: |
  A form of `Class.BasePart` that includes a physically simulated custom mesh.
description: |
  `Class.MeshPart` is a form of `Class.BasePart` that includes a physically
  simulated custom mesh. Unlike with other mesh classes, such as
  `Class.SpecialMesh` and `Class.BlockMesh`, they are not parented to a
  `Class.BasePart` but rather behave as a `Class.BasePart` in their own right.

  The mesh and texture of a `Class.MeshPart` are determined by the
  `Class.MeshPart.MeshId|MeshId` and `Class.MeshPart.TextureID|TextureID`
  properties. For more information, see [Meshes](../../../parts/meshes.md).
code_samples:
inherits:
  - TriangleMeshPart
tags: []
deprecation_message: ''
properties:
  - name: MeshPart.DoubleSided
    summary: |
      Determines whether to render both faces of polygons in the mesh.
    description: |
      This property determines whether to render both faces of polygons in the
      mesh. It is only changeable in Studio. This is useful for meshes that are
      typically modeled as "cards" such as a leaf, hair, or cloth.
    code_samples:
    type: bool
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: PluginSecurity
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.HasJointOffset
    summary: ''
    description: ''
    code_samples:
    type: bool
    tags:
      - Hidden
    deprecation_message: ''
    security:
      read: None
      write: NotAccessibleSecurity
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.HasSkinnedMesh
    summary: ''
    description: ''
    code_samples:
    type: bool
    tags:
      - Hidden
    deprecation_message: ''
    security:
      read: None
      write: NotAccessibleSecurity
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.JointOffset
    summary: ''
    description: ''
    code_samples:
    type: Vector3
    tags:
      - Hidden
    deprecation_message: ''
    security:
      read: None
      write: NotAccessibleSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.MeshContent
    summary: ''
    description: ''
    code_samples: []
    type: Content
    tags:
      - Hidden
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: NotAccessibleSecurity
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: false
      can_save: false
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.MeshId
    summary: |
      Content ID of the mesh that is displayed on the `Class.MeshPart`.
    description: |
      Content ID of the mesh that is displayed on the `Class.MeshPart`.

      Note that this property currently cannot be changed by scripts as the
      collision model of the mesh cannot be recomputed during runtime. See
      `Class.InsertService:CreateMeshPartAsync()` as a method to create a new
      `Class.MeshPart` from a given `Class.MeshPart.MeshId|MeshId` and with a
      specified `Class.MeshPart.CollisionFidelity|CollisionFidelity` and
      `Class.MeshPart.RenderFidelity|RenderFidelity`.
    code_samples:
    type: ContentId
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: NotAccessibleSecurity
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.RenderFidelity
    summary: |
      The level of detail used to render the `Class.MeshPart`.
    description: |
      This property determines the level of detail that the `Class.MeshPart`
      will be shown in. It can be set to the possible values of the
      `Enum.RenderFidelity` enum.

      The default value is `Enum.RenderFidelity.Automatic|Automatic`, meaning
      the mesh's detail is based on its distance from the camera as outlined in
      the following table.

      <table>
          <thead>
              <tr>
                  <th>Distance From Camera</th>
                  <th>Render Fidelity</th>
                  <th>Example</th>
              </tr>
          </thead>
          <tbody>
              <tr>
                  <td>Less than 250 studs</td>
                  <td>Highest</td>
                  <td><img src="../../../assets/modeling/meshes/Render-Fidelity-High.jpg" width="200" /></td>
              </tr>
              <tr>
                  <td>250-500 studs</td>
                  <td>Medium</td>
                  <td><img src="../../../assets/modeling/meshes/Render-Fidelity-Medium.jpg" width="200" /></td>
              </tr>
              <tr>
                  <td>500 or more studs</td>
                  <td>Lowest</td>
                  <td><img src="../../../assets/modeling/meshes/Render-Fidelity-Low.jpg" width="200" /></td>
              </tr>
          </tbody>
      </table>
    code_samples:
    type: RenderFidelity
    tags:
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: PluginSecurity
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.TextureContent
    summary: ''
    description: ''
    code_samples: []
    type: Content
    tags:
      - Hidden
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: false
      can_save: false
    capabilities:
      - Basic
    writeCapabilities: []
  - name: MeshPart.TextureID
    summary: |
      The texture applied to the `Class.MeshPart`.
    description: |
      The texture applied to the `Class.MeshPart`. When this property is set to
      an empty string, no texture will be applied to the mesh.

      ```
      MeshPart.TextureID = "" -- no texture
      ```

      Note, although the `Class.MeshPart.MeshId` property cannot be changed
      during runtime, the texture can.

      #### How can I change the texture of a mesh?

      Using the TextureId property, the texture of a mesh can be changed without
      having to reupload the mesh. To do this, a new image will need to be
      uploaded to Roblox with the desired texture. The original texture image
      file can be obtained by exporting the mesh using the 'Export Selection'
      option in Roblox Studio. The image file will be saved alongside the
      exported .obj file.

      The new texture can then be re-uploaded to Roblox as a Decal and its
      content ID can be applied to the mesh using the TextureId property.

      #### How can I make a textured mesh?

      A mesh can only be textured if the mesh has been UV mapped. UV mapping
      refers to the practice of projecting a texture map onto a mesh. This
      cannot be done using Roblox Studio and has to be done using an external 3D
      modelling application such as [Blender][1].

      [1]: https://www.blender.org/
    code_samples:
    type: ContentId
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Appearance
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Basic
    writeCapabilities: []
methods:
  - name: MeshPart:ApplyMesh
    summary: ''
    description: ''
    code_samples:
    parameters:
      - name: meshPart
        type: Instance
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events: []
callbacks: []
