name: AssetService
type: class
category: Data
memory_category: Instances
summary: |
  A non-replicated service that handles asset-related queries to the Roblox web
  API.
description: |
  **AssetService** is a non-replicated service that handles asset-related
  queries to the Roblox web API.
code_samples:
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties: []
methods:
  - name: AssetService:CreateEditableImageAsync
    summary: |
      Creates a new `Class.EditableImage` instance populated with the given
      image.
    description: |
      Creates a new `Class.EditableImage` instance populated with the given
      texture. Non-asset texture IDs such as `rbxthumb://` are supported. If
      using an image asset, it must be associated with and/or owned by a creator
      of the experience, or it must have been created inside the experience.
    code_samples: []
    parameters:
      - name: textureId
        type: Content
        default:
        summary: |
          Texture ID of the image to populate the `Class.EditableImage`.
    returns:
      - type: EditableImage
        summary: |
          A new `Class.EditableImage` containing the provided image.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:CreateEditableMeshAsync
    summary: |
      Returns a new `Class.EditableMesh` instance created from an existing mesh
      content ID.
    description: |
      Returns a new `Class.EditableMesh` instance created from an existing mesh
      content ID.
    code_samples: []
    parameters:
      - name: meshId
        type: Content
        default:
        summary: |
          Content ID of the mesh from which to create an `Class.EditableMesh`
          instance.
    returns:
      - type: EditableMesh
        summary: |
          The new `Class.EditableMesh` instance.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:CreateEditableMeshFromPartAsync
    summary: |
      Returns a new `Class.EditableMesh` instance created from an existing
      `Class.MeshPart`.
    description: |
      Returns a new `Class.EditableMesh` instance created from the
      `Class.MeshPart.MeshId|MeshId` of an existing `Class.MeshPart`.
    code_samples: []
    parameters:
      - name: meshPart
        type: Instance
        default:
        summary: |
          The `Class.MeshPart` from which to create an `Class.EditableMesh`
          instance. The part must have a valid `Class.MeshPart.MeshId|MeshId`
          for this method to operate.
    returns:
      - type: EditableMesh
        summary: |
          The new `Class.EditableMesh` instance.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:CreatePlaceAsync
    summary: |
      Clones a place through the given `templatePlaceID`.
    description: |
      Clones a place through the given `templatePlaceID` and returns the
      `Class.DataModel.PlaceId|PlaceId` of the new place, which you can use with
      `Class.TeleportService`. The clone place displays within the inventory of
      the place's creator with the given name and description.
      
      Note that the template place must have template copying enabled through
      place settings. You cannot use this method to clone places that you don't
      own.

      Frequent use of this API is not recommended, particularly if the created
      places contain scripts, as updating the code in a large volume of places
      quickly becomes infeasible. For user-generated worlds, consider
      serializing user creations and saving them in `Class.DataStore|DataStores`
      instead.
    code_samples:
    parameters:
      - name: placeName
        type: string
        default:
        summary: |
          Name of the new place.
      - name: templatePlaceID
        type: int64
        default:
        summary: |
          `Class.DataModel.PlaceId|PlaceId` of the place to clone.
      - name: description
        type: string
        default: ''
        summary: |
          Description of the new place.
    returns:
      - type: int64
        summary: |
          `Class.DataModel.PlaceId|PlaceId` of the new place.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:CreatePlaceInPlayerInventoryAsync
    summary: |
      Clones a place through the given `templatePlaceID` and puts
      it into the inventory of the given player.
    description: ''
    code_samples:
    parameters:
      - name: player
        type: Instance
        default:
        summary: ''
      - name: placeName
        type: string
        default:
        summary: ''
      - name: templatePlaceID
        type: int64
        default:
        summary: ''
      - name: description
        type: string
        default: ''
        summary: ''
    returns:
      - type: int64
        summary: ''
    tags:
      - Yields
    deprecation_message: |
      This method has been removed and is no longer functional.
    security: None
    thread_safety: Unsafe
  - name: AssetService:GetAssetIdsForPackage
    summary: |
      Returns an array of asset IDs that are contained in a specified package.
    description: |
      Returns an array of asset IDs that are contained in a specified package.
    code_samples:
    parameters:
      - name: packageAssetId
        type: int64
        default:
        summary: ''
    returns:
      - type: Array
        summary: |
          Asset IDs that are contained in a specified package.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:GetAudioMetadataAsync
    summary: |
      Provides relevant metadata about a specific audio source.
    description: |
      Provides relevant metadata about a specific audio source (artist, title, duration, genre, type, etc.).
    code_samples:
      - AssetService-GetAudioMetadataAsync
    parameters:
      - name: idList
        type: Array
        default:
        summary: |
          Array of asset or content IDs for which to retrieve metadata. Max
          batch size is 30.
    returns:
      - type: Array
        summary: |
          Array of dictionary tables in the same order as the request, where each dictionary contains the following metadata for its asset/content:

          - `AssetId` ([string](/luau/strings.md))

          - `Title` ([string](/luau/strings.md))

          - `Artist` ([string](/luau/strings.md))

          - `Duration` ([number](/luau/numbers.md)) in seconds

          - `AudioType` (`Enum.AudioSubType`)

          Note that if an error occurs on fetching metadata for any of the
          requested assets, for example the asset ID doesn't exist, its dictionary table is still included in the returned array but it only contains the `AssetId` field for reference purposes. Additionally, if the `AudioType` cannot be determined for a given asset (perhaps because it's private audio), the resulting dictionary will not contain an `AudioType` entry.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:GetBundleDetailsAsync
    summary: |
      Returns details of the contents of specified bundle.
    description: |
      This function returns details of the contents of the specified bundle.

      If the bundle ID does not exist, it throws `HTTP 400 (Bad Request)`. If `bundleId` is not convertible to an integer, it throws
      `Unable to cast string to int64`.
    code_samples:
      - getting-bundle-details
    parameters:
      - name: bundleId
        type: int64
        default:
        summary: |
          The ID of the specified bundle.
    returns:
      - type: Dictionary
        summary: |
          Dictionary with the following key-value pairs containing
          details about the specified bundle:

          - `Id` — Bundle ID (same as passed `bundleId` argument)

          - `Name` — Bundle name

          - `Description` — Bundle description

          - `BundleType` — String representing the `Enum.BundleType`, for example `"BodyParts"` or `"DynamicHead"`

          - `Items` — Array of items in the bundle, each with details represented through the following keys:

            - `Id` — Item ID

            - `Name` — Item name

            - `Type` — Item type such as `"Asset"`
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:GetCreatorAssetID
    summary: |
      Returns the UserId of the account who created the creationID asset.
    description: |
      The GetCreatorAssetID function returns the `Class.Player.UserId` of the
      account who created the _creationID_ asset.

      This member is broken and doesn't function correctly. Avoid using it.
    code_samples:
    parameters:
      - name: creationID
        type: int64
        default:
        summary: ''
    returns:
      - type: int64
        summary: ''
    tags:
      - Yields
      - Deprecated
    deprecation_message: |
      This item is deprecated and no longer functions correctly. Do not use it
      for new work.
    security: None
    thread_safety: Unsafe
  - name: AssetService:GetGamePlacesAsync
    summary: |
      Returns a `Class.StandardPages` object which contains the name and `Class.DataModel.PlaceId|PlaceId` of places within the current experience.
    description: |
      Returns a `Class.StandardPages` object which contains the name and `Class.DataModel.PlaceId|PlaceId` of places within the current experience.
    code_samples:
      - AssetService-GetGamePlacesAsync1
    parameters: []
    returns:
      - type: Instance
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:PromptCreateAssetAsync
    summary: |
      Allows in-experience asset creation for users by prompting a publish
      dialog.
    description: |
      Allows in-experience asset creation for users by prompting a publish
      dialog. When called, it presents a dialog to the user, allowing them to
      enter a name, description, and preview the asset. Upon submitting, it
      saves the asset to the user's inventory. Can only be invoked on the server
      side.
    code_samples: []
    parameters:
      - name: player
        type: Player
        default:
        summary: |
          The user who submits an asset creation.
      - name: instance
        type: Instance
        default:
        summary: |
          The asset to be created. Currently can't contain scripts or nest
          non-public assets.
      - name: assetType
        type: AssetType
        default:
        summary: |
          The asset type. Currently can only be `Enum.AssetType.Model`.
    returns:
      - type: Tuple
        summary: |
          The `Enum.PromptCreateAssetResult` and asset ID pair if successful.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:PromptImportAnimationClipFromVideoAsync
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: player
        type: Player
        default:
        summary: ''
      - name: progressCallback
        type: Function
        default:
        summary: ''
    returns:
      - type: Tuple
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:SavePlaceAsync
    summary: |
      Saves the state of the current place.
    description: |
      Saves the state of the current place. Only works for places that are
      created with `Class.AssetService:CreatePlaceAsync()` or which have the API
      enabled through place settings.
    code_samples:
    parameters: []
    returns:
      - type: void
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: AssetService:SearchAudio
    summary: |
      Finds audio assets matching a variety of search criteria.
    description: |
      Returns a `Class.AudioPages` object containing the result of the given
      search. Will not return fields with empty values.

      Note that this method has a low HTTP request limit and can throw an error,
      so it should always be wrapped in `pcall()` for error handling. Possible
      error messages include:

      <table>
        <thead>
          <tr>
            <th>Error Message</th>
            <th>Reason</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>HTTP 429 (Too Many Requests)</td>
            <td><code>Class.AssetService:SearchAudio()</code> has been called too many times.</td>
          </tr>
          <tr>
            <td>Unexpected type for data, expected array got void</td>
            <td>The keyword argument was filtered.</td>
          </tr>
        </tbody>
      </table>
    code_samples:
      - printing-search-audio-result-titles
    parameters:
      - name: searchParameters
        type: AudioSearchParams
        default:
        summary: ''
    returns:
      - type: AudioPages
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
events:
  - name: AssetService.AudioMetadataFailedResponse
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: requestid
        type: int64
        default:
        summary: ''
    tags: []
    deprecation_message: ''
    security: RobloxScriptSecurity
    thread_safety: Unsafe
  - name: AssetService.AudioMetadataRequest
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: requestid
        type: int64
        default:
        summary: ''
      - name: request
        type: Array
        default:
        summary: ''
    tags: []
    deprecation_message: ''
    security: RobloxScriptSecurity
    thread_safety: Unsafe
  - name: AssetService.AudioMetadataResponse
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: requestid
        type: int64
        default:
        summary: ''
      - name: response
        type: Array
        default:
        summary: ''
    tags: []
    deprecation_message: ''
    security: RobloxScriptSecurity
    thread_safety: Unsafe
callbacks: []
