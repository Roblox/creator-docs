name: Debris
type: class
category: Utility
memory_category: Instances
summary: |
  The Debris service allows the developer to schedule the removal of the object
  without yielding any code, through the usage of the `Class.Debris:AddItem()`
  method.
description: |
  The Debris service allows the developer to schedule the removal of the object
  without yielding any code, through the usage of the `Class.Debris:AddItem()`
  method.

  After the lifetime argument has elapsed (in seconds) the object is removed in
  the same manner as `Class.Instance:Destroy()`.

  As Debris is a service it must be created using the
  `Class.ServiceProvider:GetService()` method.

  **Why use Debris?**

  Beyond creating a bit of a mess, objects that are no longer required can use
  up system memory and cause the game to run slower over time. For this reason
  it is always advised to run the `Class.Instance:Destroy()` function on objects
  you no longer need. However in many cases an object may have a specific period
  of utility after which it needs to be destroyed.

  Take the example of projectile that has just been thrown. It could be cleaned
  up using:

  ```lua
  wait(3)
  projectile:Destroy()
  ```

  However there are a number of issues with this approach. Firstly, it requires
  yielding the code with a wait, which is not always desirable. Secondly, before
  the 3 seconds have elapsed the object may have already been destroyed (for
  example, if it reached `Class.Workspace.FallenPartsDestroyHeight`).

  ```lua
  delay(3, function()
  	if projectile and projectile.Parent then
  		projectile:Destroy()
  	end
  end)
  ```

  This solves the above issues, as it spawns a new thread to prevent the current
  one from yielding and checks to see if it can be destroyed. However at this
  point a simple command has already become quite complicated and an unnecessary
  thread is being created.

  This is where Debris comes in, and the following code addresses all of the
  above issues.

  ```lua
  Debris:AddItem(projectile, 3)
  ```

  Debris does not yield the current thread, does not require a new thread and
  will not error if the object is already destroyed. For this reason it is the
  recommended method for cleaning up objects with a fixed lifetime.
code_samples:
  - Debris-AddItem
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties:
  - name: Debris.MaxItems
    summary: |
      Historically the maximum number of items that can be assigned to the
      `Class.Debris` service at one time.
    description: |
      The maximum number of items that can be assigned to the Debris service at
      one time.

      If this number is exceeded, objects are automatically removed in order
      from oldest to newest until the amount is less than or equal to MaxItems.

      This property is currently restricted and will error if used.
    code_samples:
    type: int
    tags:
      - Deprecated
    deprecation_message: |
      This property is deprecated and should not be used in new work.
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
methods:
  - name: Debris:AddItem
    summary: |
      Allows the developer to schedule the removal of the object without
      yielding any code.
    description: |
      Allows the developer to schedule the removal of the object without
      yielding any code.

      Registers a given `Class.Instance` to the `Class.Debris` service for
      removal after the specified delay. The first argument is the object being
      removed, and the second argument is the amount of time in seconds the
      `Class.Debris` service will wait before removing the object. The delay
      argument is optional, if it is not specified, it defaults to 10 seconds.
      The delay argument is a number, so it accepts decimal points, such as
      '1.5', or '0.25'.

      #### Why use Debris?

      Beyond creating a bit of a mess, objects that are no longer required can
      use up system memory and cause the game to run slower over time. For this
      reason it is always advised to run the `Class.Instance:Destroy()` function
      on objects you no longer need. However in many cases an object may have a
      specific period of utility after which it needs to be destroyed.

      Take the example of projectile that has just been thrown. On first
      thought, it could be cleaned up using:

          wait(3)
          projectile:Destroy()

      However there are a number of issues with this approach. Firstly, it
      requires yielding the code with a wait, which is not always desirable.
      Secondly, before the 3 seconds have elapsed the object may have already
      been destroyed (for example, if it reached
      `Class.Workspace.FallenPartsDestroyHeight`). In this case, the code would
      error as it tries to destroy an item that has already been destroyed. One
      answer may be:

          delay(3, function()
          	if projectile and projectile.Parent then
          		projectile:Destroy()
          	end
          end)

      This solves the above issues, as it spawns a new thread to prevent the
      current one from yielding and checks to see if it can be destroyed.
      However at this point a simple command has already become quite
      complicated and an unnecessary thread is being created.

      This is where Debris comes in, and the following code addresses all of the
      above issues.

          Debris:AddItem(projectile, 3)

      Debris does not yield the current thread, does not require a new thread
      and will not error if the object is already destroyed. For this reason it
      is the recommended method for cleaning up objects with a fixed lifetime.
    code_samples:
      - Debris-AddItem
    parameters:
      - name: item
        type: Instance
        default:
        summary: |
          The `Class.Instance` to be added to `Class.Debris`.
      - name: lifetime
        type: double
        default: 10
        summary: |
          The number of seconds before the `Class.Instance` should be destroyed.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: Debris:addItem
    summary: ''
    description: ''
    code_samples:
    parameters:
      - name: item
        type: Instance
        default:
        summary: ''
      - name: lifetime
        type: double
        default: 10
        summary: ''
    returns:
      - type: void
        summary: ''
    tags:
      - Deprecated
    deprecation_message: |
      This function is a deprecated variant of `Class.Debris:AddItem()` which
      should be used instead.
    security: None
    thread_safety: Unsafe
events: []
callbacks: []
