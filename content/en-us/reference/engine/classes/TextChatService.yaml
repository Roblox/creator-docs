name: TextChatService
type: class
category:
memory_category: Instances
summary: |
  A service handling in-experience text chat.
description: |
  A service handling in-experience text chat, including managing channels,
  decorating messages, filtering text, creating commands, and developing custom
  chats interfaces.

  To learn more, see
  [In-Experience Text Chat](../../../chat/customizing-in-experience-text-chat.md).
code_samples:
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties:
  - name: TextChatService.ChatTranslationEnabled
    summary: ''
    description: ''
    code_samples: []
    type: bool
    tags:
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: RobloxScriptSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: false
      can_save: false
  - name: TextChatService.ChatVersion
    summary: |
      Determines whether to fully enable `Class.TextChatService` or revert to
      the legacy chat system.
    description: |
      Determines whether to fully enable `Class.TextChatService` or revert to
      the legacy chat system. Setting this property to
      `Enum.ChatVersion.LegacyChatService` effectively disables
      `Class.TextChatService`.
    code_samples: []
    type: ChatVersion
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: NotAccessibleSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
  - name: TextChatService.CreateDefaultCommands
    summary: |
      Determines whether `Class.TextChatService` should create default
      `Class.TextChatCommand|TextChatCommands`.
    description: |
      Determines whether `Class.TextChatService` should create default
      `Class.TextChatCommand|TextChatCommands`.

      If true, the following `Class.TextChatCommand|TextChatCommands` are
      created and put in a `Class.Folder` named **TextChatCommands** inside
      `Class.TextChatService`:

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Primary Alias</th>
            <th>Secondary Alias</th>
            <th>Description</th>
            <th>Usage Example</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><b>RBXConsoleCommand</b></td>
            <td>console</td>
            <td></td>
            <td>Opens the Developer Console.</td>
            <td><code>\console</code></td>
          </tr>
          <tr>
            <td><b>RBXEmoteCommand</b></td>
            <td>emote</td>
            <td>e</td>
            <td>Plays an avatar emote.</td>
            <td><code>\e dance</code></td>
          </tr>
          <tr>
            <td><b>RBXHelpCommand</b></td>
            <td>help</td>
            <td>?</td>
            <td>Shows a list of chat commands.</td>
            <td><code>\help</code></td>
          </tr>
          <tr>
            <td><b>RBXMuteCommand</b></td>
            <td>mute</td>
            <td>m</td>
            <td>Mutes a user by their <code>Class.Player.Name|Name</code> or <code>Class.Player.DisplayName|DisplayName</code> in all <code>Class.TextChannel|TextChannels</code>.</td>
            <td><code>\m Username</code></td>
          </tr>
          <tr>
            <td><b>RBXUnmuteCommand</b></td>
            <td>unmute</td>
            <td>um</td>
            <td>Unmutes a user by their <code>Class.Player.Name|Name</code> or <code>Class.Player.DisplayName|DisplayName</code> in all <code>Class.TextChannel|TextChannels</code>.</td>
            <td><code>\um Username</code></td>
          </tr>
          <tr>
            <td><b>RBXVersionCommand</b></td>
            <td>version</td>
            <td>v</td>
            <td>Shows the chat version.</td>
            <td><code>\version</code></td>
          </tr>
        </tbody>
      </table>

      Note that you can edit, create, and remove
      `Class.TextChatCommand|TextChatCommands` even if
      `Class.TextChatService:CreateDefaultCommands()|CreateDefaultCommands()` is
      true. Also note that mute and unmute commands apply to all
      `Class.TextChannel|TextChannels`.
    code_samples: []
    type: bool
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: PluginSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
  - name: TextChatService.CreateDefaultTextChannels
    summary: |
      Determines whether `Class.TextChatService` should create default
      `Class.TextChannel|TextChannels`.
    description: |
      Determines whether `Class.TextChatService` should create default
      `Class.TextChannel|TextChannels`.

      If true, `Class.Team`-based `Class.TextChannel|TextChannels` are
      automatically created (and removed when `Class.Team|Teams` are removed),
      along with the following `Class.TextChannel|TextChannels` in a
      `Class.Folder` named **TextChannels** inside `Class.TextChatService`:

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><b>RBXGeneral</b></td>
            <td>For all messages.</td>
          </tr>
          <tr>
            <td><b>RBXSystem</b></td>
            <td>For system messages.</td>
          </tr>
          <tr>
            <td><b>RBXTeam[BrickColor]</b></td>
            <td>For team messages. Name of the <code>Class.TextChannel</code> is the string <code>RBXTeam</code> followed by the name of <code>Class.Team.BrickColor</code>. For example, <code>RBXTeamCrimson</code> for a team with "Crimson" <code>Datatype.BrickColor</code>.</td>
          </tr>
        </tbody>
      </table>

      If false, `Class.Team`-based `Class.TextChannel|TextChannels` are **not**
      automatically created and destroyed.

      Note that you can edit, create, and remove
      `Class.TextChannel|TextChannels` even if
      `Class.TextChatService:CreateDefaultTextChannels()|CreateDefaultTextChannels()`
      is true.
    code_samples: []
    type: bool
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: PluginSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
methods:
  - name: TextChatService:DisplayBubble
    summary: |
      Displays a chat bubble above the provided part or player character.
    description: |
      Displays a chat bubble above the provided part or player character, and fires the
      `Class.TextChatService.BubbleDisplayed|BubbleDisplayed` event with the
      parameters specified in this method. Can display bubbles for non-player
      characters (NPCs) if you specify a part within the character, such as its head.
    code_samples: []
    parameters:
      - name: partOrCharacter
        type: Instance
        default:
        summary: |
          The part or character that the bubble to be displayed above.
      - name: message
        type: string
        default:
        summary: |
          The text to be displayed in the chat bubble.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: TextChatService:CanUserChatAsync
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: userId
        type: int64
        default:
        summary: ''
    returns:
      - type: bool
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: TextChatService:CanUsersChatAsync
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: userIdFrom
        type: int64
        default:
        summary: ''
      - name: userIdTo
        type: int64
        default:
        summary: ''
    returns:
      - type: bool
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
events:
  - name: TextChatService.BubbleDisplayed
    summary: |
      Fires when `Class.TextChatService:DisplayBubble()` is called.
    description: |
      Fires when `Class.TextChatService:DisplayBubble()` is called.
    code_samples: []
    parameters:
      - name: partOrCharacter
        type: Instance
        default:
        summary: ''
      - name: textChatMessage
        type: TextChatMessage
        default:
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: TextChatService.MessageReceived
    summary: |
      Fires exclusively on the client in two circumstances: when the client
      receives a `Class.TextChannel:SendAsync()` response from the server, or
      when `Class.TextChannel:DisplaySystemMessage()` is invoked on the client.
    description: |
      Fires exclusively on the client in two circumstances: when the client
      receives a `Class.TextChannel:SendAsync()` response from the server, or
      when `Class.TextChannel:DisplaySystemMessage()` is invoked on the client.

      Use the `Class.TextChatMessage` parameter to get the `Class.TextSource`
      and the text of the message (with `Class.TextChatMessage.Text`).

      The `Class.TextChatMessage` parameter is the final result of any functions
      bound to `Class.TextChatService.OnIncomingMessage` or
      `Class.TextChannel.OnIncomingMessage`.
    code_samples: []
    parameters:
      - name: textChatMessage
        type: TextChatMessage
        default:
        summary: |
          The received `Class.TextChatMessage`.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: TextChatService.SendingMessage
    summary: |
      Fires when `Class.TextChannel:SendAsync()` is called by the sending
      client.
    description: |
      Fires when `Class.TextChannel:SendAsync()` is called by the sending
      client. Use this to allow placeholder messages to be shown to the user
      while waiting for server response to `Class.TextChannel:SendAsync()`.
    code_samples: []
    parameters:
      - name: textChatMessage
        type: TextChatMessage
        default:
        summary: |
          The `Class.TextChatMessage` from the `Class.TextChannel:SendAsync()`
          call.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
callbacks:
  - name: TextChatService.OnBubbleAdded
    summary: |
      Called when a bubble chat is about to be displayed.
    description: |
      Called when a bubble chat is about to be displayed. This can only be
      implemented on the client.

      Use this to customize individual bubble chat messages. If this callback
      returns a `Class.BubbleChatMessageProperties`, those properties will be
      applied to the associated bubble, overriding
      `Class.BubbleChatConfiguration` properties. If a `Class.UICorner`,
      `Class.UIGradient`, or `Class.ImageLabel` is parented under
      `Class.BubbleChatMessageProperties`, they will also override their
      respective counterparts defined in `Class.BubbleChatConfiguration`.

      If the chat message is sent by a player, `message.TextSource` will
      correspond to that player, and `adornee` will be `nil`.

      If the chat message is sent via `Class.TextChatService:DisplayBubble`,
      `adornee` will be the `partOrCharacter` provided, and `message.TextSource`
      will be `nil`.
    code_samples: []
    parameters:
      - name: message
        type: TextChatMessage
        default:
        summary: |
          The incoming `Class.TextChatMessage`.
      - name: adornee
        type: Instance
        default:
        summary: |
          The part or character the bubble chat message is attached to.
    returns:
      - type: Tuple
        summary: |
          If a `Class.TextChatMessage` is returned, those properties will be
          applied to the associated bubble, overriding
          `Class.BubbleChatConfiguration` properties.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: TextChatService.OnIncomingMessage
    summary: |
      Called when `Class.TextChatService` is receiving an incoming message.
    description: |
      Called when `Class.TextChatService` is receiving an incoming message. This
      can only be implemented on the client.

      Use this to decorate `Class.TextChatMessage` instances. If this callback
      returns a `Class.TextChatMessageProperties`, those properties are merged
      with the `Class.TextChatMessage` parameter to create a new
      `Class.TextChatMessage` with those properties.

      When bound to the client sending a message, this callback can be called
      twice, first when the message is initially sent and received locally by
      the same client, and again when the result of the filtered message is
      received by that client from the server.

      Note that this `Class.TextChatService.OnIncomingMessage` callback runs
      **before** any `Class.TextChannel.OnIncomingMessage` callbacks.

      This should be defined only once in the source code. Multiple bindings
      will override one another in a non‑deterministic manner.
    code_samples: []
    parameters:
      - name: message
        type: TextChatMessage
        default:
        summary: |
          The incoming `Class.TextChatMessage`.
    returns:
      - type: Tuple
        summary: |
          If a `Class.TextChatMessageProperties` is returned, those properties
          are merged with the `Class.TextChatMessage` parameter to create a new
          `Class.TextChatMessage` with those properties, otherwise, if `nil` is
          returned, then `Class.TextChatMessage` is not changed.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
