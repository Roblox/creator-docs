name: EditableMesh
type: class
category:
memory_category: Instances
summary: |
  Instance which allows for the runtime creation and manipulation of meshes.
description: |
  `EditableMesh` changes the applied visual mesh when linked to a
  `Class.MeshPart`, allowing for querying and modification of the mesh both in
  Studio and in experience.

  An `EditableMesh` can be created from an existing `Datatype.Content` of a
  `Class.MeshPart` or a mesh ID using
  `Class.AssetService:CreateEditableMeshAsync()`, or a blank `EditableMesh` can
  be created with `Class.AssetService:CreateEditableMesh()`. It can then be
  displayed, modified, and its collision model updated. Not all of the steps are
  necessary; for example, you might want to create an `EditableMesh` just to
  raycast without ever displaying it.

  An `EditableMesh` is displayed when it's linked to a new `Class.MeshPart`,
  through `Class.AssetService:CreateMeshPartAsync()`. You can create more
  `Class.MeshPart` instances that reference the same `EditableMesh` content, or
  link to an existing `Class.MeshPart` through `Class.MeshPart:ApplyMesh()`.

  Calling `Class.AssetService:CreateMeshPartAsync()` will recalculate collision
  and fluid geometry with any edits and update the existing `Class.MeshPart`. It
  is generally recommended to do this at the end of a conceptual edit operation.
  `Class.MeshPart:ApplyMesh()` will update the colission and fluid geometry of
  the target `Class.MeshPart`.

  #### Stable Vertex/Face IDs

  Many `EditableMesh` methods take **vertex**, **normal**, **UV**, **color** and
  **face** IDs. These are represented as integers in Luau but they require some
  special handling. The main difference is that IDs are stable and they remain
  the same even if other parts of the mesh change. For example, if an
  `EditableMesh` has five vertices `{1, 2, 3, 4, 5}` and you remove vertex `4`,
  the new vertices will be `{1, 2, 3, 5}`.

  Note that the IDs are not guaranteed to be in order and there may be holes in
  the numbering, so when iterating through vertices or faces, you should iterate
  through the table returned by `Class.EditableMesh:GetVertices()|GetVertices()`
  or `Class.EditableMesh:GetFaces()|GetFaces()`.

  #### Split Vertex Attributes

  A **vertex** is a corner of a face, and topologically connects faces together.
  Vertices can have several attributes: position, normal, UV coordinate, color,
  and transparency.

  Sometimes it's useful for all faces that touch a vertex to use the same
  attribute values, but sometimes you'll want different faces to use different
  attribute values on the same vertex. For example, on a smooth sphere, each
  vertex will only have a single normal. In contrast, at the corner of a cube,
  the vertex will have 3 different normals (one for each adjacent face). You can
  also have seams in the UV coordinates or sharp changes in the vertex colors.

  When creating faces, every vertex will by default have one of each attribute:
  one normal, one UV coordinate, and one color/transparency. If you want to
  create a seam, you should create new attributes and set them on the face. For
  example, this code will create a sharp cube:

  ```lua
  local AssetService = game:GetService("AssetService")

  -- Given 4 vertex IDs, adds a new normal and 2 triangles, making a sharp quad
  local function addSharpQuad(eMesh, vid0, vid1, vid2, vid3)
  	local nid = eMesh:AddNormal()  -- This creates a normal ID which is automatically computed

  	local fid1 = eMesh:AddTriangle(vid0, vid1, vid2)
  	eMesh:SetFaceNormals(fid1, {nid, nid, nid})

  	local fid2 = eMesh:AddTriangle(vid0, vid2, vid3)
  	eMesh:SetFaceNormals(fid2, {nid, nid, nid})
  end

  -- Makes a cube with creased edges between the 6 sides
  local function makeSharpCube()
  	local eMesh = AssetService:CreateEditableMesh()

  	local v1 = eMesh:AddVertex(Vector3.new(0, 0, 0))
  	local v2 = eMesh:AddVertex(Vector3.new(1, 0, 0))
  	local v3 = eMesh:AddVertex(Vector3.new(0, 1, 0))
  	local v4 = eMesh:AddVertex(Vector3.new(1, 1, 0))
  	local v5 = eMesh:AddVertex(Vector3.new(0, 0, 1))
  	local v6 = eMesh:AddVertex(Vector3.new(1, 0, 1))
  	local v7 = eMesh:AddVertex(Vector3.new(0, 1, 1))
  	local v8 = eMesh:AddVertex(Vector3.new(1, 1, 1))

  	addSharpQuad(eMesh, v5, v6, v8, v7)  -- Front
  	addSharpQuad(eMesh, v1, v3, v4, v2)  -- Back
  	addSharpQuad(eMesh, v1, v5, v7, v3)  -- Left
  	addSharpQuad(eMesh, v2, v4, v8, v6)  -- Right
  	addSharpQuad(eMesh, v1, v2, v6, v5)  -- Bottom
  	addSharpQuad(eMesh, v3, v7, v8, v4)  -- Top

  	eMesh:RemoveUnused()
  	return eMesh
  end
  ```

  #### Winding

  Mesh faces have a front side and a back side. When drawing meshes, only the
  front of the faces are drawn by default, although you can change this by
  setting the mesh' `Class.MeshPart.DoubleSided|DoubleSided` property to `true`.

  The order of the vertices around the face determines whether you are looking
  at the front or the back. The front of the face is visible when the vertices
  go counterclockwise around it.

  <img src="../../../assets/engine-api/classes/EditableMesh/Winding.png" alt="Order of the vertices around the face" width="550" />

  #### Limitations

  `EditableMesh` currently has a limit of 60,000 vertices and 20,000 triangles.
  Attempting to add too many vertices or triangles will cause an error.
code_samples: []
inherits:
  - Object
tags:
  - NotCreatable
deprecation_message: ''
properties:
  - name: EditableMesh.FixedSize
    summary: ''
    description: ''
    code_samples: []
    type: bool
    tags:
      - ReadOnly
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: RobloxSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: false
      can_save: true
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh.SkinningEnabled
    summary: ''
    description: ''
    code_samples: []
    type: bool
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
methods:
  - name: EditableMesh:AddColor
    summary: |
      Adds a new color to the geometry and returns a stable color ID.
    description: |
      Adds a new color to the geometry and returns a stable color ID.
    code_samples: []
    parameters:
      - name: color
        type: Color3
        default:
        summary: |
          The new color.
      - name: alpha
        type: float
        default:
        summary: |
          The color alpha (transparency).
    returns:
      - type: int64
        summary: |
          Stable color ID of the new color.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:AddNormal
    summary: |
      Adds a new normal to the geometry and returns a stable normal ID.
    description: |
      Adds a new normal to the geometry and returns a stable normal ID. If the
      normal value isn't specified, the normal will be automatically calculated.
    code_samples: []
    parameters:
      - name: normal
        type: Vector3?
        default:
        summary: |
          The normal vector. If the normal value isn't specified, the normal
          will be automatically calculated.
    returns:
      - type: int64
        summary: |
          Stable normal ID of the new normal.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:AddTriangle
    summary: |
      Adds a new triangle to the mesh and returns a stable face ID.
    description: |
      Adds a new triangle to the mesh and returns a stable face ID.
    code_samples: []
    parameters:
      - name: vertexId0
        type: int64
        default:
        summary: |
          ID of the first vertex of the triangle.
      - name: vertexId1
        type: int64
        default:
        summary: |
          ID of the second vertex of the triangle.
      - name: vertexId2
        type: int64
        default:
        summary: |
          ID of the third vertex of the triangle.
    returns:
      - type: int64
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:AddUV
    summary: |
      Adds a new UV to the geometry and returns a stable UV ID.
    description: |
      Adds a new UV to the geometry and returns a stable UV ID.
    code_samples: []
    parameters:
      - name: uv
        type: Vector2
        default:
        summary: |
          The new UV coordinate.
    returns:
      - type: int64
        summary: |
          Stable UV ID of the new UV.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:AddVertex
    summary: |
      Adds a new vertex to the geometry and returns a stable vertex ID.
    description: |
      Adds a new vertex to the geometry and returns a stable vertex ID.
    code_samples: []
    parameters:
      - name: p
        type: Vector3
        default:
        summary: |
          Position in the mesh's local object space.
    returns:
      - type: int64
        summary: |
          Stable vertex ID of the new vertex.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:Destroy
    summary: ''
    description: ''
    code_samples: []
    parameters: []
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:FindClosestPointOnSurface
    summary: |
      Finds the closest point on the mesh's surface.
    description: |
      Finds the closest point on the mesh's surface. Returns the face ID, point
      on the mesh in local object space, and the barycentric coordinate of the
      position within the face. See
      `Class.EditableMesh:RaycastLocal()|RaycastLocal()` for more information on
      barycentric coordinates.
    code_samples: []
    parameters:
      - name: point
        type: Vector3
        default:
        summary: |
          Point position in the mesh's local object space.
    returns:
      - type: Tuple
        summary: |
          Tuple of the face ID, point on the mesh in local object space, and the
          barycentric coordinate of the position within the face.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:FindClosestVertex
    summary: |
      Finds the closest vertex to a specific point in space.
    description: |
      Finds the closest vertex to a specific point in space and returns a stable
      vertex ID.
    code_samples: []
    parameters:
      - name: toThisPoint
        type: Vector3
        default:
        summary: |
          Point position in the mesh's local object space.
    returns:
      - type: int64
        summary: |
          Closest stable vertex ID to the specified point in space.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:FindVerticesWithinSphere
    summary: |
      Finds all vertices within a specific sphere.
    description: |
      Finds all vertices within a specific sphere and returns a list of stable
      vertex IDs.
    code_samples: []
    parameters:
      - name: center
        type: Vector3
        default:
        summary: |
          Center of the sphere in the mesh's local object space.
      - name: radius
        type: float
        default:
        summary: |
          Radius of the sphere.
    returns:
      - type: Array
        summary: |
          List of stable vertex IDs within the requested sphere.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetAdjacentFaces
    summary: |
      Returns a list of faces adjacent to a given face.
    description: |
      Given a stable face ID, returns a list of adjacent faces.

      <img src="../../../assets/engine-api/classes/EditableMesh/GetAdjacentTriangles.png" alt="Adjacent faces indicated around requested face" width="120" />
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: ''
    returns:
      - type: Array
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetAdjacentVertices
    summary: |
      Returns a list of vertices adjacent to a given vertex.
    description: |
      Given a stable vertex ID, returns a list of adjacent vertices.

      <img src="../../../assets/engine-api/classes/EditableMesh/GetAdjacentVertices.png" alt="Adjacent vertices indicated around requested vertex" width="120" />
    code_samples: []
    parameters:
      - name: vertexId
        type: int64
        default:
        summary: |
          Vertex ID around which to get adjacent vertices.
    returns:
      - type: Array
        summary: |
          List of IDs of adjacent vertices around the given vertex ID.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetColor
    summary: |
      Returns the color for the given color ID.
    description: |
      Returns the color for the given color ID.
    code_samples: []
    parameters:
      - name: colorId
        type: int64
        default:
        summary: |
          Color ID for which to get the color.
    returns:
      - type: Color3?
        summary: |
          Color for the requested stable color ID.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetColorAlpha
    summary: |
      Returns the color alpha (transparency) at the given color ID.
    description: |
      Returns the color alpha (transparency) at the given stable color ID.
    code_samples: []
    parameters:
      - name: colorId
        type: int64
        default:
        summary: |
          Color ID for which to get the alpha.
    returns:
      - type: float?
        summary: |
          Color alpha at the request stable color ID.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetColors
    summary: |
      Returns all colors of the mesh.
    description: |
      Returns all colors of the mesh as a list of stable color IDs.
    code_samples: []
    parameters: []
    returns:
      - type: Array
        summary: |
          List of stable color IDs.
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetFaceColors
    summary: |
      Returns the face's color IDs for the vertices on the face.
    description: |
      Returns the face's color IDs for the vertices on the face.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: |
          Face ID for which to get the color IDs.
    returns:
      - type: Array
        summary: |
          List of color IDs used for the vertices on the given face.
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetFaceNormals
    summary: |
      Returns the face's normal IDs for the vertices on the face.
    description: |
      Returns the face's normal IDs for the vertices on the face.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: |
          Face ID for which to get the normal IDs.
    returns:
      - type: Array
        summary: |
          List of normal IDs used for the vertices on the given face.
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetFaceUVs
    summary: |
      Returns the face's UV IDs for the vertices on the face.
    description: |
      Returns the face's UV IDs for the vertices on the face.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: |
          Face ID for which to get the UV IDs.
    returns:
      - type: Array
        summary: |
          List of UV IDs used for the vertices on the given face.
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetFaceVertices
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: ''
    returns:
      - type: Array
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetFaces
    summary: |
      Returns all faces of the mesh.
    description: |
      Returns all faces of the mesh as a list of stable face IDs.
    code_samples: []
    parameters: []
    returns:
      - type: Array
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetFacesWithAttribute
    summary: |
      Returns a list of faces that use a given attribute ID.
    description: |
      Returns a list of faces that use a given vertex ID, normal ID, UV ID, or
      color ID.
    code_samples: []
    parameters:
      - name: id
        type: int64
        default:
        summary: |
          Attribute ID for which to find faces that use it.
    returns:
      - type: Array
        summary: |
          List of face IDs which use the given attribute ID.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetNormal
    summary: |
      Returns the normal vector for the given normal ID.
    description: |
      Returns the normal vector for the given normal ID.
    code_samples: []
    parameters:
      - name: normalId
        type: int64
        default:
        summary: |
          Normal ID for which to get the normal vector.
    returns:
      - type: Vector3?
        summary: |
          Normal vector at the requested normal ID.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetNormals
    summary: |
      Returns all normals of the mesh.
    description: |
      Returns all normals of the mesh as a list of stable normal IDs.
    code_samples: []
    parameters: []
    returns:
      - type: Array
        summary: |
          List of stable normal IDs.
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetPosition
    summary: |
      Gets the position of a vertex.
    description: |
      Gets the position of a vertex in the mesh's local object space.
    code_samples: []
    parameters:
      - name: vertexId
        type: int64
        default:
        summary: |
          Stable vertex ID for which to get the position.
    returns:
      - type: Vector3
        summary: |
          Position of a vertex in the mesh's local object space.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetUV
    summary: |
      Returns UV coordinates at the given UV ID.
    description: |
      Returns UV coordinates at the given UV ID.
    code_samples: []
    parameters:
      - name: uvId
        type: int64
        default:
        summary: |
          UV ID for which to get the UV coordinate.
    returns:
      - type: Vector2?
        summary: |
          UV coordinates at the requested UV ID.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetUVs
    summary: |
      Returns all UVs of the mesh.
    description: |
      Returns all UVs of the mesh as a list of stable UV IDs.
    code_samples: []
    parameters: []
    returns:
      - type: Array
        summary: |
          List of stable UV IDs.
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetVertices
    summary: |
      Returns all vertices as a list of stable vertex IDs.
    description: |
      Returns all vertices as a list of stable vertex IDs.
    code_samples: []
    parameters: []
    returns:
      - type: Array
        summary: |
          List of stable vertex IDs.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:GetVerticesWithAttribute
    summary: |
      Returns a list of vertices that use a given attribute ID.
    description: |
      Returns a list of vertices that use a given face ID, normal ID, UV ID, or
      color ID.
    code_samples: []
    parameters:
      - name: id
        type: int64
        default:
        summary: |
          Attribute ID for which to find vertices that use it.
    returns:
      - type: Array
        summary: |
          List of vertex IDs which use the given attribute ID.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:IdDebugString
    summary: |
      Returns a string describing a stable ID, useful for debugging purposes.
    description: |
      Returns a string describing a stable ID, useful for debugging purposes,
      like `f17` or `v12`, containing the type, ID number, and version.
    code_samples: []
    parameters:
      - name: id
        type: int64
        default:
        summary: |
          ID for which to return a debugging information string.
    returns:
      - type: string
        summary: |
          String that describes the ID in human-readable format.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:MergeVertices
    summary: |
      Merges vertices that touch together.
    description: |
      Merges vertices that touch together, to use a single vertex ID but keep
      the other original attribute IDs.
    code_samples: []
    parameters:
      - name: mergeTolerance
        type: float
        default:
        summary: |
          The distance at which the vertices are considered to touch each other.
    returns:
      - type: Map
        summary: |
          A mapping of old vertex ID to new vertex ID for vertices that have
          been merged.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:RaycastLocal
    summary: ''
    description: |
      Casts a ray and returns a point of intersection, face ID, and barycentric
      coordinates. The inputs and outputs of this method are in the mesh's local
      object space.

      A **barycentric coordinate** is a way of specifying a point within a face
      as a weighted combination of the 3 vertices of the face. This is useful as
      a general way of blending vertex attributes. See this method's code sample
      as an illustration.
    code_samples:
      - EditableMesh-RaycastLocal
    parameters:
      - name: origin
        type: Vector3
        default:
        summary: |
          Origin of the ray in the mesh's local object space.
      - name: direction
        type: Vector3
        default:
        summary: |
          Direction of the ray.
    returns:
      - type: Tuple
        summary: |
          Tuple of the point of intersection, face ID, and barycentric
          coordinates.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:RemoveFace
    summary: |
      Removes a face using its stable face ID.
    description: |
      Removes a face using its stable face ID.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:RemoveUnused
    summary: |
      Removes all unused vertices, normals, UVs, and colors, and returns the
      removed IDs.
    description: |
      Removes all vertices, normals, UVs, and colors which are not used in any
      face, and returns the removed IDs.
    code_samples: []
    parameters: []
    returns:
      - type: Array
        summary: |
          All of the removed stable IDs.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:ResetNormal
    summary: |
      Reset this normal ID to be automatically calculated.
    description: |
      Reset this normal ID to be automatically calculated based on the shape of
      the mesh, instead of manually set.
    code_samples: []
    parameters:
      - name: normalId
        type: int64
        default:
        summary: |
          Stable normal ID to reset.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetColor
    summary: |
      Sets the color for a color ID.
    description: |
      Sets the color for a color ID.
    code_samples: []
    parameters:
      - name: colorId
        type: int64
        default:
        summary: |
          Stable color ID for which to set the color.
      - name: color
        type: Color3
        default:
        summary: |
          Color to set.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetColorAlpha
    summary: |
      Sets the color alpha (transparency) for a color ID.
    description: |
      Sets the color alpha (transparency) for a color ID.
    code_samples: []
    parameters:
      - name: colorId
        type: int64
        default:
        summary: |
          Stable color ID for which to set the color alpha.
      - name: alpha
        type: float
        default:
        summary: |
          Alpha to set.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetFaceColors
    summary: |
      Sets the face's vertex colors to new color IDs.
    description: |
      Sets the face's vertex colors to new color IDs.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: |
          Face ID for which to update the vertex colors.
      - name: ids
        type: Array
        default:
        summary: |
          List of new stable color IDs to use for the given face's vertices.
    returns:
      - type: void
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetFaceNormals
    summary: |
      Sets the face's vertex normals to new normal IDs.
    description: |
      Sets the face's vertex normals to new normal IDs.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: |
          Face ID for which to update the vertex normals.
      - name: ids
        type: Array
        default:
        summary: |
          List of new stable normal IDs to use for the given face's vertices.
    returns:
      - type: void
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetFaceUVs
    summary: |
      Sets the face's vertex UVs to new UV IDs.
    description: |
      Sets the face's vertex UVs to new UV IDs.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: |
          Face ID for which to update the vertex UVs.
      - name: ids
        type: Array
        default:
        summary: |
          List of new stable UV IDs to use for the given face's vertices.
    returns:
      - type: void
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetFaceVertices
    summary: |
      Sets the face's vertices to new vertex IDs.
    description: |
      Sets the face's vertices to new vertex IDs.
    code_samples: []
    parameters:
      - name: faceId
        type: int64
        default:
        summary: |
          Face ID for which to update the vertices.
      - name: ids
        type: Array
        default:
        summary: |
          List of new stable vertex IDs to use for the given face.
    returns:
      - type: void
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetNormal
    summary: |
      Set the normal for a normal ID.
    description: |
      Set the normal for a normal ID. This will change the normal value for
      every face vertex which is using the normal ID.
    code_samples: []
    parameters:
      - name: normalId
        type: int64
        default:
        summary: |
          Stable normal ID for which to set the normal vector.
      - name: normal
        type: Vector3
        default:
        summary: |
          Normal vector to set.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetPosition
    summary: |
      Sets a vertex position in the mesh's local object space.
    description: |
      Sets a vertex position in the mesh's local object space.
    code_samples: []
    parameters:
      - name: vertexId
        type: int64
        default:
        summary: |
          Stable vertex ID of the vertex to position.
      - name: p
        type: Vector3
        default:
        summary: |
          Position in the mesh's local object space.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:SetUV
    summary: |
      Sets UV coordinates for a UV ID.
    description: |
      Sets UV coordinates for a UV ID.
    code_samples: []
    parameters:
      - name: uvId
        type: int64
        default:
        summary: |
          UV ID for which to set the UV coordinates.
      - name: uv
        type: Vector2
        default:
        summary: |
          UV coordinates.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: EditableMesh:Triangulate
    summary: |
      Splits all faces on the mesh to be triangles.
    description: |
      Splits all faces on the mesh to be triangles. Currently this does nothing
      since only triangles can be created, but if your code relies on triangles,
      it's recommended that you call this method after calling
      `Class.AssetService:CreateEditableMeshAsync()`.
    code_samples: []
    parameters: []
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events: []
callbacks: []
