name: InputAction
type: class
memory_category: Instances
summary: |
  Defines a gameplay action mechanic. These actions are then mapped to hardware
  inputs using `Class.InputBinding`.
description: |
  `InputAction` defines a gameplay action mechanic such as "Jump," "Sprint," or
  "Shoot." These actions are then mapped to hardware inputs using
  `Class.InputBinding`. An `InputAction` will check for its first ancestor type
  of `Class.InputContext` and register itself to that context (if there is no
  ancestor context, it will be registered to a default context).
code_samples: []
inherits:
  - Instance
tags:
  - NotBrowsable
deprecation_message: ''
properties:
  - name: InputAction.BoolState
    summary: ''
    description: ''
    code_samples: []
    type: boolean
    tags:
      - ReadOnly
      - NotReplicated
      - NotScriptable
    deprecation_message: ''
    security:
      read: RobloxScriptSecurity
      write: RobloxScriptSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: false
      can_save: false
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction.Direction1DState
    summary: |
      Non-scriptable read-only property useful for debugging
      `Enum.InputActionType|Direction1D` input actions.
    description: |
      A non-scriptable read-only property only visible in Studio, primarily
      useful for debugging while testing an `InputAction` with
      `Class.InputAction.Type|Type` of `Enum.InputActionType|Direction1D`.
    code_samples: []
    type: float
    tags:
      - ReadOnly
      - NotReplicated
      - NotScriptable
    deprecation_message: ''
    security:
      read: RobloxScriptSecurity
      write: RobloxScriptSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: false
      can_save: false
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction.Direction2DState
    summary: |
      Non-scriptable read-only property useful for debugging
      `Enum.InputActionType|Direction2D` input actions.
    description: |
      A non-scriptable read-only property only visible in Studio, primarily
      useful for debugging while testing an `InputAction` with
      `Class.InputAction.Type|Type` of `Enum.InputActionType|Direction2D`.
    code_samples: []
    type: Vector2
    tags:
      - ReadOnly
      - NotReplicated
      - NotScriptable
    deprecation_message: ''
    security:
      read: RobloxScriptSecurity
      write: RobloxScriptSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: false
      can_save: false
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction.Direction3DState
    summary: |
      Non-scriptable read-only property useful for debugging
      `Enum.InputActionType|Direction3D` input actions.
    description: |
      A non-scriptable read-only property only visible in Studio, primarily
      useful for debugging while testing an `InputAction` with
      `Class.InputAction.Type|Type` of `Enum.InputActionType|Direction3D`.
    code_samples: []
    type: Vector3
    tags:
      - ReadOnly
      - NotReplicated
      - NotScriptable
    deprecation_message: ''
    security:
      read: RobloxScriptSecurity
      write: RobloxScriptSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: false
      can_save: false
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction.Enabled
    summary: |
      Determines if the `InputAction` is enabled or not.
    description: |
      Determines if the `InputAction` is enabled or not. The action state will
      be reset if this property is toggled to `false`.
    code_samples: []
    type: boolean
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Behavior
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction.Type
    summary: |
      Specifies what type of input value the action is expecting.
    description: |
      Specifies what type of input value the action is expecting. See
      `Enum.InputActionType` for more details.
    code_samples: []
    type: InputActionType
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Behavior
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Input
    writeCapabilities: []
methods:
  - name: InputAction:Fire
    summary: |
      Updates the `InputAction` to the given state and fires the appropriate
      signals.
    description: |
      Updates the `InputAction` to the given state and fires the appropriate
      signals. This method is most useful for scriptâ€‘triggered "input" where the
      passed `state` should trigger events like
      `Class.InputAction.Pressed|Pressed` or
      `Class.InputAction.StateChanged|StateChanged` regardless of whether the
      player triggered that state through normal inputs.

      This method will only accept a `state` parameter that matches the
      `Class.InputAction.Type|Type` and attempting to call it with a mismatched
      type will cause an error, for example passing a state of `0.5` when the
      `Class.InputAction.Type|Type` is `Enum.InputActionType|Bool`.

      Note that this method follows the conditions of
      `Class.InputAction.Pressed|Pressed`,
      `Class.InputAction.Released|Released`, and
      `Class.InputAction.StateChanged|StateChanged`. For example, if you make
      multiple consecutive calls to `Fire()` with a state of `true`,
      `Class.InputAction.StateChanged|StateChanged` will only fire on the first
      state change and the subsequent calls to `Fire()` will do nothing.
    code_samples: []
    parameters:
      - name: state
        type: Variant
        default: ''
        summary: ''
    returns:
      - type: ()
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction:GetState
    summary: |
      Returns the current state of the `Class.InputAction`.
    description: |
      Returns the current state of the `Class.InputAction`, for example `true`
      for an action with `Class.InputAction.Type|Type` set to
      `Enum.InputActionType|Bool`.
    code_samples: []
    parameters: []
    returns:
      - type: Variant
        summary: |
          The current state of `Class.InputAction`.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities:
      - Input
    writeCapabilities: []
events:
  - name: InputAction.Pressed
    summary: |
      Fires only when the `Class.InputAction.Type` is set to
      `Enum.InputActionType|Bool` on a state transition from `false` to `true`.
    description: |
      This event fires only when the `Class.InputAction.Type|Type` is set to
      `Enum.InputActionType|Bool`, and only when the state transitions from
      `false` to `true`.
    code_samples: []
    parameters: []
    tags: []
    deprecation_message: ''
    security: None
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction.Released
    summary: |
      Fires only when the `Class.InputAction.Type` is set to
      `Enum.InputActionType|Bool` on a state transition from `true` to `false`.
    description: |
      This event fires only when the `Class.InputAction.Type|Type` is set to
      `Enum.InputActionType|Bool`, and only when the state transitions from
      `true` to `false`.
    code_samples: []
    parameters: []
    tags: []
    deprecation_message: ''
    security: None
    capabilities:
      - Input
    writeCapabilities: []
  - name: InputAction.StateChanged
    summary: |
      Fires for all `Enum.InputActionType` types whenever the state changes,
      except if the state attempts to transition to the same state.
    description: |
      This event fires for all `Enum.InputActionType` types whenever the state
      changes, except if the state attempts to transition to the same state.
    code_samples: []
    parameters:
      - name: value
        type: Variant
        default: ''
        summary: |
          The new state of the `Class.InputAction`.
    tags: []
    deprecation_message: ''
    security: None
    capabilities:
      - Input
    writeCapabilities: []
callbacks: []
