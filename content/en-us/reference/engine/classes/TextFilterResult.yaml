name: TextFilterResult
type: class
category: Social
memory_category: Instances
summary: ''
description: |
  Represents the result of a call to `Class.TextService:FilterStringAsync()`.
  Used to distribute a filtered string accordingly.
code_samples:
inherits:
  - Instance
tags:
  - NotCreatable
  - NotReplicated
deprecation_message: ''
properties: []
methods:
  - name: TextFilterResult:GetChatForUserAsync
    summary: |
      Returns the text in a properly filtered manner for the specified
      `Class.Player.UserId`.
    description: |
      The GetChatForUserAsync function returns the text in a properly filtered
      manner for the specified `Class.Player.UserId`. This should be used in the
      context of chats between players, although there are some other cases
      where text filtering is required.

      This function returns the string appropriate for sending and displaying to
      a target user (specified by _toUserId_) from the original sender using the
      least restrictive filtering appropriate for the target user, with
      `Class.Chat` privacy settings of both users enforced. This string should
      only be shown to the target user, as it might not be appropriate for all
      users.

      This method throws an error if the two users are not allowed to chat (that
      is, if `Class.Chat:CanUserChatAsync()` would return false for the given
      sender and receiver). If this method throws the string should not be
      displayed to the user. In addition, this function will throw an error if
      CanUserChatAsync would return false, so CanUserChatAsync should be called
      first to check.

      This function currently throws an error if the user with the id _toUserId_
      is not online on the current server.

      If text can be used for real-time or near real-time communication it
      should use this method.

      This function will return immediately in most cases. The only time it will
      yield is if the target user is offline or has just joined the server and
      their filtering info is not yet loaded.
    code_samples:
      - TextFilterResult-GetChatForUserAsync-script
      - TextFilterResult-GetChatForUserAsync-localscript
    parameters:
      - name: toUserId
        type: int64
        default:
        summary: |
          Id of the user being chatted.
    returns:
      - type: string
        summary: |
          Filtered text string.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: TextFilterResult:GetNonChatStringForBroadcastAsync
    summary: |
      Returns the text in a properly filtered manner for all users.
    description: |
      Returns the text in a properly filtered manner for all users.
    code_samples:
    parameters: []
    returns:
      - type: string
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: TextFilterResult:GetNonChatStringForUserAsync
    summary: |
      Returns the text in a properly filtered manner for the specified
      `Class.Player.UserId`. This should be used in the context of non-chat text
      that another user can see, such as the name of a pet.
    description: |
      Returns the text in a properly filtered manner for the specified
      `Class.Player.UserId`. This should be used in the context of non-chat text
      that another user can see, such as the name of a pet.
    code_samples:
    parameters:
      - name: toUserId
        type: int64
        default:
        summary: ''
    returns:
      - type: string
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
events: []
callbacks: []
