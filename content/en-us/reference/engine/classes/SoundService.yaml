name: SoundService
type: class
category: Sounds
memory_category: Instances
summary: |
  A service that determines various aspects of how `Class.Sound|Sounds` play in
  the experience.
description: |
  A service that determines various aspects of how `Class.Sound|Sounds` play in
  the experience. `Class.SoundService` is also often used to store
  `Class.SoundGroup|SoundGroups`, although this is not mandatory for groups to
  work.

  `Class.SoundService` properties such as
  `Class.SoundService.AmbientReverb|AmbientReverb`,
  `Class.SoundService.DistanceFactor|DistanceFactor`,
  `Class.SoundService.DopplerScale|DopplerScale` and
  `Class.SoundService.RolloffScale|RolloffScale` can be used to change how all
  `Class.Sound|Sounds` play in the experience, and the
  `Class.SoundService:SetListener()|SetListener()` function allows you to set
  the position from where sounds are heard.
code_samples:
  - SoundService-Reverb-System
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties:
  - name: SoundService.AmbientReverb
    summary: |
      The ambient sound environment preset used by `Class.SoundService`.
    description: |
      Each `Enum.ReverbType` option for this property corresponds to a preset
      available in the FMOD sound engine. For example, when
      `Class.SoundService.AmbientReverb|AmbientReverb` is set to
      `Enum.ReverbType.Hangar`, sound will reverberate differently to simulate
      being in a large enclosed space.

      Changing `Class.SoundService.AmbientReverb|AmbientReverb` affects the
      following properties used by Roblox's sound engine.

      - Reverberation decay time.
      - Initial reflection delay time.
      - Late reverberation delay time relative to initial reflection.
      - Reference high frequency.
      - High-frequency to mid-frequency decay time ratio.
      - Value that controls the echo density in the late reverberation decay.
      - Value that controls the modal density in the late reverberation decay.
      - Reference low frequency.
      - Relative room effect level at low frequencies.
      - Relative room effect level at high frequencies.
      - Early reflections level relative to room effect.
      - Room effect level at mid frequencies.
    code_samples:
    type: ReverbType
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
  - name: SoundService.DefaultListenerLocation
    summary: ''
    description: ''
    code_samples: []
    type: ListenerLocation
    tags: []
    deprecation_message: ''
    security:
      read: PluginSecurity
      write: PluginSecurity
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
  - name: SoundService.DistanceFactor
    summary: |
      The number of studs to be considered a meter by `Class.SoundService` when
      calculating volume attenuation of `Class.Sound|Sounds` parented to a `Class.BasePart` or `Class.Attachment`.
    description: |
      The number of studs to be considered a meter by `Class.SoundService` when
      calculating volume attenuation of `Class.Sound|Sounds` parented to a `Class.BasePart` or `Class.Attachment`.

      By default, this property is `3.33`, meaning that a meter is considered
      3.33 studs for the purposes of volume attenuation. The greater the
      `Class.SoundService.DistanceFactor|DistanceFactor`, the more gradually
      sound will attenuate.

      It's recommended that you only change this property if your experience
      uses a different scale. For example, when using larger custom characters,
      you may want to reduce `Class.SoundService.DistanceFactor|DistanceFactor`.
    code_samples:
    type: float
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
  - name: SoundService.DopplerScale
    summary: |
      Degree to which the pitch of a `Class.Sound` varies due to the Doppler effect.
    description: |
      This property determines the degree to which the pitch of a `Class.Sound`
      varies due to the Doppler effect, a phenomenon whereby the pitch of a
      sound changes as the source and observer of the sound move further away or
      closer together. Only affects `Class.Sound|Sounds` that are parented to a
      `Class.BasePart` or `Class.Attachment`.

      Increasing this value exaggerates the impact of the Doppler effect,
      whereas decreasing it minimizes it. By default, the value of this property
      is `1`.
    code_samples:
    type: float
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
  - name: SoundService.RespectFilteringEnabled
    summary: |
      Sets whether `Class.Sound` playback from a client will replicate to the
      server.
    description: |
      This property determines whether `Class.Sound` playback is replicated from
      the client to the server, and therefore from the server. In other words,
      when a `Class.LocalScript` calls `Class.Sound:Play()|Play()` and this
      property is `true`, the sound will only play on the respective client. If
      this property is `false`, other clients will also hear the sound.

      Default is `true`, meaning filtering is enabled.
    code_samples:
    type: bool
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
  - name: SoundService.RolloffScale
    summary: |
      Sets how fast `Class.Sound` volume attenuates.
    description: |
      Sets how fast `Class.Sound` volume attenuates. The higher the
      `Class.SoundService.RolloffScale|RolloffScale`, the more rapidly a sound's
      volume will attenuate as the distance between the listener and the sound
      increases.

      Note that this property only applies to `Class.Sound|Sounds` whose
      `Class.Sound.RollOffMode|RollOffMode` property is set to
      `Enum.RollOffMode.Inverse|Inverse` (default) or
      `Enum.RollOffMode.InverseTapered|InverseTapered`.
      `Enum.RollOffMode.Linear|Linear` and
      `Enum.RollOffMode.LinearSquare|LinearSquare` modes use a different
      attenuation model which is not influenced by this property. This property
      also has no impact on `Class.Sound|Sounds` which are not parented to a
      `Class.BasePart` or `Class.Attachment`.
    code_samples:
    type: float
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
  - name: SoundService.VolumetricAudio
    summary: ''
    description: ''
    code_samples: []
    type: VolumetricAudio
    tags:
      - NotScriptable
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
    capabilities: []
    writeCapabilities: []
methods:
  - name: SoundService:GetListener
    summary: |
      Returns the current `Class.SoundService` listener type and what is set as
      the listener.
    description: |
      This method returns the `Class.SoundService` current listener type and
      what is set as the listener, meaning the point from which audio in the
      experience is "heard" by the player. By default, the listener is set to `Class.Workspace.CurrentCamera`. The listener can be changed using
      `Class.SoundService:SetListener()|SetListener()`.

      The first result returned is the listener's `Enum.ListenerType` and the
      second result is dependent on that type:

      <table>
          <thead>
              <tr>
                  <th>Listener Type</th>
                  <th>Description</th>
              </tr>
          </thead>
          <tbody>
              <tr>
                  <td><code>Enum.ListenerType.Camera</code></td>
                  <td>Does not return a listener object as <code>Class.Workspace.CurrentCamera|CurrentCamera</code> is always used.</td>
              </tr>
              <tr>
                  <td><code>Enum.ListenerType.CFrame</code></td>
                  <td>Returns the <code>Datatype.CFrame</code> used in <code>Class.SoundService:SetListener()|SetListener()</code>.</td>
              </tr>
              <tr>
                  <td><code>Enum.ListenerType.ObjectPosition</code></td>
                  <td>Returns the <code>Class.BasePart</code> used in <code>Class.SoundService:SetListener()|SetListener()</code>.</td>
              </tr>
              <tr>
                  <td><code>Enum.ListenerType.ObjectCFrame</code></td>
                  <td>Returns the <code>Class.BasePart</code> used in <code>Class.SoundService:SetListener()|SetListener()</code>.</td>
              </tr>
          </tbody>
      </table>

      
    code_samples:
    parameters: []
    returns:
      - type: Tuple
        summary: |
          The current `Enum.ListenerType` and what the listener has been set to.
          Listener can be a `Class.BasePart`, a `Datatype.CFrame`, or `nil`.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: SoundService:OpenAttenuationCurveEditor
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: selectedCurveObjects
        type: Instances
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: PluginSecurity
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: SoundService:OpenDirectionalCurveEditor
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: selectedCurveObjects
        type: Instances
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: PluginSecurity
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: SoundService:PlayLocalSound
    summary: |
      Plays a `Class.Sound` locally, meaning the sound will only be heard by the
      client calling this method, regardless of where it's parented to.
    description: |
      Plays a `Class.Sound` locally, meaning the sound will only be heard by the
      client calling this method, regardless of where it's parented to. This
      method is most useful for playing a `Class.Sound` locally in the Studio
      client, for instance in a `Class.Script` for a `Class.Plugin`.
    code_samples:
    parameters:
      - name: sound
        type: Instance
        default:
        summary: |
          The `Class.Sound` to be played.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: SoundService:SetListener
    summary: |
      Sets the listener for the `Class.SoundService`.
    description: |
      Sets the listener used by the client, meaning the point from which audio
      in the experience is "heard" by the player. For `Class.Sound|Sounds`
      parented to a `Class.BasePart` or `Class.Attachment`, the listener
      influences the volume and left/right balance of a playing sound.

      By default, the listener is set to `Class.Workspace.CurrentCamera`, but a
      range of different types of listeners can be used.
      
      The listener can be retrieved using
      `Class.SoundService:GetListener()|GetListener()`.
    code_samples:
    parameters:
      - name: listenerType
        type: ListenerType
        default:
        summary: |
          The `Enum.ListenerType` of the listener.
      - name: listener
        type: Tuple
        default:
        summary: |
          Dependent on the `Enum.ListenerType`. Use a `Class.BasePart` for
          `Enum.ListenerType.ObjectPosition` or
          `Enum.ListenerType.ObjectCFrame`, a `Datatype.CFrame` for
          `Enum.ListenerType.CFrame`, or `nil` for `Enum.ListenerType.Camera`.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events:
  - name: SoundService.OpenDirectionalCurveEditorSignal
    summary: ''
    description: ''
    code_samples: []
    parameters:
      - name: selectedCurveObjects
        type: Instances
        default:
        summary: ''
    tags: []
    deprecation_message: ''
    security: RobloxScriptSecurity
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
callbacks: []
