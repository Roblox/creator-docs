name: AudioAnalyzer
type: class
category:
memory_category: Internal
summary: |
  Takes measurements from audio streams that are connected to it via one or more
  `Class.Wire|Wires`.
description: |
  `Class.AudioAnalyzer` takes measurements from audio streams that are wired to
  it through `Class.Wire`. It provides a single **Input** pin but does not
  produce any output streams.
code_samples: []
inherits:
  - Instance
tags: []
deprecation_message: ''
properties:
  - name: AudioAnalyzer.PeakLevel
    summary: |
      The loudest volume observed during the last audio buffer.
    description: |
      The loudest volume observed during the last audio buffer. This property
      changes often and thus does not fire changed events.
    code_samples: []
    type: float
    tags:
      - ReadOnly
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Metering
    serialization:
      can_load: false
      can_save: true
    capabilities:
      - Audio
    writeCapabilities: []
  - name: AudioAnalyzer.RmsLevel
    summary: |
      The root-mean-square average volume observed during the last audio buffer.
    description: |
      The root-mean-square average volume observed during the last audio buffer.
      This property is generally more stable than
      `Class.AudioAnalyzer.PeakLevel|PeakLevel` but it may not capture momentary
      volume spikes.
    code_samples: []
    type: float
    tags:
      - ReadOnly
      - NotReplicated
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Metering
    serialization:
      can_load: false
      can_save: true
    capabilities:
      - Audio
    writeCapabilities: []
  - name: AudioAnalyzer.SpectrumEnabled
    summary: |
      Enables usage of `Class.AudioAnalyzer:GetSpectrum|GetSpectrum`.
    description: |
      Enables usage of `Class.AudioAnalyzer:GetSpectrum|GetSpectrum()`. If
      `false`, `Class.AudioAnalyzer:GetSpectrum|GetSpectrum()` returns an empty
      array, but the CPU overhead of the `Class.AudioAnalyzer` is dramatically
      reduced. This means that if you are only analyzing the **volume** of an
      audio stream, you can disable this property to improve performance.
    code_samples: []
    type: bool
    tags: []
    deprecation_message: ''
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Metering
    serialization:
      can_load: true
      can_save: true
    capabilities:
      - Audio
    writeCapabilities: []
methods:
  - name: AudioAnalyzer:GetConnectedWires
    summary: |
      Returns an array of `Class.Wire|Wires` that are connected to the specified
      pin.
    description: |
      Returns an array of `Class.Wire|Wires` that are connected to the specified
      pin. `Class.AudioAnalyzer` has one "Input" pin.
    code_samples: []
    parameters:
      - name: pin
        type: string
        default:
        summary: ''
    returns:
      - type: Instances
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: AudioAnalyzer:GetSpectrum
    summary: |
      Returns the frequency spectrum of the last audio buffer.
    description: |
      Returns the frequency spectrum of the last audio buffer, as an array of
      numbers. The elements of the array are root-mean-square volume levels,
      evenly spaced from 0 hertz to 24,000 hertz. If any of the analyzer's
      inputs come from an `Class.AudioDeviceInput`, this method returns an empty
      array.
    code_samples: []
    parameters: []
    returns:
      - type: Array
        summary: ''
    tags:
      - CustomLuaState
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events:
  - name: AudioAnalyzer.WiringChanged
    summary: |
      Fires when another instance is connected to or disconnected from the
      `Class.AudioAnalyzer` via a `Class.Wire`.
    description: |
      Event that fires after a `Class.Wire` becomes connected or disconnected,
      and that `Class.Wire` is now or was previously connected to a pin on the
      `Class.AudioAnalyzer` and to some other wirable instance.
    code_samples: []
    parameters:
      - name: connected
        type: bool
        default:
        summary: |
          Whether the instance got connected or disconnected.
      - name: pin
        type: string
        default:
        summary: |
          The pin on the `Class.AudioAnalyzer` that the `Class.Wire` targets.
      - name: wire
        type: Wire
        default:
        summary: |
          The `Class.Wire` between the `Class.AudioAnalyzer` and the other
          instance.
      - name: instance
        type: Instance
        default:
        summary: |
          The other instance that is or was connected through the `Class.Wire`.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
callbacks: []
