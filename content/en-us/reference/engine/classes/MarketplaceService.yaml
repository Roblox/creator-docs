name: MarketplaceService
type: class
category: Monetization
memory_category: Instances
summary: |
  The service responsible for in-experience transactions.
description: |
  `Class.MarketplaceService` is responsible for in-experience transactions. The
  most notable methods are
  `Class.MarketplaceService:PromptProductPurchase()|PromptProductPurchase` and
  `Class.MarketplaceService:PromptPurchase()|PromptPurchase`, as well as the
  callback `Class.MarketplaceService.ProcessReceipt|ProcessReceipt` which must
  be defined so that developer product transactions do not fail.

  `Class.MarketplaceService` also has methods that fetch information about
  [developer products](../../../production/monetization/developer-products.md)
  (`Class.MarketplaceService:GetProductInfo()|GetProductInfo` and
  `Class.MarketplaceService:GetDeveloperProductsAsync()|GetDeveloperProductsAsync`),
  [passes](../../../production/monetization/game-passes.md)
  (`Class.MarketplaceService:UserOwnsGamePassAsync()|UserOwnsGamePassAsync`),
  and other assets
  (`Class.MarketplaceService:PlayerOwnsAsset()|PlayerOwnsAsset`,
  `Class.MarketplaceService:PlayerOwnsBundle()|PlayerOwnsBundle`).

  Understanding `Class.MarketplaceService` is the first step towards learning to
  [monetize](../../../production/monetization/index.md) an experience on Roblox,
  as well as learning to use `Class.DataStoreService`, which is responsible for
  saving and loading all data related to purchases.
code_samples:
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties: []
methods:
  - name: MarketplaceService:PromptBulkPurchase
    summary: |
      Prompts a user to purchase multiple avatar items with the given `assetId`
      or `bundleId`.
    description: |
      Prompts a user to purchase multiple avatar items with the given `assetId`
      or `bundleId`. Does not work with non-avatar items.

      `PromptBulkPurchase` only allows prompting from server scripts.

      For limited items, original copies are prompted until they run out,
      regardless of the price. Once original copies are out, resale copies are
      prompted.

      A maximum of 20 items can be added to a single bulk purchase prompt.
    code_samples:
      - Prompt-Bulk-Purchase-Local
      - Prompt-Bulk-Purchase-Server
    parameters:
      - name: player
        type: Player
        default:
        summary: |
          The user to prompt to purchase items.
      - name: lineItems
        type: Array
        default:
        summary: |
          An array of avatar items to be included in the bulk purchase.

          Each line item contains the following structure:

          ```lua
          {
            Type: MarketplaceProductType,
            Id: string
          }
          ```

          Each line item contains the following pairs:

          - `Type`: The corresponding `Enum.MarketplaceProductType` (Enum).
          - `Id`: The ID of the asset or bundle.
      - name: options
        type: Dictionary
        default:
        summary: |
          Not available at this time.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PromptBundlePurchase
    summary: |
      Prompts a user to purchase a bundle with the given `bundleId`.
    description: |
      Prompts a user to purchase a bundle with the given `bundleId`.
    code_samples:
    parameters:
      - name: player
        type: Instance
        default:
        summary: ''
      - name: bundleId
        type: int64
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PromptCancelSubscription
    summary: |
      Prompts a user to cancel a subscription for the given `subscriptionId`.
    description: |
      Prompts a user to cancel a subscription for the given `subscriptionId`.
      Once the user successfully cancels the subscription, the
      `Class.Players.UserSubscriptionStatusChanged` event fires.
    code_samples: []
    parameters:
      - name: user
        type: Player
        default:
        summary: ''
      - name: subscriptionId
        type: string
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PromptGamePassPurchase
    summary: |
      Prompts a user to purchase a pass with the given `gamePassId`.
    description: |
      Prompts a user to purchase a
      [pass](../../../production/monetization/game-passes.md) with the given
      `gamePassId`.
    code_samples:
    parameters:
      - name: player
        type: Instance
        default:
        summary: ''
      - name: gamePassId
        type: int64
        default:
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PromptPremiumPurchase
    summary: |
      Prompts a user to purchase Roblox Premium.
    description: |
      Prompts a user to purchase
      [Roblox Premium](https://www.roblox.com/premium/membership). To learn more
      about Premium and about incorporating Premium incentives into your
      experience, see
      [Engagement-based payouts](../../../production/monetization/engagement-based-payouts.md).

      ##### See also

      - `Class.MarketplaceService.PromptPremiumPurchaseFinished` which fires
        when the Premium purchase UI closes.
      - `Class.Players.PlayerMembershipChanged` which fires when the server
        recognizes that a user's membership has changed.
    code_samples:
      - prompt-premium-upsell
    parameters:
      - name: player
        type: Instance
        default:
        summary: |
          The user being prompted to purchase Premium.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PromptProductPurchase
    summary: |
      Prompts a user to purchase a developer product with the given `productId`.
    description: |
      Prompts a user to purchase a
      [developer product](../../../production/monetization/developer-products.md)
      with the given `productId`.
    code_samples:
      - MarketplaceService-PromptProductPurchase1
    parameters:
      - name: player
        type: Instance
        default:
        summary: ''
      - name: productId
        type: int64
        default:
        summary: ''
      - name: equipIfPurchased
        type: bool
        default: true
        summary: ''
      - name: currencyType
        type: CurrencyType
        default: Default
        summary: ''
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PromptPurchase
    summary: |
      Prompts a user to purchase an item with the given `assetId`. Does not work
      for USD Creator Store purchases.
    description: |
      Prompts a user to purchase an item with the given `assetId`. 
      - This does not work for [USD Creator Store](../../../production/sell-on-creator-store.md) purchases. 
      -  If the item has the [Sale Location](../../../marketplace/publish-to-marketplace.md#sale-location) set as `Experience By Place ID (API Only)`, you must call `Class.MarketplaceService:PromptPurchase` from a server script.
      - If prompting a purchase of a [limited](../../../marketplace/marketplace-fees-and-commissions.md#limiteds) item:
        - (Recommended) Server requests prompt original copies until they run out,
          regardless of the price. Once original copies run out, resale copies are
          prompted.
        - Client requests prompt from the lowest resale price even if original
          copies are available.

    code_samples:
      - MarketplaceService-PromptPurchase1
      - market
    parameters:
      - name: player
        type: Instance
        default:
        summary: ''
      - name: assetId
        type: int64
        default:
        summary: ''
      - name: equipIfPurchased
        type: bool
        default: true
        summary: ''
      - name: currencyType
        type: CurrencyType
        default: Default
        summary: |
          Ignored.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PromptSubscriptionPurchase
    summary: |
      Prompts a user to purchase a subscription for the given `subscriptionId`.
    description: |
      Prompts a user to purchase a subscription for the given `subscriptionId`.
    code_samples: []
    parameters:
      - name: user
        type: Player
        default:
        summary: |
          The `Class.Player` object to be prompted to subscribe.
      - name: subscriptionId
        type: string
        default:
        summary: |
          The ID of the subscription to subscribe to.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:GetDeveloperProductsAsync
    summary: |
      Returns a `Class.Pages` object which contains information for all of the
      current experience's developer products.
    description: |
      Returns a `Class.Pages` object which contains information for all of the
      current experience's
      [developer products](../../../production/monetization/developer-products.md).
    code_samples:
      - MarketplaceService-GetDeveloperProductsAsync1
    parameters: []
    returns:
      - type: Instance
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:GetProductInfo
    summary: |
      Returns the product information of an asset using its asset ID.
    description: |
      This method provides information about an asset,
      [developer product](../../../production/monetization/developer-products.md),
      or [pass](../../../production/monetization/game-passes.md) based on the
      asset ID and the `Enum.InfoType`. If an item with the given ID does not
      exist, this method throws an error.

      Information about the queried item is provided in a dictionary with the
      following keys. Note that not all information is provided or necessarily
      relevant for the kind of product you're querying.

      <table size="small">
      	<thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>Name</code></td>
      	  <td>string</td>
      	  <td>The name shown on the asset's page.</td>
        </tr>
      	<tr>
      	  <td><code>Description</code></td>
      	  <td>string</td>
      	  <td>The description shown on the asset's page; can be <code>nil</code> if blank.</td>
        </tr>
      	<tr>
      	  <td><code>PriceInRobux</code></td>
      	  <td>number</td>
      	  <td>The cost of purchasing the asset using Robux.</td>
        </tr>
        <tr>
      	  <td><code>ProductId</code></td>
      	  <td>number</td>
      	  <td>The product ID if <code>Enum.InfoType</code> is <code>Product</code>.</td>
        </tr>
        <tr>
      	  <td><code>ProductType</code></td>
      	  <td>string</td>
      	  <td>A string describing what the product is. Not to be confused with <code>Enum.MarketplaceProductType</code>.</td>
        </tr>
      	<tr>
      	  <td><code>Created</code></td>
      	  <td>string</td>
      	  <td>Timestamp of when the asset was created, for example <code>2022-01-02T10:30:45Z</code>. Formatted using ISO 8601.</td>
        </tr>
      	<tr>
      	  <td><code>Updated</code></td>
      	  <td>string</td>
      	  <td>Timestamp of when the asset was last updated by its creator, for example <code>2022-02-12T11:22:15Z</code>. Formatted using ISO 8601.</td>
        </tr>
      	<tr>
      	  <td><code>ContentRatingTypeId</code></td>
      	  <td>number</td>
      	  <td>Indicates whether the item is marked as 13+ in catalog.</td>
        </tr>
      	<tr>
      	  <td><code>MinimumMembershipLevel</code></td>
      	  <td>number</td>
      	  <td>The minimum subscription level necessary to purchase the item.</td>
        </tr>
      	<tr>
      	  <td><code>IsPublicDomain</code></td>
      	  <td>boolean</td>
      	  <td>Describes whether the asset can be taken for free.</td>
        </tr>
        <tr>
      	  <td><code>TargetId</code></td>
      	  <td>number</td>
      	  <td>The ID of the product or asset.</td>
        </tr>
        </tbody>
      </table>

      ##### Creator Information

      <table size="small">
        <thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>Creator</code></td>
      	  <td>table</td>
      	  <td>Dictionary table of information describing the creator of the asset, containing the following fields:</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>CreatorType</code>: Either <code>User</code> or <code>Group</code>.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>CreatorTargetId</code>: The ID of the creator user or group.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>HasVerifiedBadge</code>: Boolean of whether the creator has a verified badge.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>Name</code>: The name/username of the creator.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>Id</code>: Use <code>CreatorTargetId</code> instead.</td>
        </tr>
        </tbody>
      </table>

      ##### Asset Information

      <table size="small">
        <thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>AssetId</code></td>
      	  <td>number</td>
      	  <td>The asset ID if <code>Enum.InfoType</code> is <code>Asset</code>.</td>
        </tr>
      	<tr>
      	  <td><code>AssetTypeId</code></td>
      	  <td>number</td>
      	  <td>The type of asset. See <code>Enum.AssetType</code> for the asset type ID numbers.</td>
        </tr>
        <tr>
      	  <td><code>IconImageAssetId</code></td>
      	  <td>number</td>
      	  <td>The asset ID of the product's icon, or <code>0</code> if there isn't one.</td>
        </tr>
      	<tr>
      	  <td><code>IsForSale</code></td>
      	  <td>boolean</td>
      	  <td>Describes whether the asset is purchasable.</td>
        </tr>
      	<tr>
      	  <td><code>IsLimited</code></td>
      	  <td>boolean</td>
      	  <td>Describes whether the asset is a Roblox Limited that is no longer (if ever) sold.</td>
        </tr>
      	<tr>
      	  <td><code>IsLimitedUnique</code></td>
      	  <td>boolean</td>
      	  <td>Describes whether the asset is a unique Roblox Limited ("Limited&nbsp;U") item that only has a fixed number sold.</td>
        </tr>
      	<tr>
      	  <td><code>IsNew</code></td>
      	  <td>boolean</td>
      	  <td>Describes whether the asset is marked as "new" in the catalog.</td>
        </tr>
      	<tr>
      	  <td><code>Remaining</code></td>
      	  <td>number</td>
      	  <td>The remaining number of times a limited unique item may be sold.</td>
        </tr>
      	<tr>
      	  <td><code>Sales</code></td>
      	  <td>number</td>
      	  <td>The number of times the asset has been sold.</td>
        </tr>
        </tbody>
      </table>

      #### Collectibles Information

      <table size="small">
        <thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
        <tr>
      	  <td><code>CollectibleItemId</code></td>
      	  <td>string</td>
      	  <td>The unique item ID of the collectible.</td>
        </tr>
      	<tr>
      	  <td><code>CollectibleProductId</code></td>
      	  <td>string</td>
      	  <td>The unique product ID of the collectible.</td>
        </tr>
        <tr>
      	  <td><code>CollectiblesItemDetails</code></td>
      	  <td>table</td>
      	  <td>Dictionary table of information describing the collectible, containing the following fields:</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>CollectibleLowestAvailableResaleItemInstanceId</code>: The unique item instance ID of the lowest available resale for the collectible.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>CollectibleLowestAvailableResaleProductId</code>: The unique product ID of the lowest available resale for the collectible.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>CollectibleLowestResalePrice</code>: The lowest resale price for the collectible in Robux.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>IsForSale</code>: Boolean of whether the collectible is available for sale (not resale).</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>IsLimited</code>: Boolean of whether or not the collectible is limited.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
          <td><code>TotalQuantity</code>: The total quantity of the collectible available for purchase (not resale).</td>
        </tr>
        </tbody>
      </table>

      ##### Sale Location Settings

      <table size="small">
        <thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>CanBeSoldInThisGame</code></td>
      	  <td>boolean</td>
      	  <td>Describes whether the asset is purchasable in the current experience.</td>
        </tr>
        <tr>
      	  <td><code>SaleLocation</code></td>
      	  <td>table</td>
      	  <td>Dictionary table of information describing where the item can be sold, containing the following fields:</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
      	  <td><code>SaleLocationType</code>: The type of sale location setting. See <code>Enum.ProductLocationRestriction</code> for the sale location setting ID numbers.</td>
        </tr>
        <tr>
      	  <td colspan="2"></td>
      	  <td><code>UniverseIds</code>: Array table of universes in which the item can be sold (not currently implemented).</td>
        </tr>
        </tbody>
      </table>
    code_samples:
      - MarketplaceService-GetProductInfo1
    parameters:
      - name: assetId
        type: int64
        default:
        summary: |
          The asset ID of the specified product.
      - name: infoType
        type: InfoType
        default: Asset
        summary: |
          An `Enum.InfoType` enum value specifying the type of information being
          retrieved.
    returns:
      - type: Dictionary
        summary: |
          A dictionary containing information about the queried item, described
          in the previous tables.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:GetSubscriptionProductInfoAsync
    summary: |
      Returns the product information of a subscription for the given
      `subscriptionId`.
    description: |
      **Note**: Because it returns a localized price, you can only call this
      method from a `Class.Script` with `Enum.RunContext.Client`.

      Returns the product information of a subscription for the given
      `subscriptionId`.

      <table size="small">
      	<thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>Name</code></td>
      	  <td>string</td>
      	  <td>The name of the subscription product.</td>
        </tr>
      	<tr>
      	  <td><code>Description</code></td>
      	  <td>string</td>
      	  <td>The description of the subscription product.</td>
        </tr>
      	<tr>
      	  <td><code>IconImageAssetId</code></td>
      	  <td>number</td>
          <td>The asset ID of the subscription product icon.</td>
        </tr>
      	<tr>
      	  <td><code>SubscriptionPeriod</code></td>
      	  <td><code>Enum.SubscriptionPeriod</code></td>
          <td>The duration of the subscription (for example, <code>Month</code>, <code>Year</code>, etc.).</td>
        </tr>
      	<tr>
      	  <td><code>DisplayPrice</code></td>
      	  <td>string</td>
          <td>Localized price with the appropriate currency symbol for display (for example, <code>$4.99</code>). For users in unsupported countries, <code>DisplayPrice</code> returns a string without specific price information.</td>
        </tr>
      	<tr>
      	  <td><code>DisplaySubscriptionPeriod</code></td>
      	  <td>string</td>
          <td>Localized subscription period text for display (for example, <code>/month</code>). Can be used together with <code>DisplayPrice</code>.</td>
        </tr>
      	<tr>
      	  <td><code>SubscriptionProviderName</code></td>
      	  <td>string</td>
          <td>Name of the subscription benefit provider (for example, the name of the associated experience).</td>
        </tr>
      	<tr>
      	  <td><code>IsForSale</code></td>
      	  <td>boolean</td>
      	  <td>True if the subscription product is available for sale.</td>
        </tr>
        <tr>
      	  <td><code>PriceTier</code></td>
      	  <td>number</td>
      	  <td>A number that can be used to compare the price of different subscription products. This is not the actual price of the subscription (for example, 499).</td>
        </tr>
        </tbody>
      </table>
    code_samples: []
    parameters:
      - name: subscriptionId
        type: string
        default:
        summary: |
          The ID of the subscription to check.
    returns:
      - type: Dictionary
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:GetUserSubscriptionDetailsAsync
    summary: |
      Returns a table that contains the details of the user's subscription for a
      given `subscriptionId`.
    description: |
      Returns a dictionary table containing the details of the user's
      subscription for the given `subscriptionId`. The table contains the
      following keys:

      <table size="small">
      	<thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>SubscriptionState</code></td>
      	  <td><code>Enum.SubscriptionState</code></td>
      	  <td>Current state of this particular subscription.</td>
        </tr>
      	<tr>
      	  <td><code>NextRenewTime</code></td>
      	  <td><code>Datatype.DateTime</code></td>
      	  <td>
            Renewal time for this current subscription. May be in the past if the subscription is in
            <code>Enum.SubscriptionState.SubscribedRenewalPaymentPending|SubscribedRenewalPaymentPending</code> state. This
            field is will be <code>nil</code> if the subscription will not renew, is <code>Enum.SubscriptionState.Expired|Expired</code>, or the user never subscribed.
          </td>
        </tr>
        <tr>
      	  <td><code>ExpireTime</code></td>
      	  <td><code>Datatype.DateTime</code></td>
      	  <td>
            When this subscription expires. This field will be <code>nil</code>
            if the subscription is not cancelled or the user never subscribed.
          </td>
        </tr>
        <tr>
      	  <td><code>ExpirationDetails</code></td>
      	  <td><code>Library.table</code></td>
      	  <td>
            Table containing the details of the subscription expiration. This
            field will be <code>nil</code> if the subscription is not in the
            <code>Enum.SubscriptionState.Expired|Expired</code> state. If populated, the table contains a <code>ExpirationReason</code> key of type <code>Enum.SubscriptionExpirationReason</code> describing why the subscription is expired.
          </td>
        </tr>
        </tbody>
      </table>

      Note that this method can only be called from a `Class.Script` with
      `Class.BaseScript.RunContext|RunContext` of
      `Enum.RunContext.Server|Server`. If you only need to determine the
      `IsSubscribed` status of a user, it's recommended to use
      `Class.MarketplaceService:GetUserSubscriptionStatusAsync()|GetUserSubscriptionStatusAsync`
      as it is faster and more efficient for that particular purpose.
    code_samples: []
    parameters:
      - name: user
        type: Player
        default:
        summary: |
          The `Class.Player` object whose subscription details you want to
          check.
      - name: subscriptionId
        type: string
        default:
        summary: |
          The ID of the subscription to check.
    returns:
      - type: Dictionary
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:GetUserSubscriptionPaymentHistoryAsync
    summary: |
      Returns an `Library.table|Array` that contains up to one year of the
      user's subscription payment history for the given `subscriptionId`.
    description: |
      **Note**: You can only call this method from a `Class.Script` with
      `Enum.RunContext.Server`.

      Returns an `Library.table|Array` that contains up to one year of the
      user's subscription payment history for the given `subscriptionId`, sorted
      from the most recent status to the least recent.

      Each entry in the payment history `Library.table|Array` contains the
      following keys:

      <table size="small">
      	<thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>CycleStartTime</code></td>
      	  <td><code>Datatype.DateTime</code></td>
      	  <td><code>Datatype.DateTime</code> at the start of this particular subscription period.</td>
        </tr>
      	<tr>
      	  <td><code>CycleEndTime</code></td>
      	  <td><code>Datatype.DateTime</code></td>
      	  <td><code>Datatype.DateTime</code> at the end of this particular subscription period.</td>
        </tr>
        <tr>
      	  <td><code>PaymentStatus</code></td>
      	  <td><code>Enum.SubscriptionPaymentStatus</code></td>
      	  <td><code>Enum.SubscriptionPaymentStatus.Paid</code> if the user paid for this particular subscription period.
          <code>Enum.SubscriptionPaymentStatus.Refunded</code> if the user refunded this particular subscription period.
          </td>
        </tr>
        </tbody>
      </table>

      #### Payment History Length

      Only creators affiliated with the subscription product can access up to
      **one year** worth of the user's subscription payment history.
      Non-associated creators can only get the user's **current** subscription
      payment status or an empty `Library.table|Array` if the user has no active
      subscription.

      #### Grace Period

      Subscription renewal payments can have some processing time. Payment
      history doesn't return a table for this period. However, in order to
      preserve a user's subscription experience during the processing period,
      `Class.MarketplaceService.GetUserSubscriptionStatusAsync()|GetUserSubscriptionStatusAsync`
      returns `IsSubscribed: true` for the given user. Don't grant durable items
      or currency type subscription benefits to the user until after payment has
      been confirmed for the current cycle.

      For example, on August 31, 2023, User A's Subscription B is up for
      renewal. On September 1, 2023, the payment has yet to be processed. If you
      call
      `Class.MarketplaceService.GetUserSubscriptionPaymentHistoryAsync()|GetUserSubscriptionPaymentHistoryAsync`
      on September 1, 2023 on User A for Subscription B, the first entry of the
      return value is:

      <table size="small">
      	<thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Value</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>CycleStartTime</code></td>
      	  <td>...</td>
        </tr>
      	<tr>
      	  <td><code>CycleEndTime</code></td>
      	  <td>August 31, 2023</td>
        </tr>
        <tr>
      	  <td><code>PaymentStatus</code></td>
      	  <td><code>Enum.SubscriptionPaymentStatus.Paid</code></td>
        </tr>
        </tbody>
      </table>

      Note that since the user is within the grace period, the cycle they have
      yet to pay for (September 1, 2023) does not appear in the return value at
      all. This field only populates after the payment has been received and
      processed.

      At the same time,
      `Class.MarketplaceService.GetUserSubscriptionStatusAsync()|GetUserSubscriptionStatusAsync`
      returns the following result until the renewal payment process fails or
      the user cancels:

      <table size="small">
      	<thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Return</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>IsSubscribed</code></td>
      	  <td>True</td>
        </tr>
      	<tr>
      	  <td><code>IsRenewing</code></td>
      	  <td>True</td>
        </tr>
        </tbody>
      </table>
    code_samples:
      - MarketplaceService-GetUserSubscriptionPaymentHistoryAsync1
    parameters:
      - name: user
        type: Player
        default:
        summary: ''
      - name: subscriptionId
        type: string
        default:
        summary: ''
    returns:
      - type: Array
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:GetUserSubscriptionStatusAsync
    summary: |
      Returns a `Library.table` that contains the subscription status of the
      user for the given `subscriptionId`.
    description: |
      Returns a `Library.table` that contains the subscription status of the
      user for the given `subscriptionId`. The table contains the following
      keys:

      <table size="small">
      	<thead>
      	  <tr>
      	    <th>Key</th>
      	    <th>Type</th>
      	    <th>Description</th>
      	  </tr>
      	</thead>
        <tbody>
      	<tr>
      	  <td><code>IsSubscribed</code></td>
      	  <td>boolean</td>
      	  <td>True if the user's subscription is active.</td>
        </tr>
      	<tr>
      	  <td><code>IsRenewing</code></td>
      	  <td>boolean</td>
      	  <td>True if the user is set to renew this subscription after the current subscription period ends.</td>
        </tr>
        </tbody>
      </table>

      Note that `IsSubscribed` will be `true` only when a user has purchased the
      subscription and the payment has been successfully processed. If the
      payment for a user's initial subscription purchase is still processing or
      has failed, `IsSubscribed` returns `false`. To understand when a user's
      subscription status has changed, see the
      `Class.Players.UserSubscriptionStatusChanged` event.
    code_samples:
      - MarketplaceService-GetUserSubscriptionStatusAsync1
    parameters:
      - name: user
        type: Player
        default:
        summary: |
          The `Class.Player` object whose subscription status you want to check.
      - name: subscriptionId
        type: string
        default:
        summary: |
          The ID of the subscription to check for.
    returns:
      - type: Dictionary
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PlayerOwnsAsset
    summary: |
      Returns whether the given user has the given asset.
    description: |
      Returns whether the inventory of a specific user contains an asset, based
      on the asset ID. This method throws an error if the query fails, so you
      should wrap calls to this method in `pcall()`.

      - This method should **not** be used for
        [passes](../../../production/monetization/game-passes.md) since they use
        a separate ID system. Legacy passes that still depend on an asset ID
        should use
        `Class.MarketplaceService:UserOwnsGamePassAsync()|UserOwnsGamePassAsync`
        instead of this method.
      - This method cannot be used to check for
        [developer products](../../../production/monetization/developer-products.md)
        since they can be purchased multiple times but not owned themselves.
        Instead, use a [data store](../../../cloud-services/data-stores) to save
        when a user buys a developer product.
    code_samples:
      - MarketplaceService-PlayerOwnsAsset1
    parameters:
      - name: player
        type: Instance
        default:
        summary: |
          The `Class.Player` whose inventory is tested for ownership of the
          given asset.
      - name: assetId
        type: int64
        default:
        summary: |
          The asset ID for which the given player's inventory is tested.
    returns:
      - type: bool
        summary: |
          Indicates whether the given player's inventory contains the given
          asset.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:PlayerOwnsBundle
    summary: |
      Returns whether the given player owns the given bundle.
    description: |
      Returns whether the inventory of a specific user contains a bundle, based
      on the bundle ID. This method throws an error if the query fails, so you
      should wrap calls to this method in `pcall()`.
    code_samples:
      - MarketplaceService-PlayerOwnsBundle1
    parameters:
      - name: player
        type: Player
        default:
        summary: |
          The `Class.Player` whose inventory is tested for ownership of the
          given bundle.
      - name: bundleId
        type: int64
        default:
        summary: |
          The bundle ID for which the given player's inventory is tested.
    returns:
      - type: bool
        summary: |
          Indicates whether the given player's inventory contains the given
          bundle.
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService:UserOwnsGamePassAsync
    summary: |
      Returns true if the player with the given `Class.Player.UserId|UserId`
      owns the pass with the given `gamePassId`.
    description: |
      Returns true if the user with the given `Class.Player.UserId|UserId` owns
      the [pass](../../../production/monetization/game-passes.md) with the given
      `gamePassId` (not to be confused with an asset ID).

      #### Caching Behavior

      The results of this function are remembered so that repeated calls are
      returned faster.

      This function always returns true when the user first enters a server
      after purchasing the pass.

      If the user has purchased the pass inside an experience through
      `Class.MarketplaceService:PromptGamePassPurchase()|PromptGamePassPurchase`,
      the
      `Class.MarketplaceService:UserOwnsGamePassAsync()|UserOwnsGamePassAsync`
      function might return false because of caching behavior. Alternatively,
      the function might return true even after the user has deleted the pass
      from their inventory.
    code_samples:
    parameters:
      - name: userId
        type: int64
        default:
        summary: |
          The `Class.Player.UserId|UserId` of the `Class.Player` whose inventory
          you're checking.
      - name: gamePassId
        type: int64
        default:
        summary: |
          The pass ID you want to check for. Not to be confused with an asset
          ID.
    returns:
      - type: bool
        summary: ''
    tags:
      - Yields
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
events:
  - name: MarketplaceService.PromptBulkPurchaseFinished
    summary: |
      Fires when a purchase prompt for bulk avatar items is closed.
    description: |
      This event fires when a purchase prompt for a bulk avatar items closes.
      For example, when a user receives the purchase prompt and clicks
      **Cancel**, or when they receive a success or error message and click
      **OK**.

      Note: This is not a trusted event from the client. To check if the user
      owns the items purchased, use `Class.MarketplaceService.PlayerOwnsAsset`
      or `Class.MarketplaceService.PlayerOwnsBundle`.
    code_samples: []
    parameters:
      - name: player
        type: Instance
        default:
        summary: |
          The `Class.Player` who received the prompt.
      - name: status
        type: MarketplaceBulkPurchasePromptStatus
        default:
        summary: |
          The status of the bulk purchase.
      - name: results
        type: Dictionary
        default:
        summary: |
          The table type containing the line items and their status in the
          following format:

          ```lua
          {
            RobuxSpent: number
            Items: {
              {
                type: MarketplaceProductType,
                id: string,
                status: MarketplaceItemPurchaseStatus
              },
              ...
            }
          }
          ```

          Each line item contains the following pairs:

          - `type`: The corresponding `Enum.MarketplaceProductType` (Enum).
          - `id`: The ID of the asset or bundle (string).
          - `status`: The `Enum.MarketplaceItemPurchaseStatus` of the purchase
            (Enum)
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService.PromptBundlePurchaseFinished
    summary: ''
    description: ''
    code_samples:
    parameters:
      - name: player
        type: Instance
        default:
        summary: ''
      - name: bundleId
        type: int64
        default:
        summary: ''
      - name: wasPurchased
        type: bool
        default:
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService.PromptGamePassPurchaseFinished
    summary: |
      Fires when a purchase prompt for a pass is closed.
    description: |
      This event fires when a purchase prompt for a
      [pass](../../../production/monetization/game-passes.md) closes. For
      example, when a user receives the purchase prompt and clicks **Cancel**,
      or when they receive a success or error message and click **OK**.

      ##### See also

      - For repeatable **developer product** purchase prompts, use
        `Class.MarketplaceService.PromptProductPurchaseFinished|PromptProductPurchaseFinished`.
      - For **affiliate gear sales** or other assets, use
        `Class.MarketplaceService.PromptPurchaseFinished|PromptPurchaseFinished`.
      - For more information on saving and replicating user data like purchases
        and progress, see
        [Implementing player data and purchases](https://devforum.roblox.com/t/implementing-player-data-and-purchasing-systems/2839941).
    code_samples:
      - handling-gamepass
    parameters:
      - name: player
        type: Instance
        default:
        summary: |
          The `Class.Player` who received the prompt.
      - name: gamePassId
        type: int64
        default:
        summary: |
          The ID number of the pass shown in the prompt. Not to be confused with
          an asset ID.
      - name: wasPurchased
        type: bool
        default:
        summary: |
          Indicates if the user pressed **OK** (true), **Cancel** (false) on the
          purchase prompt, or if the purchase prompt errored (false).

          This might not accurately reflect if the purchase itself has been
          successfully processed. Use
          `MarketplaceService.UserOwnsGamePassAsync|UserOwnsGamePassAsync` as
          ownership confirmation.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService.PromptPremiumPurchaseFinished
    summary: |
      Fires when a purchase prompt for Roblox Premium is closed.
    description: |
      This event fires when a purchase prompt for
      [Roblox Premium](https://www.roblox.com/premium/membership) closes. For
      example, when a user receives the purchase prompt and clicks **Cancel**,
      or when they receive a success or error message and click **OK**.

      ##### See also

      - `Class.MarketplaceService.PromptPremiumPurchase|PromptPremiumPurchase`
        to prompt a user to purchase Premium.
      - `Class.Players.PlayerMembershipChanged|PlayerMembershipChanged`, which
        fires when the server recognizes that a user's membership has changed.
    code_samples:
    parameters: []
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService.PromptProductPurchaseFinished
    summary: |
      Fires when a purchase prompt for a developer product is closed. Do not use
      this event to process purchases.
    description: |
      **IMPORTANT:** Do **not** use the `PromptProductPurchaseFinished` event to
      process purchases; instead, use the
      `Class.MarketplaceService.ProcessReceipt|ProcessReceipt` callback. The
      firing of `PromptProductPurchaseFinished` does **not** mean that a user
      has successfully purchased an item.

      This event fires when a purchase prompt for a
      [developer product](../../../production/monetization/developer-products.md)
      closes. For example, when a user receives the purchase prompt and clicks
      **Cancel**, or when they receive a success or error message and click
      **OK**. The firing of this event does **not** mean that a user has
      successfully purchased an item.

      While you can use the `PromptProductPurchaseFinished` event to detect when
      a user closes a purchase prompt, you should **not** use it to process
      purchases because those purchases might still fail in the backend for
      several reasons. For example, if a Roblox system is offline, or if the
      product price has changed and the user now doesn't have enough Robux to
      make the purchase. To process purchases, you must use
      `Class.MarketplaceService.ProcessReceipt()|ProcessReceipt`. Using
      `ProcessReceipt` allows you to confirm that the purchase has succeeded
      before you grant the user the item they have purchased.

      The `PromptProductPurchaseFinished` event fires with a `Player.UserId`
      instead of a reference to the `Player` object.

      ##### See also

      - `Class.MarketplaceService.PromptGamePassPurchaseFinished|PromptGamePassPurchaseFinished`
        to prompt a user to purchase a pass.
      - `Class.MarketplaceService.PromptPurchaseFinished|PromptPurchaseFinished`
        to prompt a user to purchase affiliate gear or other assets.
      - For more information on saving and replicating user data like purchases
        and progress, see
        [Implementing player data and purchases](https://devforum.roblox.com/t/implementing-player-data-and-purchasing-systems/2839941).
    code_samples:
    parameters:
      - name: userId
        type: int64
        default:
        summary: |
          The `Class.Player.UserId|UserId` of the user who received the
          developer product prompt.
      - name: productId
        type: int64
        default:
        summary: |
          The ID number of the developer product shown in the prompt. Not to be
          confused with an asset ID.
      - name: isPurchased
        type: bool
        default:
        summary: |
          Indicates if the user pressed **OK** (true), **Cancel** (false) on the
          purchase prompt, or if the purchase prompt errored (false).

          Do not use this parameter to process developer product purchases.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService.PromptPurchaseFinished
    summary: |
      Fires when a purchase prompt for an affiliate gear sale or other asset is
      closed. Does **not** fire for developer product or pass prompts.
    description: |
      This event fires when a purchase prompt for an affiliate gear sale or
      other asset closes. For example, when a user receives the purchase prompt
      and clicks **Cancel**, or when they receive a success or error message and
      click **OK**.

      This event does not fire for
      [developer product](../../../production/monetization/developer-products.md)
      or [pass](../../../production/monetization/game-passes.md) prompts.

      ##### See also

      - `Class.MarketplaceService.PromptGamePassPurchaseFinished|PromptGamePassPurchaseFinished`
        to prompt a user to purchase a pass.
      - `Class.MarketplaceService.PromptProductPurchaseFinished|PromptProductPurchaseFinished`
        to prompt a user to purchase a developer product.
      - For more information on saving and replicating user data like purchases
        and progress, see
        [Implementing player data and purchases](https://devforum.roblox.com/t/implementing-player-data-and-purchasing-systems/2839941).
    code_samples:
      - MarketplaceService-PromptPurchaseFinished1
    parameters:
      - name: player
        type: Instance
        default:
        summary: |
          The `Class.Player` who received the prompt.
      - name: assetId
        type: int64
        default:
        summary: |
          The asset ID of the item shown in the prompt.
      - name: isPurchased
        type: bool
        default:
        summary: |
          Indicates if the user pressed **OK** (true), **Cancel** (false) on the
          purchase prompt, or if the purchase prompt errored (false).

          This might not accurately reflect if the purchase itself has been
          successfully processed.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
  - name: MarketplaceService.PromptSubscriptionPurchaseFinished
    summary: |
      Fires when a purchase prompt for a subscription is closed.
    description: |
      This event fires when a purchase prompt for an affiliate gear sale or
      other asset closes. For example, when a user receives the purchase prompt
      and clicks **Cancel**, or when they receive a success or error message and
      click **OK**.

      ##### See also

      - `Class.MarketplaceService.PromptSubscriptionPurchase|PromptSubscriptionPurchase`
        to prompt a user to purchase a subscription.
      - `Class.Players.UserSubscriptionStatusChanged|UserSubscriptionStatusChanged`,
        which fires when the server recognizes that a user's membership has
        changed.
    code_samples: []
    parameters:
      - name: user
        type: Player
        default:
        summary: |
          The `Class.Player` who received the prompt.
      - name: subscriptionId
        type: string
        default:
        summary: |
          The ID of the subscription with a status change.
      - name: didTryPurchasing
        type: bool
        default:
        summary: |
          Whether the user attempted to purchase the subscription.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
callbacks:
  - name: MarketplaceService.ProcessReceipt
    summary: |
      A callback to process receipts of developer product purchases.
    description: |
      **IMPORTANT:** We **highly recommend** that you properly implement the
      `ProcessReceipt` callback in order to sell your developer products. You
      should use `ProcessReceipt` to grant users their purchased product over
      any other granting method. If your `ProcessReceipt` implementation isn't
      correct, you will **not** be able to grant users the products they have
      purchased on the Store tab of your experience details page.

      A callback to process receipts from
      [developer product](../../../production/monetization/developer-products.md)
      purchases. You can sell developer products inside an experience using
      `MarketplaceService` functions, or outside an experience on the Store tab
      of your experience details page.

      You should only set the `ProcessReceipt` callback one time in a single
      server-side `Class.Script|Script`. This callback must handle the receipts
      for all developer products you have for sale.

      #### Guarantees

      The `ProcessReceipt` callback is called for all unresolved developer
      product purchases when:

      - A user successfully completes the purchase of a developer product.
      - A successful developer product purchase prompt appears to the user.
      - A user joins the server.

      A purchase is considered **successfully initiated** when:

      - The purchase is processed on Roblox's backend.
      - The funds are placed in escrow.

      A purchase is considered **resolved** when:

      - The `ProcessReceipt` callback returns a `Enum.ProductPurchaseDecision`
        enum of `Enum.ProductPurchaseDecision.PurchaseGranted|PurchaseGranted`.
      - The purchase is successfully recorded on Roblox's backend.

      #### Unresolved developer product purchases

      An **unresolved developer product purchase** takes place when a user's
      purchase of a developer product has not yet been acknowledged by the
      server through the `ProcessReceipt` function.

      Unresolved developer product purchases are not removed or refunded after
      the escrow period expires.

      #### Retries and timeouts

      `ProcessReceipt` has no time-based retry mechanism. If a user makes a
      purchase that returns a `Enum.ProductPurchaseDecision` enum of
      `Enum.ProductPurchaseDecision.PurchaseGranted|NotProcessedYet`, the
      `ProcessReceipt` callback is only called again on the same server if:

      - The user successfully initiates another developer product purchase.
      - The user re-joins any server under the same experience.

      `ProcessReceipt` also has no timeout for yielded callbacks. A
      `ProcessReceipt` callback can yield for as long as the server is running,
      and the callback result is still accepted when the result returns.

      #### Limitations

      - When there are multiple purchases pending for a user, `ProcessReceipt`
        callbacks are called in a non-deterministic order.
      - The user must be on the server for the `ProcessReceipt` callback to be
        invoked.
      - The user does not have to be on the server for the result of the
        `ProcessReceipt` callback to be recorded on the backend.
      - The `ProcessReceipt` callback for a specific purchase might run on two
        different servers at the same time if the user joins the second server
        before the callback returns on the first server.
      - The `ProcessReceipt` callback might still fail to be recorded on the
        backend, even if it returns a `Enum.ProductPurchaseDecision` enum of
        `Enum.ProductPurchaseDecision.PurchaseGranted|PurchaseGranted`. When
        this happens, the purchase remains unresolved.
    code_samples:
      - ProcessReceipt-Example
    parameters:
      - name: receiptInfo
        type: Dictionary
        default:
        summary: |
          The `receiptInfo` table passed to this callback contains the following
          data:

          - `PurchaseId` &mdash; A unique identifier for the specific purchase.
          - `PlayerId` &mdash; The user ID of the user who made the purchase.
          - `ProductId` &mdash; The ID of the purchased product.
          - `PlaceIdWherePurchased` &mdash; The place ID in which the purchase
            was made. Depending on where the user is during gameplay, the
            purchase place's ID can be the same as or different from the current
            place's ID.
          - `CurrencySpent` &mdash; The amount of currency spent in the
            transaction.
          - `CurrencyType` &mdash; The type of currency spent in the purchase;
            always `Enum.CurrencyType.Robux`.
          - `ProductPurchaseChannel` — How the user acquired the developer
            product. One of `Enum.ProductPurchaseChannel`.
    returns:
      - type: ProductPurchaseDecision
        summary: |
          An enum that represents how the developer product receipt was
          processed.

          - `PurchaseGranted`:
            - Indicates that the experience successfully granted the player the
              developer product.
            - Indicates to Roblox that the developer product sale was
              successful.
          - `NotProcessedYet`:
            - Indicates that the experience failed to grant the player the
              developer product.
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
    capabilities: []
    writeCapabilities: []
